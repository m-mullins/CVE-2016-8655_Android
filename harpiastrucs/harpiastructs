struct list_head {
	struct list_head *         next;                 /*     0     4 */
	struct list_head *         prev;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct hlist_head {
	struct hlist_node *        first;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct hlist_node {
	struct hlist_node *        next;                 /*     0     4 */
	struct hlist_node * *      pprev;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct callback_head {
	struct callback_head *     next;                 /*     0     4 */
	void                       (*func)(struct callback_head *); /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct kernel_symbol {
	long unsigned int          value;                /*     0     4 */
	const char  *              name;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct bug_entry {
	long unsigned int          bug_addr;             /*     0     4 */
	const char  *              file;                 /*     4     4 */
	short unsigned int         line;                 /*     8     2 */
	short unsigned int         flags;                /*    10     2 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct timespec {
	__kernel_time_t            tv_sec;               /*     0     4 */
	long int                   tv_nsec;              /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct task_struct {
	volatile long int          state;                /*     0     4 */
	void *                     stack;                /*     4     4 */
	atomic_t                   usage;                /*     8     4 */
	unsigned int               flags;                /*    12     4 */
	unsigned int               ptrace;               /*    16     4 */
	struct llist_node          wake_entry;           /*    20     4 */
	int                        on_cpu;               /*    24     4 */
	int                        on_rq;                /*    28     4 */
	int                        prio;                 /*    32     4 */
	int                        static_prio;          /*    36     4 */
	int                        normal_prio;          /*    40     4 */
	unsigned int               rt_priority;          /*    44     4 */
	const struct sched_class  * sched_class;         /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	struct sched_entity        se;                   /*    56   344 */
	/* --- cacheline 6 boundary (384 bytes) was 16 bytes ago --- */
	struct sched_rt_entity     rt;                   /*   400    36 */

	/* XXX 4 bytes hole, try to pack */

	struct ravg                ravg;                 /*   440    40 */
	/* --- cacheline 7 boundary (448 bytes) was 32 bytes ago --- */
	struct task_group *        sched_task_group;     /*   480     4 */
	unsigned char              fpu_counter;          /*   484     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               policy;               /*   488     4 */
	int                        nr_cpus_allowed;      /*   492     4 */
	cpumask_t                  cpus_allowed;         /*   496     4 */
	int                        rcu_read_lock_nesting; /*   500     4 */
	char                       rcu_read_unlock_special; /*   504     1 */

	/* XXX 3 bytes hole, try to pack */

	struct list_head           rcu_node_entry;       /*   508     8 */
	/* --- cacheline 8 boundary (512 bytes) was 4 bytes ago --- */
	struct rcu_node *          rcu_blocked_node;     /*   516     4 */
	struct rt_mutex *          rcu_boost_mutex;      /*   520     4 */

	/* XXX 4 bytes hole, try to pack */

	struct sched_info          sched_info;           /*   528    32 */
	struct list_head           tasks;                /*   560     8 */
	struct plist_node          pushable_tasks;       /*   568    20 */
	/* --- cacheline 9 boundary (576 bytes) was 12 bytes ago --- */
	struct mm_struct *         mm;                   /*   588     4 */
	struct mm_struct *         active_mm;            /*   592     4 */
	unsigned int               brk_randomized:1;     /*   596:31  4 */

	/* XXX 31 bits hole, try to pack */

	int                        exit_state;           /*   600     4 */
	int                        exit_code;            /*   604     4 */
	int                        exit_signal;          /*   608     4 */
	int                        pdeath_signal;        /*   612     4 */
	unsigned int               jobctl;               /*   616     4 */
	unsigned int               personality;          /*   620     4 */
	unsigned int               did_exec:1;           /*   624:31  4 */
	unsigned int               in_execve:1;          /*   624:30  4 */
	unsigned int               in_iowait:1;          /*   624:29  4 */
	unsigned int               sched_reset_on_fork:1; /*   624:28  4 */
	unsigned int               sched_contributes_to_load:1; /*   624:27  4 */

	/* XXX 27 bits hole, try to pack */

	long unsigned int          atomic_flags;         /*   628     4 */
	pid_t                      pid;                  /*   632     4 */
	pid_t                      tgid;                 /*   636     4 */
	/* --- cacheline 10 boundary (640 bytes) --- */
	long unsigned int          stack_canary;         /*   640     4 */
	struct task_struct *       real_parent;          /*   644     4 */
	struct task_struct *       parent;               /*   648     4 */
	struct list_head           children;             /*   652     8 */
	struct list_head           sibling;              /*   660     8 */
	struct task_struct *       group_leader;         /*   668     4 */
	struct list_head           ptraced;              /*   672     8 */
	struct list_head           ptrace_entry;         /*   680     8 */
	struct pid_link            pids[3];              /*   688    36 */
	/* --- cacheline 11 boundary (704 bytes) was 20 bytes ago --- */
	struct list_head           thread_group;         /*   724     8 */
	struct list_head           thread_node;          /*   732     8 */
	struct completion *        vfork_done;           /*   740     4 */
	int *                      set_child_tid;        /*   744     4 */
	int *                      clear_child_tid;      /*   748     4 */
	cputime_t                  utime;                /*   752     4 */
	cputime_t                  stime;                /*   756     4 */
	cputime_t                  utimescaled;          /*   760     4 */
	cputime_t                  stimescaled;          /*   764     4 */
	/* --- cacheline 12 boundary (768 bytes) --- */
	cputime_t                  gtime;                /*   768     4 */

	/* XXX 4 bytes hole, try to pack */

	long long unsigned int     cpu_power;            /*   776     8 */
	struct cputime             prev_cputime;         /*   784     8 */
	long unsigned int          nvcsw;                /*   792     4 */
	long unsigned int          nivcsw;               /*   796     4 */
	struct timespec            start_time;           /*   800     8 */
	struct timespec            real_start_time;      /*   808     8 */
	long unsigned int          min_flt;              /*   816     4 */
	long unsigned int          maj_flt;              /*   820     4 */
	struct task_cputime        cputime_expires;      /*   824    16 */
	/* --- cacheline 13 boundary (832 bytes) was 8 bytes ago --- */
	struct list_head           cpu_timers[3];        /*   840    24 */
	const struct cred  *       real_cred;            /*   864     4 */
	const struct cred  *       cred;                 /*   868     4 */
	char                       comm[16];             /*   872    16 */
	int                        link_count;           /*   888     4 */
	int                        total_link_count;     /*   892     4 */
	/* --- cacheline 14 boundary (896 bytes) --- */
	struct sysv_sem            sysvsem;              /*   896     4 */
	struct thread_struct       thread;               /*   900   140 */
	/* --- cacheline 16 boundary (1024 bytes) was 16 bytes ago --- */
	struct fs_struct *         fs;                   /*  1040     4 */
	struct files_struct *      files;                /*  1044     4 */
	struct nsproxy *           nsproxy;              /*  1048     4 */
	struct signal_struct *     signal;               /*  1052     4 */
	struct sighand_struct *    sighand;              /*  1056     4 */
	sigset_t                   blocked;              /*  1060     8 */
	sigset_t                   real_blocked;         /*  1068     8 */
	sigset_t                   saved_sigmask;        /*  1076     8 */
	struct sigpending          pending;              /*  1084    16 */
	/* --- cacheline 17 boundary (1088 bytes) was 12 bytes ago --- */
	long unsigned int          sas_ss_sp;            /*  1100     4 */
	size_t                     sas_ss_size;          /*  1104     4 */
	int                        (*notifier)(void *);  /*  1108     4 */
	void *                     notifier_data;        /*  1112     4 */
	sigset_t *                 notifier_mask;        /*  1116     4 */
	struct callback_head *     task_works;           /*  1120     4 */
	struct audit_context *     audit_context;        /*  1124     4 */
	kuid_t                     loginuid;             /*  1128     4 */
	unsigned int               sessionid;            /*  1132     4 */
	struct seccomp             seccomp;              /*  1136     8 */
	u32                        parent_exec_id;       /*  1144     4 */
	u32                        self_exec_id;         /*  1148     4 */
	/* --- cacheline 18 boundary (1152 bytes) --- */
	spinlock_t                 alloc_lock;           /*  1152    16 */
	raw_spinlock_t             pi_lock;              /*  1168    16 */
	struct plist_head          pi_waiters;           /*  1184     8 */
	struct rt_mutex_waiter *   pi_blocked_on;        /*  1192     4 */
	struct mutex_waiter *      blocked_on;           /*  1196     4 */
	void *                     journal_info;         /*  1200     4 */
	struct bio_list *          bio_list;             /*  1204     4 */
	struct blk_plug *          plug;                 /*  1208     4 */
	struct reclaim_state *     reclaim_state;        /*  1212     4 */
	/* --- cacheline 19 boundary (1216 bytes) --- */
	struct backing_dev_info *  backing_dev_info;     /*  1216     4 */
	struct io_context *        io_context;           /*  1220     4 */
	long unsigned int          ptrace_message;       /*  1224     4 */
	siginfo_t *                last_siginfo;         /*  1228     4 */
	struct task_io_accounting  ioac;                 /*  1232     0 */
	struct css_set *           cgroups;              /*  1232     4 */
	struct list_head           cg_list;              /*  1236     8 */
	struct robust_list_head *  robust_list;          /*  1244     4 */
	struct list_head           pi_state_list;        /*  1248     8 */
	struct futex_pi_state *    pi_state_cache;       /*  1256     4 */
	struct perf_event_context * perf_event_ctxp[2];  /*  1260     8 */
	struct mutex               perf_event_mutex;     /*  1268    40 */
	/* --- cacheline 20 boundary (1280 bytes) was 28 bytes ago --- */
	struct list_head           perf_event_list;      /*  1308     8 */
	struct callback_head       rcu;                  /*  1316     8 */
	struct pipe_inode_info *   splice_pipe;          /*  1324     4 */
	struct page_frag           task_frag;            /*  1328     8 */
	int                        make_it_fail;         /*  1336     4 */
	int                        nr_dirtied;           /*  1340     4 */
	/* --- cacheline 21 boundary (1344 bytes) --- */
	int                        nr_dirtied_pause;     /*  1344     4 */
	long unsigned int          dirty_paused_when;    /*  1348     4 */
	long unsigned int          timer_slack_ns;       /*  1352     4 */
	long unsigned int          default_timer_slack_ns; /*  1356     4 */
	long unsigned int          trace;                /*  1360     4 */
	long unsigned int          trace_recursion;      /*  1364     4 */
	atomic_t                   ptrace_bp_refcnt;     /*  1368     4 */

	/* size: 1376, cachelines: 22, members: 137 */
	/* sum members: 1350, holes: 6, sum holes: 22 */
	/* bit holes: 2, sum bit holes: 58 bits */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct __raw_tickets {
	u16                        owner;                /*     0     2 */
	u16                        next;                 /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct lock_class_key {

	/* size: 0, cachelines: 0, members: 0 */
};
struct raw_spinlock {
	arch_spinlock_t            raw_lock;             /*     0     4 */
	unsigned int               magic;                /*     4     4 */
	unsigned int               owner_cpu;            /*     8     4 */
	void *                     owner;                /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct spinlock {
	union {
		struct raw_spinlock rlock;               /*          16 */
	};                                               /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct debug_info {
	struct perf_event *        hbp[32];              /*     0   128 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 1 */
};
struct thread_struct {
	long unsigned int          address;              /*     0     4 */
	long unsigned int          trap_no;              /*     4     4 */
	long unsigned int          error_code;           /*     8     4 */
	struct debug_info          debug;                /*    12   128 */
	/* --- cacheline 2 boundary (128 bytes) was 12 bytes ago --- */

	/* size: 140, cachelines: 3, members: 4 */
	/* last cacheline: 12 bytes */
};
struct seqcount {
	unsigned int               sequence;             /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct kstat {
	u64                        ino;                  /*     0     8 */
	dev_t                      dev;                  /*     8     4 */
	umode_t                    mode;                 /*    12     2 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               nlink;                /*    16     4 */
	kuid_t                     uid;                  /*    20     4 */
	kgid_t                     gid;                  /*    24     4 */
	dev_t                      rdev;                 /*    28     4 */
	loff_t                     size;                 /*    32     8 */
	struct timespec            atime;                /*    40     8 */
	struct timespec            mtime;                /*    48     8 */
	struct timespec            ctime;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long unsigned int          blksize;              /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	long long unsigned int     blocks;               /*    72     8 */

	/* size: 80, cachelines: 2, members: 13 */
	/* sum members: 74, holes: 2, sum holes: 6 */
	/* last cacheline: 16 bytes */
};
struct __wait_queue_head {
	spinlock_t                 lock;                 /*     0    16 */
	struct list_head           task_list;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct cpu_user_fns {
	void                       (*cpu_clear_user_highpage)(struct page *, long unsigned int); /*     0     4 */
	void                       (*cpu_copy_user_highpage)(struct page *, struct page *, long unsigned int, struct vm_area_struct *); /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct page {
	long unsigned int          flags;                /*     0     4 */
	struct address_space *     mapping;              /*     4     4 */
	struct {
		union {
			long unsigned int index;         /*           4 */
			void *     freelist;             /*           4 */
			bool       pfmemalloc;           /*           1 */
		};                                       /*     8     4 */
		union {
			unsigned int counters;           /*           4 */
			struct {
				union {
					atomic_t _mapcount; /*           4 */
					struct {
						unsigned int   inuse:16; /*    12:16  4 */
						unsigned int   objects:15; /*    12: 1  4 */
						unsigned int   frozen:1; /*    12: 0  4 */
					};               /*           4 */
					int    units;    /*           4 */
				};                       /*    12     4 */
				atomic_t _count;         /*    16     4 */
			};                               /*           8 */
		};                                       /*    12     8 */
	};                                               /*     8    12 */
	union {
		struct list_head   lru;                  /*           8 */
		struct {
			struct page * next;              /*    20     4 */
			short int  pages;                /*    24     2 */
			short int  pobjects;             /*    26     2 */
		};                                       /*           8 */
		struct list_head   list;                 /*           8 */
		struct slab *      slab_page;            /*           4 */
	};                                               /*    20     8 */
	union {
		long unsigned int  private;              /*           4 */
		struct kmem_cache * slab_cache;          /*           4 */
		struct page *      first_page;           /*           4 */
	};                                               /*    28     4 */
	long unsigned int          debug_flags;          /*    32     4 */
	int                        order;                /*    36     4 */
	gfp_t                      gfp_mask;             /*    40     4 */
	struct stack_trace         trace;                /*    44    16 */
	long unsigned int          trace_entries[8];     /*    60    32 */
	/* --- cacheline 1 boundary (64 bytes) was 28 bytes ago --- */

	/* size: 92, cachelines: 2, members: 10 */
	/* last cacheline: 28 bytes */
};
struct vm_area_struct {
	long unsigned int          vm_start;             /*     0     4 */
	long unsigned int          vm_end;               /*     4     4 */
	struct vm_area_struct *    vm_next;              /*     8     4 */
	struct vm_area_struct *    vm_prev;              /*    12     4 */
	struct rb_node             vm_rb;                /*    16    12 */
	long unsigned int          rb_subtree_gap;       /*    28     4 */
	struct mm_struct *         vm_mm;                /*    32     4 */
	pgprot_t                   vm_page_prot;         /*    36     4 */
	long unsigned int          vm_flags;             /*    40     4 */
	union {
		struct {
			struct rb_node rb;               /*    44    12 */
			long unsigned int rb_subtree_last; /*    56     4 */
		} linear;                                /*          16 */
		struct list_head   nonlinear;            /*           8 */
		const char  *      anon_name;            /*           4 */
	} shared;                                        /*    44    16 */
	struct list_head           anon_vma_chain;       /*    60     8 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	struct anon_vma *          anon_vma;             /*    68     4 */
	const struct vm_operations_struct  * vm_ops;     /*    72     4 */
	long unsigned int          vm_pgoff;             /*    76     4 */
	struct file *              vm_file;              /*    80     4 */
	void *                     vm_private_data;      /*    84     4 */

	/* size: 88, cachelines: 2, members: 16 */
	/* last cacheline: 24 bytes */
};
struct free_area {
	struct list_head           free_list[6];         /*     0    48 */
	long unsigned int          nr_free;              /*    48     4 */

	/* size: 52, cachelines: 1, members: 2 */
	/* last cacheline: 52 bytes */
};
struct zone_padding {
	char                       x[0];                 /*     0     0 */

	/* size: 0, cachelines: 0, members: 1 */
};
struct zone_reclaim_stat {
	long unsigned int          recent_rotated[2];    /*     0     8 */
	long unsigned int          recent_scanned[2];    /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct lruvec {
	struct list_head           lists[5];             /*     0    40 */
	struct zone_reclaim_stat   reclaim_stat;         /*    40    16 */

	/* size: 56, cachelines: 1, members: 2 */
	/* last cacheline: 56 bytes */
};
struct per_cpu_pages {
	int                        count;                /*     0     4 */
	int                        high;                 /*     4     4 */
	int                        batch;                /*     8     4 */
	struct list_head           lists[3];             /*    12    24 */

	/* size: 36, cachelines: 1, members: 4 */
	/* last cacheline: 36 bytes */
};
struct per_cpu_pageset {
	struct per_cpu_pages       pcp;                  /*     0    36 */
	s8                         stat_threshold;       /*    36     1 */
	s8                         vm_stat_diff[31];     /*    37    31 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */

	/* size: 68, cachelines: 2, members: 3 */
	/* last cacheline: 4 bytes */
};
struct zone {
	long unsigned int          watermark[3];         /*     0    12 */
	long unsigned int          percpu_drift_mark;    /*    12     4 */
	long unsigned int          lowmem_reserve[3];    /*    16    12 */
	long unsigned int          dirty_balance_reserve; /*    28     4 */
	struct per_cpu_pageset *   pageset;              /*    32     4 */
	spinlock_t                 lock;                 /*    36    16 */
	bool                       compact_blockskip_flush; /*    52     1 */

	/* XXX 3 bytes hole, try to pack */

	long unsigned int          compact_cached_free_pfn; /*    56     4 */
	long unsigned int          compact_cached_migrate_pfn; /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long unsigned int          nr_isolate_pageblock; /*    64     4 */
	bool                       cma_alloc;            /*    68     1 */

	/* XXX 3 bytes hole, try to pack */

	struct free_area           free_area[11];        /*    72   572 */
	/* --- cacheline 10 boundary (640 bytes) was 4 bytes ago --- */
	long unsigned int *        pageblock_flags;      /*   644     4 */
	unsigned int               compact_considered;   /*   648     4 */
	unsigned int               compact_defer_shift;  /*   652     4 */
	int                        compact_order_failed; /*   656     4 */

	/* XXX 44 bytes hole, try to pack */

	/* --- cacheline 11 boundary (704 bytes) --- */
	struct zone_padding        _pad1_;               /*   704     0 */
	spinlock_t                 lru_lock;             /*   704    16 */
	struct lruvec              lruvec;               /*   720    56 */
	/* --- cacheline 12 boundary (768 bytes) was 8 bytes ago --- */
	long unsigned int          pages_scanned;        /*   776     4 */
	long unsigned int          flags;                /*   780     4 */
	atomic_long_t              vm_stat[31];          /*   784   124 */
	/* --- cacheline 14 boundary (896 bytes) was 12 bytes ago --- */
	unsigned int               inactive_ratio;       /*   908     4 */

	/* XXX 48 bytes hole, try to pack */

	/* --- cacheline 15 boundary (960 bytes) --- */
	struct zone_padding        _pad2_;               /*   960     0 */
	wait_queue_head_t *        wait_table;           /*   960     4 */
	long unsigned int          wait_table_hash_nr_entries; /*   964     4 */
	long unsigned int          wait_table_bits;      /*   968     4 */
	struct pglist_data *       zone_pgdat;           /*   972     4 */
	long unsigned int          zone_start_pfn;       /*   976     4 */
	long unsigned int          spanned_pages;        /*   980     4 */
	long unsigned int          present_pages;        /*   984     4 */
	long unsigned int          managed_pages;        /*   988     4 */
	const char  *              name;                 /*   992     4 */

	/* size: 1024, cachelines: 16, members: 33 */
	/* sum members: 898, holes: 4, sum holes: 98 */
	/* padding: 28 */
};
struct pglist_data {
	struct zone                node_zones[3];        /*     0  3072 */
	/* --- cacheline 48 boundary (3072 bytes) --- */
	struct zonelist            node_zonelists[1];    /*  3072    36 */
	int                        nr_zones;             /*  3108     4 */
	struct page *              node_mem_map;         /*  3112     4 */
	struct bootmem_data *      bdata;                /*  3116     4 */
	long unsigned int          node_start_pfn;       /*  3120     4 */
	long unsigned int          node_present_pages;   /*  3124     4 */
	long unsigned int          node_spanned_pages;   /*  3128     4 */
	int                        node_id;              /*  3132     4 */
	/* --- cacheline 49 boundary (3136 bytes) --- */
	nodemask_t                 reclaim_nodes;        /*  3136     4 */
	wait_queue_head_t          kswapd_wait;          /*  3140    24 */
	wait_queue_head_t          pfmemalloc_wait;      /*  3164    24 */
	struct task_struct *       kswapd;               /*  3188     4 */
	int                        kswapd_max_order;     /*  3192     4 */
	enum zone_type             classzone_idx;        /*  3196     4 */
	/* --- cacheline 50 boundary (3200 bytes) --- */

	/* size: 3200, cachelines: 50, members: 15 */
};
struct zoneref {
	struct zone *              zone;                 /*     0     4 */
	int                        zone_idx;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct zonelist {
	struct zonelist_cache *    zlcache_ptr;          /*     0     4 */
	struct zoneref             _zonerefs[4];         /*     4    32 */

	/* size: 36, cachelines: 1, members: 2 */
	/* last cacheline: 36 bytes */
};
struct mutex {
	atomic_t                   count;                /*     0     4 */
	spinlock_t                 wait_lock;            /*     4    16 */
	struct list_head           wait_list;            /*    20     8 */
	struct task_struct *       owner;                /*    28     4 */
	const char  *              name;                 /*    32     4 */
	void *                     magic;                /*    36     4 */

	/* size: 40, cachelines: 1, members: 6 */
	/* last cacheline: 40 bytes */
};
struct mutex_waiter {
	struct list_head           list;                 /*     0     8 */
	struct task_struct *       task;                 /*     8     4 */
	void *                     magic;                /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct rw_semaphore {
	__s32                      activity;             /*     0     4 */
	raw_spinlock_t             wait_lock;            /*     4    16 */
	struct list_head           wait_list;            /*    20     8 */

	/* size: 28, cachelines: 1, members: 3 */
	/* last cacheline: 28 bytes */
};
struct cpumask {
	long unsigned int          bits[1];              /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct completion {
	unsigned int               done;                 /*     0     4 */
	wait_queue_head_t          wait;                 /*     4    24 */

	/* size: 28, cachelines: 1, members: 2 */
	/* last cacheline: 28 bytes */
};
struct timer_list {
	struct list_head           entry;                /*     0     8 */
	long unsigned int          expires;              /*     8     4 */
	struct tvec_base *         base;                 /*    12     4 */
	void                       (*function)(long unsigned int); /*    16     4 */
	long unsigned int          data;                 /*    20     4 */
	int                        slack;                /*    24     4 */
	int                        start_pid;            /*    28     4 */
	void *                     start_site;           /*    32     4 */
	char                       start_comm[16];       /*    36    16 */

	/* size: 52, cachelines: 1, members: 9 */
	/* last cacheline: 52 bytes */
};
struct work_struct {
	atomic_long_t              data;                 /*     0     4 */
	struct list_head           entry;                /*     4     8 */
	work_func_t                func;                 /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct delayed_work {
	struct work_struct         work;                 /*     0    16 */
	struct timer_list          timer;                /*    16    52 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	struct workqueue_struct *  wq;                   /*    68     4 */
	int                        cpu;                  /*    72     4 */

	/* size: 76, cachelines: 2, members: 4 */
	/* last cacheline: 12 bytes */
};
struct notifier_block {
	notifier_fn_t              notifier_call;        /*     0     4 */
	struct notifier_block *    next;                 /*     4     4 */
	int                        priority;             /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct atomic_notifier_head {
	spinlock_t                 lock;                 /*     0    16 */
	struct notifier_block *    head;                 /*    16     4 */

	/* size: 20, cachelines: 1, members: 2 */
	/* last cacheline: 20 bytes */
};
struct blocking_notifier_head {
	struct rw_semaphore        rwsem;                /*     0    28 */
	struct notifier_block *    head;                 /*    28     4 */

	/* size: 32, cachelines: 1, members: 2 */
	/* last cacheline: 32 bytes */
};
struct rb_node {
	long unsigned int          __rb_parent_color;    /*     0     4 */
	struct rb_node *           rb_right;             /*     4     4 */
	struct rb_node *           rb_left;              /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct rb_root {
	struct rb_node *           rb_node;              /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ctl_table {
	const char  *              procname;             /*     0     4 */
	void *                     data;                 /*     4     4 */
	int                        maxlen;               /*     8     4 */
	umode_t                    mode;                 /*    12     2 */

	/* XXX 2 bytes hole, try to pack */

	struct ctl_table *         child;                /*    16     4 */
	proc_handler *             proc_handler;         /*    20     4 */
	struct ctl_table_poll *    poll;                 /*    24     4 */
	void *                     extra1;               /*    28     4 */
	void *                     extra2;               /*    32     4 */

	/* size: 36, cachelines: 1, members: 9 */
	/* sum members: 34, holes: 1, sum holes: 2 */
	/* last cacheline: 36 bytes */
};
struct ctl_table_poll {
	atomic_t                   event;                /*     0     4 */
	wait_queue_head_t          wait;                 /*     4    24 */

	/* size: 28, cachelines: 1, members: 2 */
	/* last cacheline: 28 bytes */
};
struct ctl_node {
	struct rb_node             node;                 /*     0    12 */
	struct ctl_table_header *  header;               /*    12     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ctl_table_header {
	union {
		struct {
			struct ctl_table * ctl_table;    /*     0     4 */
			int        used;                 /*     4     4 */
			int        count;                /*     8     4 */
			int        nreg;                 /*    12     4 */
		};                                       /*          16 */
		struct callback_head rcu;                /*           8 */
	};                                               /*     0    16 */
	struct completion *        unregistering;        /*    16     4 */
	struct ctl_table *         ctl_table_arg;        /*    20     4 */
	struct ctl_table_root *    root;                 /*    24     4 */
	struct ctl_table_set *     set;                  /*    28     4 */
	struct ctl_dir *           parent;               /*    32     4 */
	struct ctl_node *          node;                 /*    36     4 */

	/* size: 40, cachelines: 1, members: 7 */
	/* last cacheline: 40 bytes */
};
struct ctl_table_root {
	struct ctl_table_set       default_set;          /*     0    48 */
	struct ctl_table_set *     (*lookup)(struct ctl_table_root *, struct nsproxy *); /*    48     4 */
	int                        (*permissions)(struct ctl_table_header *, struct ctl_table *); /*    52     4 */

	/* size: 56, cachelines: 1, members: 3 */
	/* last cacheline: 56 bytes */
};
struct ctl_table_set {
	int                        (*is_seen)(struct ctl_table_set *); /*     0     4 */
	struct ctl_dir             dir;                  /*     4    44 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct ctl_dir {
	struct ctl_table_header    header;               /*     0    40 */
	struct rb_root             root;                 /*    40     4 */

	/* size: 44, cachelines: 1, members: 2 */
	/* last cacheline: 44 bytes */
};
struct nsproxy {
	atomic_t                   count;                /*     0     4 */
	struct uts_namespace *     uts_ns;               /*     4     4 */
	struct ipc_namespace *     ipc_ns;               /*     8     4 */
	struct mnt_namespace *     mnt_ns;               /*    12     4 */
	struct pid_namespace *     pid_ns;               /*    16     4 */
	struct net *               net_ns;               /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct cred {
	atomic_t                   usage;                /*     0     4 */
	kuid_t                     uid;                  /*     4     4 */
	kgid_t                     gid;                  /*     8     4 */
	kuid_t                     suid;                 /*    12     4 */
	kgid_t                     sgid;                 /*    16     4 */
	kuid_t                     euid;                 /*    20     4 */
	kgid_t                     egid;                 /*    24     4 */
	kuid_t                     fsuid;                /*    28     4 */
	kgid_t                     fsgid;                /*    32     4 */
	unsigned int               securebits;           /*    36     4 */
	kernel_cap_t               cap_inheritable;      /*    40     8 */
	kernel_cap_t               cap_permitted;        /*    48     8 */
	kernel_cap_t               cap_effective;        /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	kernel_cap_t               cap_bset;             /*    64     8 */
	unsigned char              jit_keyring;          /*    72     1 */

	/* XXX 3 bytes hole, try to pack */

	struct key *               session_keyring;      /*    76     4 */
	struct key *               process_keyring;      /*    80     4 */
	struct key *               thread_keyring;       /*    84     4 */
	struct key *               request_key_auth;     /*    88     4 */
	void *                     security;             /*    92     4 */
	struct user_struct *       user;                 /*    96     4 */
	struct user_namespace *    user_ns;              /*   100     4 */
	struct group_info *        group_info;           /*   104     4 */
	struct callback_head       rcu;                  /*   108     8 */

	/* size: 116, cachelines: 2, members: 24 */
	/* sum members: 113, holes: 1, sum holes: 3 */
	/* last cacheline: 52 bytes */
};
struct elf32_sym {
	Elf32_Word                 st_name;              /*     0     4 */
	Elf32_Addr                 st_value;             /*     4     4 */
	Elf32_Word                 st_size;              /*     8     4 */
	unsigned char              st_info;              /*    12     1 */
	unsigned char              st_other;             /*    13     1 */
	Elf32_Half                 st_shndx;             /*    14     2 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct kobj_ns_type_operations {
	enum kobj_ns_type          type;                 /*     0     4 */
	void *                     (*grab_current_ns)(void); /*     4     4 */
	const void  *              (*netlink_ns)(struct sock *); /*     8     4 */
	const void  *              (*initial_ns)(void);  /*    12     4 */
	void                       (*drop_ns)(void *);   /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct sock {
	struct sock_common         __sk_common;          /*     0    56 */
	socket_lock_t              sk_lock;              /*    56    44 */
	/* --- cacheline 1 boundary (64 bytes) was 36 bytes ago --- */
	struct sk_buff_head        sk_receive_queue;     /*   100    28 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct {
		atomic_t           rmem_alloc;           /*   128     4 */
		int                len;                  /*   132     4 */
		struct sk_buff *   head;                 /*   136     4 */
		struct sk_buff *   tail;                 /*   140     4 */
	} sk_backlog;                                    /*   128    16 */
	int                        sk_forward_alloc;     /*   144     4 */
	__u32                      sk_rxhash;            /*   148     4 */
	atomic_t                   sk_drops;             /*   152     4 */
	int                        sk_rcvbuf;            /*   156     4 */
	struct sk_filter *         sk_filter;            /*   160     4 */
	struct socket_wq *         sk_wq;                /*   164     4 */
	struct xfrm_policy *       sk_policy[2];         /*   168     8 */
	long unsigned int          sk_flags;             /*   176     4 */
	struct dst_entry *         sk_rx_dst;            /*   180     4 */
	struct dst_entry *         sk_dst_cache;         /*   184     4 */
	spinlock_t                 sk_dst_lock;          /*   188    16 */
	/* --- cacheline 3 boundary (192 bytes) was 12 bytes ago --- */
	atomic_t                   sk_wmem_alloc;        /*   204     4 */
	atomic_t                   sk_omem_alloc;        /*   208     4 */
	int                        sk_sndbuf;            /*   212     4 */
	struct sk_buff_head        sk_write_queue;       /*   216    28 */
	unsigned int               sk_shutdown:2;        /*   244:30  4 */
	unsigned int               sk_no_check:2;        /*   244:28  4 */
	unsigned int               sk_userlocks:4;       /*   244:24  4 */
	unsigned int               sk_protocol:8;        /*   244:16  4 */
	unsigned int               sk_type:16;           /*   244: 0  4 */
	int                        sk_wmem_queued;       /*   248     4 */
	gfp_t                      sk_allocation;        /*   252     4 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	u32                        sk_pacing_rate;       /*   256     4 */

	/* XXX 4 bytes hole, try to pack */

	netdev_features_t          sk_route_caps;        /*   264     8 */
	netdev_features_t          sk_route_nocaps;      /*   272     8 */
	int                        sk_gso_type;          /*   280     4 */
	unsigned int               sk_gso_max_size;      /*   284     4 */
	u16                        sk_gso_max_segs;      /*   288     2 */

	/* XXX 2 bytes hole, try to pack */

	int                        sk_rcvlowat;          /*   292     4 */
	long unsigned int          sk_lingertime;        /*   296     4 */
	struct sk_buff_head        sk_error_queue;       /*   300    28 */
	/* --- cacheline 5 boundary (320 bytes) was 8 bytes ago --- */
	struct proto *             sk_prot_creator;      /*   328     4 */
	rwlock_t                   sk_callback_lock;     /*   332    16 */
	int                        sk_err;               /*   348     4 */
	int                        sk_err_soft;          /*   352     4 */
	short unsigned int         sk_ack_backlog;       /*   356     2 */
	short unsigned int         sk_max_ack_backlog;   /*   358     2 */
	__u32                      sk_priority;          /*   360     4 */
	struct pid *               sk_peer_pid;          /*   364     4 */
	const struct cred  *       sk_peer_cred;         /*   368     4 */
	long int                   sk_rcvtimeo;          /*   372     4 */
	long int                   sk_sndtimeo;          /*   376     4 */
	void *                     sk_protinfo;          /*   380     4 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	struct timer_list          sk_timer;             /*   384    52 */

	/* XXX 4 bytes hole, try to pack */

	ktime_t                    sk_stamp;             /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	struct socket *            sk_socket;            /*   448     4 */
	void *                     sk_user_data;         /*   452     4 */
	struct page_frag           sk_frag;              /*   456     8 */
	struct sk_buff *           sk_send_head;         /*   464     4 */
	__s32                      sk_peek_off;          /*   468     4 */
	int                        sk_write_pending;     /*   472     4 */
	void *                     sk_security;          /*   476     4 */
	__u32                      sk_mark;              /*   480     4 */
	u32                        sk_classid;           /*   484     4 */
	struct cg_proto *          sk_cgrp;              /*   488     4 */
	void                       (*sk_state_change)(struct sock *); /*   492     4 */
	void                       (*sk_data_ready)(struct sock *, int); /*   496     4 */
	void                       (*sk_write_space)(struct sock *); /*   500     4 */
	void                       (*sk_error_report)(struct sock *); /*   504     4 */
	int                        (*sk_backlog_rcv)(struct sock *, struct sk_buff *); /*   508     4 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	void                       (*sk_destruct)(struct sock *); /*   512     4 */

	/* size: 520, cachelines: 9, members: 65 */
	/* sum members: 506, holes: 3, sum holes: 10 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct attribute {
	const char  *              name;                 /*     0     4 */
	umode_t                    mode;                 /*     4     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct attribute_group {
	const char  *              name;                 /*     0     4 */
	umode_t                    (*is_visible)(struct kobject *, struct attribute *, int); /*     4     4 */
	struct attribute * *       attrs;                /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct kobject {
	const char  *              name;                 /*     0     4 */
	struct list_head           entry;                /*     4     8 */
	struct kobject *           parent;               /*    12     4 */
	struct kset *              kset;                 /*    16     4 */
	struct kobj_type *         ktype;                /*    20     4 */
	struct sysfs_dirent *      sd;                   /*    24     4 */
	struct kref                kref;                 /*    28     4 */
	unsigned int               state_initialized:1;  /*    32:31  4 */
	unsigned int               state_in_sysfs:1;     /*    32:30  4 */
	unsigned int               state_add_uevent_sent:1; /*    32:29  4 */
	unsigned int               state_remove_uevent_sent:1; /*    32:28  4 */
	unsigned int               uevent_suppress:1;    /*    32:27  4 */

	/* size: 36, cachelines: 1, members: 12 */
	/* bit_padding: 27 bits */
	/* last cacheline: 36 bytes */
};
struct bin_attribute {
	struct attribute           attr;                 /*     0     8 */

	/* XXX last struct has 2 bytes of padding */

	size_t                     size;                 /*     8     4 */
	void *                     private;              /*    12     4 */
	ssize_t                    (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t); /*    16     4 */
	ssize_t                    (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t); /*    20     4 */
	int                        (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *); /*    24     4 */

	/* size: 28, cachelines: 1, members: 6 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 28 bytes */
};
struct file {
	union {
		struct list_head   fu_list;              /*           8 */
		struct callback_head fu_rcuhead;         /*           8 */
	} f_u;                                           /*     0     8 */
	struct path                f_path;               /*     8     8 */
	struct inode *             f_inode;              /*    16     4 */
	const struct file_operations  * f_op;            /*    20     4 */
	spinlock_t                 f_lock;               /*    24    16 */
	int                        f_sb_list_cpu;        /*    40     4 */
	atomic_long_t              f_count;              /*    44     4 */
	unsigned int               f_flags;              /*    48     4 */
	fmode_t                    f_mode;               /*    52     4 */
	loff_t                     f_pos;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct fown_struct         f_owner;              /*    64    36 */
	const struct cred  *       f_cred;               /*   100     4 */
	struct file_ra_state       f_ra;                 /*   104    32 */
	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */
	u64                        f_version;            /*   136     8 */
	void *                     f_security;           /*   144     4 */
	void *                     private_data;         /*   148     4 */
	struct list_head           f_ep_links;           /*   152     8 */
	struct list_head           f_tfile_llink;        /*   160     8 */
	struct address_space *     f_mapping;            /*   168     4 */

	/* size: 176, cachelines: 3, members: 19 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct sysfs_ops {
	ssize_t                    (*show)(struct kobject *, struct attribute *, char *); /*     0     4 */
	ssize_t                    (*store)(struct kobject *, struct attribute *, const char  *, size_t); /*     4     4 */
	const void  *              (*namespace)(struct kobject *, const struct attribute  *); /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct kref {
	atomic_t                   refcount;             /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct kset {
	struct list_head           list;                 /*     0     8 */
	spinlock_t                 list_lock;            /*     8    16 */
	struct kobject             kobj;                 /*    24    36 */
	const struct kset_uevent_ops  * uevent_ops;      /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 4 */
};
struct kobj_type {
	void                       (*release)(struct kobject *); /*     0     4 */
	const struct sysfs_ops  *  sysfs_ops;            /*     4     4 */
	struct attribute * *       default_attrs;        /*     8     4 */
	const struct kobj_ns_type_operations  * (*child_ns_type)(struct kobject *); /*    12     4 */
	const void  *              (*namespace)(struct kobject *); /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct kobj_uevent_env {
	char *                     envp[32];             /*     0   128 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        envp_idx;             /*   128     4 */
	char                       buf[2048];            /*   132  2048 */
	/* --- cacheline 34 boundary (2176 bytes) was 4 bytes ago --- */
	int                        buflen;               /*  2180     4 */

	/* size: 2184, cachelines: 35, members: 4 */
	/* last cacheline: 8 bytes */
};
struct kset_uevent_ops {
	int ()(struct kset *, struct kobject *) *const filter; /*     0     4 */
	const char  * ()(struct kset *, struct kobject *) *const name; /*     4     4 */
	int ()(struct kset *, struct kobject *, struct kobj_uevent_env *) *const uevent; /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct kernel_param_ops {
	int                        (*set)(const char  *, const struct kernel_param  *); /*     0     4 */
	int                        (*get)(char *, const struct kernel_param  *); /*     4     4 */
	void                       (*free)(void *);      /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct kernel_param {
	const char  *              name;                 /*     0     4 */
	const struct kernel_param_ops  * ops;            /*     4     4 */
	u16                        perm;                 /*     8     2 */
	s16                        level;                /*    10     2 */
	union {
		void *             arg;                  /*           4 */
		const struct kparam_string  * str;       /*           4 */
		const struct kparam_array  * arr;        /*           4 */
	};                                               /*    12     4 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct kparam_string {
	unsigned int               maxlen;               /*     0     4 */
	char *                     string;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct kparam_array {
	unsigned int               max;                  /*     0     4 */
	unsigned int               elemsize;             /*     4     4 */
	unsigned int *             num;                  /*     8     4 */
	const struct kernel_param_ops  * ops;            /*    12     4 */
	void *                     elem;                 /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct static_key {
	atomic_t                   enabled;              /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct tracepoint_func {
	void *                     func;                 /*     0     4 */
	void *                     data;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct tracepoint {
	const char  *              name;                 /*     0     4 */
	struct static_key          key;                  /*     4     4 */
	void                       (*regfunc)(void);     /*     8     4 */
	void                       (*unregfunc)(void);   /*    12     4 */
	struct tracepoint_func *   funcs;                /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct mod_arch_specific {
	struct unwind_table *      unwind[5];            /*     0    20 */

	/* size: 20, cachelines: 1, members: 1 */
	/* last cacheline: 20 bytes */
};
struct module_kobject {
	struct kobject             kobj;                 /*     0    36 */
	struct module *            mod;                  /*    36     4 */
	struct kobject *           drivers_dir;          /*    40     4 */
	struct module_param_attrs * mp;                  /*    44     4 */

	/* size: 48, cachelines: 1, members: 4 */
	/* last cacheline: 48 bytes */
};
struct module {
	enum module_state          state;                /*     0     4 */
	struct list_head           list;                 /*     4     8 */
	char                       name[60];             /*    12    60 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct module_kobject      mkobj;                /*    72    48 */
	struct module_attribute *  modinfo_attrs;        /*   120     4 */
	const char  *              version;              /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	const char  *              srcversion;           /*   128     4 */
	struct kobject *           holders_dir;          /*   132     4 */
	const struct kernel_symbol  * syms;              /*   136     4 */
	const long unsigned int  * crcs;                 /*   140     4 */
	unsigned int               num_syms;             /*   144     4 */
	struct kernel_param *      kp;                   /*   148     4 */
	unsigned int               num_kp;               /*   152     4 */
	unsigned int               num_gpl_syms;         /*   156     4 */
	const struct kernel_symbol  * gpl_syms;          /*   160     4 */
	const long unsigned int  * gpl_crcs;             /*   164     4 */
	bool                       sig_ok;               /*   168     1 */

	/* XXX 3 bytes hole, try to pack */

	const struct kernel_symbol  * gpl_future_syms;   /*   172     4 */
	const long unsigned int  * gpl_future_crcs;      /*   176     4 */
	unsigned int               num_gpl_future_syms;  /*   180     4 */
	unsigned int               num_exentries;        /*   184     4 */
	struct exception_table_entry * extable;          /*   188     4 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        (*init)(void);        /*   192     4 */
	void *                     module_init;          /*   196     4 */
	void *                     module_core;          /*   200     4 */
	unsigned int               init_size;            /*   204     4 */
	unsigned int               core_size;            /*   208     4 */
	unsigned int               init_text_size;       /*   212     4 */
	unsigned int               core_text_size;       /*   216     4 */
	unsigned int               init_ro_size;         /*   220     4 */
	unsigned int               core_ro_size;         /*   224     4 */
	struct mod_arch_specific   arch;                 /*   228    20 */
	unsigned int               taints;               /*   248     4 */
	unsigned int               num_bugs;             /*   252     4 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	struct list_head           bug_list;             /*   256     8 */
	struct bug_entry *         bug_table;            /*   264     4 */
	Elf32_Sym *                symtab;               /*   268     4 */
	Elf32_Sym *                core_symtab;          /*   272     4 */
	unsigned int               num_symtab;           /*   276     4 */
	unsigned int               core_num_syms;        /*   280     4 */
	char *                     strtab;               /*   284     4 */
	char *                     core_strtab;          /*   288     4 */
	struct module_sect_attrs * sect_attrs;           /*   292     4 */
	struct module_notes_attrs * notes_attrs;         /*   296     4 */
	char *                     args;                 /*   300     4 */
	void *                     percpu;               /*   304     4 */
	unsigned int               percpu_size;          /*   308     4 */
	unsigned int               num_tracepoints;      /*   312     4 */
	const struct tracepoint *  * tracepoints_ptrs;   /*   316     4 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	unsigned int               num_trace_bprintk_fmt; /*   320     4 */
	const char  * *            trace_bprintk_fmt_start; /*   324     4 */
	struct ftrace_event_call * * trace_events;       /*   328     4 */
	unsigned int               num_trace_events;     /*   332     4 */
	struct list_head           source_list;          /*   336     8 */
	struct list_head           target_list;          /*   344     8 */
	struct task_struct *       waiter;               /*   352     4 */
	void                       (*exit)(void);        /*   356     4 */
	struct module_ref *        refptr;               /*   360     4 */
	void *                     raw_binary_ptr;       /*   364     4 */
	long unsigned int          raw_binary_size;      /*   368     4 */
	void *                     linked_binary_ptr;    /*   372     4 */
	long unsigned int          linked_binary_size;   /*   376     4 */

	/* size: 380, cachelines: 6, members: 62 */
	/* sum members: 377, holes: 1, sum holes: 3 */
	/* last cacheline: 60 bytes */
};
struct module_attribute {
	struct attribute           attr;                 /*     0     8 */

	/* XXX last struct has 2 bytes of padding */

	ssize_t                    (*show)(struct module_attribute *, struct module_kobject *, char *); /*     8     4 */
	ssize_t                    (*store)(struct module_attribute *, struct module_kobject *, const char  *, size_t); /*    12     4 */
	void                       (*setup)(struct module *, const char  *); /*    16     4 */
	int                        (*test)(struct module *); /*    20     4 */
	void                       (*free)(struct module *); /*    24     4 */

	/* size: 28, cachelines: 1, members: 6 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 28 bytes */
};
struct module_ref {
	long unsigned int          incs;                 /*     0     4 */
	long unsigned int          decs;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct exception_table_entry {
	long unsigned int          insn;                 /*     0     4 */
	long unsigned int          fixup;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct module_sect_attrs {
	struct attribute_group     grp;                  /*     0    12 */
	unsigned int               nsections;            /*    12     4 */
	struct module_sect_attr    attrs[0];             /*    16     0 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct resource {
	resource_size_t            start;                /*     0     4 */
	resource_size_t            end;                  /*     4     4 */
	const char  *              name;                 /*     8     4 */
	long unsigned int          flags;                /*    12     4 */
	struct resource *          parent;               /*    16     4 */
	struct resource *          sibling;              /*    20     4 */
	struct resource *          child;                /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* last cacheline: 28 bytes */
};
struct path {
	struct vfsmount *          mnt;                  /*     0     4 */
	struct dentry *            dentry;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct vfsmount {
	struct dentry *            mnt_root;             /*     0     4 */
	struct super_block *       mnt_sb;               /*     4     4 */
	int                        mnt_flags;            /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct dentry {
	unsigned int               d_flags;              /*     0     4 */
	seqcount_t                 d_seq;                /*     4     4 */
	struct hlist_bl_node       d_hash;               /*     8     8 */
	struct dentry *            d_parent;             /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct qstr                d_name;               /*    24    16 */
	struct inode *             d_inode;              /*    40     4 */
	unsigned char              d_iname[36];          /*    44    36 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	unsigned int               d_count;              /*    80     4 */
	spinlock_t                 d_lock;               /*    84    16 */
	const struct dentry_operations  * d_op;          /*   100     4 */
	struct super_block *       d_sb;                 /*   104     4 */
	long unsigned int          d_time;               /*   108     4 */
	void *                     d_fsdata;             /*   112     4 */
	struct list_head           d_lru;                /*   116     8 */
	union {
		struct list_head   d_child;              /*           8 */
		struct callback_head d_rcu;              /*           8 */
	} d_u;                                           /*   124     8 */
	/* --- cacheline 2 boundary (128 bytes) was 4 bytes ago --- */
	struct list_head           d_subdirs;            /*   132     8 */
	struct hlist_node          d_alias;              /*   140     8 */

	/* size: 152, cachelines: 3, members: 17 */
	/* sum members: 144, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct fs_struct {
	int                        users;                /*     0     4 */
	spinlock_t                 lock;                 /*     4    16 */
	seqcount_t                 seq;                  /*    20     4 */
	int                        umask;                /*    24     4 */
	int                        in_exec;              /*    28     4 */
	struct path                root;                 /*    32     8 */
	struct path                pwd;                  /*    40     8 */

	/* size: 48, cachelines: 1, members: 7 */
	/* last cacheline: 48 bytes */
};
struct hlist_bl_head {
	struct hlist_bl_node *     first;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct hlist_bl_node {
	struct hlist_bl_node *     next;                 /*     0     4 */
	struct hlist_bl_node * *   pprev;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct qstr {
	union {
		struct {
			u32        hash;                 /*     0     4 */
			u32        len;                  /*     4     4 */
		};                                       /*           8 */
		u64                hash_len;             /*           8 */
	};                                               /*     0     8 */
	const unsigned char  *     name;                 /*     8     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct inode {
	umode_t                    i_mode;               /*     0     2 */
	short unsigned int         i_opflags;            /*     2     2 */
	kuid_t                     i_uid;                /*     4     4 */
	kgid_t                     i_gid;                /*     8     4 */
	unsigned int               i_flags;              /*    12     4 */
	struct posix_acl *         i_acl;                /*    16     4 */
	struct posix_acl *         i_default_acl;        /*    20     4 */
	const struct inode_operations  * i_op;           /*    24     4 */
	struct super_block *       i_sb;                 /*    28     4 */
	struct address_space *     i_mapping;            /*    32     4 */
	void *                     i_security;           /*    36     4 */
	long unsigned int          i_ino;                /*    40     4 */
	union {
		unsigned intconst  i_nlink;              /*           4 */
		unsigned int       __i_nlink;            /*           4 */
	};                                               /*    44     4 */
	dev_t                      i_rdev;               /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	loff_t                     i_size;               /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct timespec            i_atime;              /*    64     8 */
	struct timespec            i_mtime;              /*    72     8 */
	struct timespec            i_ctime;              /*    80     8 */
	spinlock_t                 i_lock;               /*    88    16 */
	short unsigned int         i_bytes;              /*   104     2 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               i_blkbits;            /*   108     4 */
	blkcnt_t                   i_blocks;             /*   112     8 */
	seqcount_t                 i_size_seqcount;      /*   120     4 */
	long unsigned int          i_state;              /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct mutex               i_mutex;              /*   128    40 */
	long unsigned int          dirtied_when;         /*   168     4 */
	struct hlist_node          i_hash;               /*   172     8 */
	struct list_head           i_wb_list;            /*   180     8 */
	struct list_head           i_lru;                /*   188     8 */
	/* --- cacheline 3 boundary (192 bytes) was 4 bytes ago --- */
	struct list_head           i_sb_list;            /*   196     8 */
	union {
		struct hlist_head  i_dentry;             /*           4 */
		struct callback_head i_rcu;              /*           8 */
	};                                               /*   204     8 */

	/* XXX 4 bytes hole, try to pack */

	u64                        i_version;            /*   216     8 */
	atomic_t                   i_count;              /*   224     4 */
	atomic_t                   i_dio_count;          /*   228     4 */
	atomic_t                   i_writecount;         /*   232     4 */
	const struct file_operations  * i_fop;           /*   236     4 */
	struct file_lock *         i_flock;              /*   240     4 */
	struct address_space       i_data;               /*   244   136 */
	/* --- cacheline 5 boundary (320 bytes) was 60 bytes ago --- */
	struct list_head           i_devices;            /*   380     8 */
	/* --- cacheline 6 boundary (384 bytes) was 4 bytes ago --- */
	union {
		struct pipe_inode_info * i_pipe;         /*           4 */
		struct block_device * i_bdev;            /*           4 */
		struct cdev *      i_cdev;               /*           4 */
	};                                               /*   388     4 */
	__u32                      i_generation;         /*   392     4 */
	__u32                      i_fsnotify_mask;      /*   396     4 */
	struct hlist_head          i_fsnotify_marks;     /*   400     4 */
	void *                     i_private;            /*   404     4 */

	/* size: 408, cachelines: 7, members: 44 */
	/* sum members: 398, holes: 3, sum holes: 10 */
	/* last cacheline: 24 bytes */
};
struct dentry_operations {
	int                        (*d_revalidate)(struct dentry *, unsigned int); /*     0     4 */
	int                        (*d_weak_revalidate)(struct dentry *, unsigned int); /*     4     4 */
	int                        (*d_hash)(const struct dentry  *, const struct inode  *, struct qstr *); /*     8     4 */
	int                        (*d_compare)(const struct dentry  *, const struct inode  *, const struct dentry  *, const struct inode  *, unsigned int, const char  *, const struct qstr  *); /*    12     4 */
	int                        (*d_delete)(const struct dentry  *); /*    16     4 */
	void                       (*d_release)(struct dentry *); /*    20     4 */
	void                       (*d_prune)(struct dentry *); /*    24     4 */
	void                       (*d_iput)(struct dentry *, struct inode *); /*    28     4 */
	char *                     (*d_dname)(struct dentry *, char *, int); /*    32     4 */
	struct vfsmount *          (*d_automount)(struct path *); /*    36     4 */
	int                        (*d_manage)(struct dentry *, bool); /*    40     4 */

	/* size: 64, cachelines: 1, members: 11 */
	/* padding: 20 */
};
struct super_block {
	struct list_head           s_list;               /*     0     8 */
	dev_t                      s_dev;                /*     8     4 */
	unsigned char              s_blocksize_bits;     /*    12     1 */

	/* XXX 3 bytes hole, try to pack */

	long unsigned int          s_blocksize;          /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	loff_t                     s_maxbytes;           /*    24     8 */
	struct file_system_type *  s_type;               /*    32     4 */
	const struct super_operations  * s_op;           /*    36     4 */
	const struct dquot_operations  * dq_op;          /*    40     4 */
	const struct quotactl_ops  * s_qcop;             /*    44     4 */
	const struct export_operations  * s_export_op;   /*    48     4 */
	long unsigned int          s_flags;              /*    52     4 */
	long unsigned int          s_magic;              /*    56     4 */
	struct dentry *            s_root;               /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct rw_semaphore        s_umount;             /*    64    28 */
	int                        s_count;              /*    92     4 */
	atomic_t                   s_active;             /*    96     4 */
	void *                     s_security;           /*   100     4 */
	const struct xattr_handler  * * s_xattr;         /*   104     4 */
	struct list_head           s_inodes;             /*   108     8 */
	struct hlist_bl_head       s_anon;               /*   116     4 */
	struct list_head *         s_files;              /*   120     4 */
	struct list_head           s_mounts;             /*   124     8 */
	/* --- cacheline 2 boundary (128 bytes) was 4 bytes ago --- */
	struct list_head           s_dentry_lru;         /*   132     8 */
	int                        s_nr_dentry_unused;   /*   140     4 */

	/* XXX 48 bytes hole, try to pack */

	/* --- cacheline 3 boundary (192 bytes) --- */
	spinlock_t                 s_inode_lru_lock;     /*   192    16 */
	struct list_head           s_inode_lru;          /*   208     8 */
	int                        s_nr_inodes_unused;   /*   216     4 */
	struct block_device *      s_bdev;               /*   220     4 */
	struct backing_dev_info *  s_bdi;                /*   224     4 */
	struct mtd_info *          s_mtd;                /*   228     4 */
	struct hlist_node          s_instances;          /*   232     8 */
	struct quota_info          s_dquot;              /*   240   240 */
	/* --- cacheline 7 boundary (448 bytes) was 32 bytes ago --- */
	struct sb_writers          s_writers;            /*   480   176 */
	/* --- cacheline 10 boundary (640 bytes) was 16 bytes ago --- */
	char                       s_id[32];             /*   656    32 */
	u8                         s_uuid[16];           /*   688    16 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	void *                     s_fs_info;            /*   704     4 */
	unsigned int               s_max_links;          /*   708     4 */
	fmode_t                    s_mode;               /*   712     4 */
	u32                        s_time_gran;          /*   716     4 */
	struct mutex               s_vfs_rename_mutex;   /*   720    40 */
	char *                     s_subtype;            /*   760     4 */
	char *                     s_options;            /*   764     4 */
	/* --- cacheline 12 boundary (768 bytes) --- */
	const struct dentry_operations  * s_d_op;        /*   768     4 */
	int                        cleancache_poolid;    /*   772     4 */
	struct shrinker            s_shrink;             /*   776    24 */
	atomic_long_t              s_remove_count;       /*   800     4 */
	int                        s_readonly_remount;   /*   804     4 */

	/* size: 832, cachelines: 13, members: 47 */
	/* sum members: 753, holes: 3, sum holes: 55 */
	/* padding: 24 */
};
struct radix_tree_root {
	unsigned int               height;               /*     0     4 */
	gfp_t                      gfp_mask;             /*     4     4 */
	struct radix_tree_node *   rnode;                /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct radix_tree_node {
	unsigned int               height;               /*     0     4 */
	unsigned int               count;                /*     4     4 */
	struct callback_head       callback_head;        /*     8     8 */
	void *                     slots[64];            /*    16   256 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	long unsigned int          tags[3][2];           /*   272    24 */

	/* size: 296, cachelines: 5, members: 5 */
	/* last cacheline: 40 bytes */
};
struct upid {
	int                        nr;                   /*     0     4 */
	struct pid_namespace *     ns;                   /*     4     4 */
	struct hlist_node          pid_chain;            /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct pid_namespace {
	struct kref                kref;                 /*     0     4 */
	struct pidmap              pidmap[1];            /*     4     8 */
	int                        last_pid;             /*    12     4 */
	unsigned int               nr_hashed;            /*    16     4 */
	struct task_struct *       child_reaper;         /*    20     4 */
	struct kmem_cache *        pid_cachep;           /*    24     4 */
	unsigned int               level;                /*    28     4 */
	struct pid_namespace *     parent;               /*    32     4 */
	struct vfsmount *          proc_mnt;             /*    36     4 */
	struct dentry *            proc_self;            /*    40     4 */
	struct user_namespace *    user_ns;              /*    44     4 */
	struct work_struct         proc_work;            /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	kgid_t                     pid_gid;              /*    64     4 */
	int                        hide_pid;             /*    68     4 */
	int                        reboot;               /*    72     4 */
	unsigned int               proc_inum;            /*    76     4 */

	/* size: 80, cachelines: 2, members: 16 */
	/* last cacheline: 16 bytes */
};
struct pid {
	atomic_t                   count;                /*     0     4 */
	unsigned int               level;                /*     4     4 */
	struct hlist_head          tasks[3];             /*     8    12 */
	struct callback_head       rcu;                  /*    20     8 */
	struct upid                numbers[1];           /*    28    16 */

	/* size: 44, cachelines: 1, members: 5 */
	/* last cacheline: 44 bytes */
};
struct pid_link {
	struct hlist_node          node;                 /*     0     8 */
	struct pid *               pid;                  /*     8     4 */

	/* size: 12, cachelines: 1, members: 2 */
	/* last cacheline: 12 bytes */
};
struct kernel_cap_struct {
	__u32                      cap[2];               /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct fiemap_extent {
	__u64                      fe_logical;           /*     0     8 */
	__u64                      fe_physical;          /*     8     8 */
	__u64                      fe_length;            /*    16     8 */
	__u64                      fe_reserved64[2];     /*    24    16 */
	__u32                      fe_flags;             /*    40     4 */
	__u32                      fe_reserved[3];       /*    44    12 */

	/* size: 56, cachelines: 1, members: 6 */
	/* last cacheline: 56 bytes */
};
struct shrink_control {
	gfp_t                      gfp_mask;             /*     0     4 */
	long unsigned int          nr_to_scan;           /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct shrinker {
	int                        (*shrink)(struct shrinker *, struct shrink_control *); /*     0     4 */
	int                        seeks;                /*     4     4 */
	long int                   batch;                /*     8     4 */
	struct list_head           list;                 /*    12     8 */
	atomic_long_t              nr_in_batch;          /*    20     4 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct bio {
	sector_t                   bi_sector;            /*     0     8 */
	struct bio *               bi_next;              /*     8     4 */
	struct block_device *      bi_bdev;              /*    12     4 */
	long unsigned int          bi_flags;             /*    16     4 */
	long unsigned int          bi_rw;                /*    20     4 */
	short unsigned int         bi_vcnt;              /*    24     2 */
	short unsigned int         bi_idx;               /*    26     2 */
	unsigned int               bi_phys_segments;     /*    28     4 */
	unsigned int               bi_size;              /*    32     4 */
	unsigned int               bi_seg_front_size;    /*    36     4 */
	unsigned int               bi_seg_back_size;     /*    40     4 */
	bio_end_io_t *             bi_end_io;            /*    44     4 */
	void *                     bi_private;           /*    48     4 */
	struct inode *             bi_dio_inode;         /*    52     4 */
	unsigned int               bi_max_vecs;          /*    56     4 */
	atomic_t                   bi_cnt;               /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct bio_vec *           bi_io_vec;            /*    64     4 */
	struct bio_set *           bi_pool;              /*    68     4 */
	struct bio_vec             bi_inline_vecs[0];    /*    72     0 */

	/* size: 72, cachelines: 2, members: 19 */
	/* last cacheline: 8 bytes */
};
struct bio_vec {
	struct page *              bv_page;              /*     0     4 */
	unsigned int               bv_len;               /*     4     4 */
	unsigned int               bv_offset;            /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct block_device {
	dev_t                      bd_dev;               /*     0     4 */
	int                        bd_openers;           /*     4     4 */
	struct inode *             bd_inode;             /*     8     4 */
	struct super_block *       bd_super;             /*    12     4 */
	struct mutex               bd_mutex;             /*    16    40 */
	struct list_head           bd_inodes;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     bd_claiming;          /*    64     4 */
	void *                     bd_holder;            /*    68     4 */
	int                        bd_holders;           /*    72     4 */
	bool                       bd_write_holder;      /*    76     1 */

	/* XXX 3 bytes hole, try to pack */

	struct list_head           bd_holder_disks;      /*    80     8 */
	struct block_device *      bd_contains;          /*    88     4 */
	unsigned int               bd_block_size;        /*    92     4 */
	struct hd_struct *         bd_part;              /*    96     4 */
	unsigned int               bd_part_count;        /*   100     4 */
	int                        bd_invalidated;       /*   104     4 */
	struct gendisk *           bd_disk;              /*   108     4 */
	struct request_queue *     bd_queue;             /*   112     4 */
	struct list_head           bd_list;              /*   116     8 */
	long unsigned int          bd_private;           /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        bd_fsfreeze_count;    /*   128     4 */
	struct mutex               bd_fsfreeze_mutex;    /*   132    40 */

	/* size: 172, cachelines: 3, members: 22 */
	/* sum members: 169, holes: 1, sum holes: 3 */
	/* last cacheline: 44 bytes */
};
struct bio_set {
	struct kmem_cache *        bio_slab;             /*     0     4 */
	unsigned int               front_pad;            /*     4     4 */
	mempool_t *                bio_pool;             /*     8     4 */
	mempool_t *                bvec_pool;            /*    12     4 */
	spinlock_t                 rescue_lock;          /*    16    16 */
	struct bio_list            rescue_list;          /*    32     8 */
	struct work_struct         rescue_work;          /*    40    16 */
	struct workqueue_struct *  rescue_workqueue;     /*    56     4 */

	/* size: 60, cachelines: 1, members: 8 */
	/* last cacheline: 60 bytes */
};
struct kiocb {
	atomic_t                   ki_users;             /*     0     4 */
	struct file *              ki_filp;              /*     4     4 */
	struct kioctx *            ki_ctx;               /*     8     4 */
	kiocb_cancel_fn *          ki_cancel;            /*    12     4 */
	void                       (*ki_dtor)(struct kiocb *); /*    16     4 */
	union {
		void *             user;                 /*           4 */
		struct task_struct * tsk;                /*           4 */
	} ki_obj;                                        /*    20     4 */
	__u64                      ki_user_data;         /*    24     8 */
	loff_t                     ki_pos;               /*    32     8 */
	void *                     private;              /*    40     4 */
	short unsigned int         ki_opcode;            /*    44     2 */

	/* XXX 2 bytes hole, try to pack */

	size_t                     ki_nbytes;            /*    48     4 */
	char *                     ki_buf;               /*    52     4 */
	size_t                     ki_left;              /*    56     4 */
	struct iovec               ki_inline_vec;        /*    60     8 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	struct iovec *             ki_iovec;             /*    68     4 */
	long unsigned int          ki_nr_segs;           /*    72     4 */
	long unsigned int          ki_cur_seg;           /*    76     4 */
	struct list_head           ki_list;              /*    80     8 */
	struct eventfd_ctx *       ki_eventfd;           /*    88     4 */

	/* size: 96, cachelines: 2, members: 19 */
	/* sum members: 90, holes: 1, sum holes: 2 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct iattr {
	unsigned int               ia_valid;             /*     0     4 */
	umode_t                    ia_mode;              /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	kuid_t                     ia_uid;               /*     8     4 */
	kgid_t                     ia_gid;               /*    12     4 */
	loff_t                     ia_size;              /*    16     8 */
	struct timespec            ia_atime;             /*    24     8 */
	struct timespec            ia_mtime;             /*    32     8 */
	struct timespec            ia_ctime;             /*    40     8 */
	struct file *              ia_file;              /*    48     4 */

	/* size: 56, cachelines: 1, members: 9 */
	/* sum members: 50, holes: 1, sum holes: 2 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct percpu_counter {
	raw_spinlock_t             lock;                 /*     0    16 */
	s64                        count;                /*    16     8 */
	struct list_head           list;                 /*    24     8 */
	s32 *                      counters;             /*    32     4 */

	/* size: 40, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct fs_disk_quota {
	__s8                       d_version;            /*     0     1 */
	__s8                       d_flags;              /*     1     1 */
	__u16                      d_fieldmask;          /*     2     2 */
	__u32                      d_id;                 /*     4     4 */
	__u64                      d_blk_hardlimit;      /*     8     8 */
	__u64                      d_blk_softlimit;      /*    16     8 */
	__u64                      d_ino_hardlimit;      /*    24     8 */
	__u64                      d_ino_softlimit;      /*    32     8 */
	__u64                      d_bcount;             /*    40     8 */
	__u64                      d_icount;             /*    48     8 */
	__s32                      d_itimer;             /*    56     4 */
	__s32                      d_btimer;             /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	__u16                      d_iwarns;             /*    64     2 */
	__u16                      d_bwarns;             /*    66     2 */
	__s32                      d_padding2;           /*    68     4 */
	__u64                      d_rtb_hardlimit;      /*    72     8 */
	__u64                      d_rtb_softlimit;      /*    80     8 */
	__u64                      d_rtbcount;           /*    88     8 */
	__s32                      d_rtbtimer;           /*    96     4 */
	__u16                      d_rtbwarns;           /*   100     2 */
	__s16                      d_padding3;           /*   102     2 */
	char                       d_padding4[8];        /*   104     8 */

	/* size: 112, cachelines: 2, members: 22 */
	/* last cacheline: 48 bytes */
};
struct fs_qfilestat {
	__u64                      qfs_ino;              /*     0     8 */
	__u64                      qfs_nblks;            /*     8     8 */
	__u32                      qfs_nextents;         /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct fs_quota_stat {
	__s8                       qs_version;           /*     0     1 */

	/* XXX 1 byte hole, try to pack */

	__u16                      qs_flags;             /*     2     2 */
	__s8                       qs_pad;               /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	fs_qfilestat_t             qs_uquota;            /*     8    24 */
	fs_qfilestat_t             qs_gquota;            /*    32    24 */
	__u32                      qs_incoredqs;         /*    56     4 */
	__s32                      qs_btimelimit;        /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	__s32                      qs_itimelimit;        /*    64     4 */
	__s32                      qs_rtbtimelimit;      /*    68     4 */
	__u16                      qs_bwarnlimit;        /*    72     2 */
	__u16                      qs_iwarnlimit;        /*    74     2 */

	/* size: 80, cachelines: 2, members: 11 */
	/* sum members: 72, holes: 2, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct dquot {
	struct hlist_node          dq_hash;              /*     0     8 */
	struct list_head           dq_inuse;             /*     8     8 */
	struct list_head           dq_free;              /*    16     8 */
	struct list_head           dq_dirty;             /*    24     8 */
	struct mutex               dq_lock;              /*    32    40 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	atomic_t                   dq_count;             /*    72     4 */
	wait_queue_head_t          dq_wait_unused;       /*    76    24 */
	struct super_block *       dq_sb;                /*   100     4 */
	struct kqid                dq_id;                /*   104     8 */
	loff_t                     dq_off;               /*   112     8 */
	long unsigned int          dq_flags;             /*   120     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 2 boundary (128 bytes) --- */
	struct mem_dqblk           dq_dqb;               /*   128    64 */
	/* --- cacheline 3 boundary (192 bytes) --- */

	/* size: 192, cachelines: 3, members: 12 */
	/* sum members: 188, holes: 1, sum holes: 4 */
};
struct if_dqinfo {
	__u64                      dqi_bgrace;           /*     0     8 */
	__u64                      dqi_igrace;           /*     8     8 */
	__u32                      dqi_flags;            /*    16     4 */
	__u32                      dqi_valid;            /*    20     4 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct kqid {
	union {
		kuid_t             uid;                  /*           4 */
		kgid_t             gid;                  /*           4 */
		kprojid_t          projid;               /*           4 */
	};                                               /*     0     4 */
	enum quota_type            type;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct mem_dqblk {
	qsize_t                    dqb_bhardlimit;       /*     0     8 */
	qsize_t                    dqb_bsoftlimit;       /*     8     8 */
	qsize_t                    dqb_curspace;         /*    16     8 */
	qsize_t                    dqb_rsvspace;         /*    24     8 */
	qsize_t                    dqb_ihardlimit;       /*    32     8 */
	qsize_t                    dqb_isoftlimit;       /*    40     8 */
	qsize_t                    dqb_curinodes;        /*    48     8 */
	time_t                     dqb_btime;            /*    56     4 */
	time_t                     dqb_itime;            /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 9 */
};
struct mem_dqinfo {
	struct quota_format_type * dqi_format;           /*     0     4 */
	int                        dqi_fmt_id;           /*     4     4 */
	struct list_head           dqi_dirty_list;       /*     8     8 */
	long unsigned int          dqi_flags;            /*    16     4 */
	unsigned int               dqi_bgrace;           /*    20     4 */
	unsigned int               dqi_igrace;           /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	qsize_t                    dqi_maxblimit;        /*    32     8 */
	qsize_t                    dqi_maxilimit;        /*    40     8 */
	void *                     dqi_priv;             /*    48     4 */

	/* size: 56, cachelines: 1, members: 9 */
	/* sum members: 48, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct quota_format_type {
	int                        qf_fmt_id;            /*     0     4 */
	const struct quota_format_ops  * qf_ops;         /*     4     4 */
	struct module *            qf_owner;             /*     8     4 */
	struct quota_format_type * qf_next;              /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct dqstats {
	int                        stat[8];              /*     0    32 */
	struct percpu_counter      counter[8];           /*    32   320 */
	/* --- cacheline 5 boundary (320 bytes) was 32 bytes ago --- */

	/* size: 352, cachelines: 6, members: 2 */
	/* last cacheline: 32 bytes */
};
struct quota_format_ops {
	int                        (*check_quota_file)(struct super_block *, int); /*     0     4 */
	int                        (*read_file_info)(struct super_block *, int); /*     4     4 */
	int                        (*write_file_info)(struct super_block *, int); /*     8     4 */
	int                        (*free_file_info)(struct super_block *, int); /*    12     4 */
	int                        (*read_dqblk)(struct dquot *); /*    16     4 */
	int                        (*commit_dqblk)(struct dquot *); /*    20     4 */
	int                        (*release_dqblk)(struct dquot *); /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* last cacheline: 28 bytes */
};
struct dquot_operations {
	int                        (*write_dquot)(struct dquot *); /*     0     4 */
	struct dquot *             (*alloc_dquot)(struct super_block *, int); /*     4     4 */
	void                       (*destroy_dquot)(struct dquot *); /*     8     4 */
	int                        (*acquire_dquot)(struct dquot *); /*    12     4 */
	int                        (*release_dquot)(struct dquot *); /*    16     4 */
	int                        (*mark_dirty)(struct dquot *); /*    20     4 */
	int                        (*write_info)(struct super_block *, int); /*    24     4 */
	qsize_t *                  (*get_reserved_space)(struct inode *); /*    28     4 */

	/* size: 32, cachelines: 1, members: 8 */
	/* last cacheline: 32 bytes */
};
struct quotactl_ops {
	int                        (*quota_on)(struct super_block *, int, int, struct path *); /*     0     4 */
	int                        (*quota_on_meta)(struct super_block *, int, int); /*     4     4 */
	int                        (*quota_off)(struct super_block *, int); /*     8     4 */
	int                        (*quota_sync)(struct super_block *, int); /*    12     4 */
	int                        (*get_info)(struct super_block *, int, struct if_dqinfo *); /*    16     4 */
	int                        (*set_info)(struct super_block *, int, struct if_dqinfo *); /*    20     4 */
	int                        (*get_dqblk)(struct super_block *, struct kqid, struct fs_disk_quota *); /*    24     4 */
	int                        (*set_dqblk)(struct super_block *, struct kqid, struct fs_disk_quota *); /*    28     4 */
	int                        (*get_xstate)(struct super_block *, struct fs_quota_stat *); /*    32     4 */
	int                        (*set_xstate)(struct super_block *, unsigned int, int); /*    36     4 */

	/* size: 40, cachelines: 1, members: 10 */
	/* last cacheline: 40 bytes */
};
struct quota_info {
	unsigned int               flags;                /*     0     4 */
	struct mutex               dqio_mutex;           /*     4    40 */
	struct mutex               dqonoff_mutex;        /*    44    40 */
	/* --- cacheline 1 boundary (64 bytes) was 20 bytes ago --- */
	struct rw_semaphore        dqptr_sem;            /*    84    28 */
	struct inode *             files[2];             /*   112     8 */
	struct mem_dqinfo          info[2];              /*   120   112 */
	/* --- cacheline 3 boundary (192 bytes) was 40 bytes ago --- */
	const struct quota_format_ops  * ops[2];         /*   232     8 */

	/* size: 240, cachelines: 4, members: 7 */
	/* last cacheline: 48 bytes */
};
struct iovec {
	void *                     iov_base;             /*     0     4 */
	__kernel_size_t            iov_len;              /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct address_space_operations {
	int                        (*writepage)(struct page *, struct writeback_control *); /*     0     4 */
	int                        (*readpage)(struct file *, struct page *); /*     4     4 */
	int                        (*writepages)(struct address_space *, struct writeback_control *); /*     8     4 */
	int                        (*set_page_dirty)(struct page *); /*    12     4 */
	int                        (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int); /*    16     4 */
	int                        (*write_begin)(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page * *, void * *); /*    20     4 */
	int                        (*write_end)(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *); /*    24     4 */
	sector_t                   (*bmap)(struct address_space *, sector_t); /*    28     4 */
	void                       (*invalidatepage)(struct page *, long unsigned int); /*    32     4 */
	int                        (*releasepage)(struct page *, gfp_t); /*    36     4 */
	void                       (*freepage)(struct page *); /*    40     4 */
	ssize_t                    (*direct_IO)(int, struct kiocb *, const struct iovec  *, loff_t, long unsigned int); /*    44     4 */
	int                        (*get_xip_mem)(struct address_space *, long unsigned int, int, void * *, long unsigned int *); /*    48     4 */
	int                        (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode); /*    52     4 */
	int                        (*isolatepage)(struct page *); /*    56     4 */
	void                       (*putbackpage)(struct page *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*launder_page)(struct page *); /*    64     4 */
	int                        (*is_partially_uptodate)(struct page *, read_descriptor_t *, long unsigned int); /*    68     4 */
	void                       (*is_dirty_writeback)(struct page *, bool *, bool *); /*    72     4 */
	int                        (*error_remove_page)(struct address_space *, struct page *); /*    76     4 */
	int                        (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *); /*    80     4 */
	void                       (*swap_deactivate)(struct file *); /*    84     4 */

	/* size: 88, cachelines: 2, members: 22 */
	/* last cacheline: 24 bytes */
};
struct address_space {
	struct inode *             host;                 /*     0     4 */
	struct radix_tree_root     page_tree;            /*     4    12 */
	spinlock_t                 tree_lock;            /*    16    16 */
	unsigned int               i_mmap_writable;      /*    32     4 */
	struct rb_root             i_mmap;               /*    36     4 */
	struct list_head           i_mmap_nonlinear;     /*    40     8 */
	struct mutex               i_mmap_mutex;         /*    48    40 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	long unsigned int          nrpages;              /*    88     4 */
	long unsigned int          writeback_index;      /*    92     4 */
	const struct address_space_operations  * a_ops;  /*    96     4 */
	long unsigned int          flags;                /*   100     4 */
	struct backing_dev_info *  backing_dev_info;     /*   104     4 */
	spinlock_t                 private_lock;         /*   108    16 */
	struct list_head           private_list;         /*   124     8 */
	/* --- cacheline 2 boundary (128 bytes) was 4 bytes ago --- */
	void *                     private_data;         /*   132     4 */

	/* size: 136, cachelines: 3, members: 15 */
	/* last cacheline: 8 bytes */
};
struct cdev {
	struct kobject             kobj;                 /*     0    36 */
	struct module *            owner;                /*    36     4 */
	const struct file_operations  * ops;             /*    40     4 */
	struct list_head           list;                 /*    44     8 */
	dev_t                      dev;                  /*    52     4 */
	unsigned int               count;                /*    56     4 */

	/* size: 60, cachelines: 1, members: 6 */
	/* last cacheline: 60 bytes */
};
struct inode_operations {
	struct dentry *            (*lookup)(struct inode *, struct dentry *, unsigned int); /*     0     4 */
	void *                     (*follow_link)(struct dentry *, struct nameidata *); /*     4     4 */
	int                        (*permission)(struct inode *, int); /*     8     4 */
	struct posix_acl *         (*get_acl)(struct inode *, int); /*    12     4 */
	int                        (*readlink)(struct dentry *, char *, int); /*    16     4 */
	void                       (*put_link)(struct dentry *, struct nameidata *, void *); /*    20     4 */
	int                        (*create)(struct inode *, struct dentry *, umode_t, bool); /*    24     4 */
	int                        (*link)(struct dentry *, struct inode *, struct dentry *); /*    28     4 */
	int                        (*unlink)(struct inode *, struct dentry *); /*    32     4 */
	int                        (*symlink)(struct inode *, struct dentry *, const char  *); /*    36     4 */
	int                        (*mkdir)(struct inode *, struct dentry *, umode_t); /*    40     4 */
	int                        (*rmdir)(struct inode *, struct dentry *); /*    44     4 */
	int                        (*mknod)(struct inode *, struct dentry *, umode_t, dev_t); /*    48     4 */
	int                        (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *); /*    52     4 */
	int                        (*setattr)(struct dentry *, struct iattr *); /*    56     4 */
	int                        (*getattr)(struct vfsmount *, struct dentry *, struct kstat *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*setxattr)(struct dentry *, const char  *, const void  *, size_t, int); /*    64     4 */
	ssize_t                    (*getxattr)(struct dentry *, const char  *, void *, size_t); /*    68     4 */
	ssize_t                    (*listxattr)(struct dentry *, char *, size_t); /*    72     4 */
	int                        (*removexattr)(struct dentry *, const char  *); /*    76     4 */
	int                        (*fiemap)(struct inode *, struct fiemap_extent_info *, u64, u64); /*    80     4 */
	int                        (*update_time)(struct inode *, struct timespec *, int); /*    84     4 */
	int                        (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int, umode_t, int *); /*    88     4 */

	/* size: 128, cachelines: 2, members: 23 */
	/* padding: 36 */
};
struct file_operations {
	struct module *            owner;                /*     0     4 */
	loff_t                     (*llseek)(struct file *, loff_t, int); /*     4     4 */
	ssize_t                    (*read)(struct file *, char *, size_t, loff_t *); /*     8     4 */
	ssize_t                    (*write)(struct file *, const char  *, size_t, loff_t *); /*    12     4 */
	ssize_t                    (*aio_read)(struct kiocb *, const struct iovec  *, long unsigned int, loff_t); /*    16     4 */
	ssize_t                    (*aio_write)(struct kiocb *, const struct iovec  *, long unsigned int, loff_t); /*    20     4 */
	int                        (*readdir)(struct file *, void *, filldir_t); /*    24     4 */
	unsigned int               (*poll)(struct file *, struct poll_table_struct *); /*    28     4 */
	long int                   (*unlocked_ioctl)(struct file *, unsigned int, long unsigned int); /*    32     4 */
	long int                   (*compat_ioctl)(struct file *, unsigned int, long unsigned int); /*    36     4 */
	int                        (*mmap)(struct file *, struct vm_area_struct *); /*    40     4 */
	int                        (*open)(struct inode *, struct file *); /*    44     4 */
	int                        (*flush)(struct file *, fl_owner_t); /*    48     4 */
	int                        (*release)(struct inode *, struct file *); /*    52     4 */
	int                        (*fsync)(struct file *, loff_t, loff_t, int); /*    56     4 */
	int                        (*aio_fsync)(struct kiocb *, int); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*fasync)(int, struct file *, int); /*    64     4 */
	int                        (*lock)(struct file *, int, struct file_lock *); /*    68     4 */
	ssize_t                    (*sendpage)(struct file *, struct page *, int, size_t, loff_t *, int); /*    72     4 */
	long unsigned int          (*get_unmapped_area)(struct file *, long unsigned int, long unsigned int, long unsigned int, long unsigned int); /*    76     4 */
	int                        (*check_flags)(int);  /*    80     4 */
	int                        (*flock)(struct file *, int, struct file_lock *); /*    84     4 */
	ssize_t                    (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int); /*    88     4 */
	ssize_t                    (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int); /*    92     4 */
	int                        (*setlease)(struct file *, long int, struct file_lock * *); /*    96     4 */
	long int                   (*fallocate)(struct file *, int, loff_t, loff_t); /*   100     4 */
	int                        (*show_fdinfo)(struct seq_file *, struct file *); /*   104     4 */

	/* size: 108, cachelines: 2, members: 27 */
	/* last cacheline: 44 bytes */
};
struct file_lock {
	struct file_lock *         fl_next;              /*     0     4 */
	struct list_head           fl_link;              /*     4     8 */
	struct list_head           fl_block;             /*    12     8 */
	fl_owner_t                 fl_owner;             /*    20     4 */
	unsigned int               fl_flags;             /*    24     4 */
	unsigned char              fl_type;              /*    28     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               fl_pid;               /*    32     4 */
	struct pid *               fl_nspid;             /*    36     4 */
	wait_queue_head_t          fl_wait;              /*    40    24 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct file *              fl_file;              /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	loff_t                     fl_start;             /*    72     8 */
	loff_t                     fl_end;               /*    80     8 */
	struct fasync_struct *     fl_fasync;            /*    88     4 */
	long unsigned int          fl_break_time;        /*    92     4 */
	long unsigned int          fl_downgrade_time;    /*    96     4 */
	const struct file_lock_operations  * fl_ops;     /*   100     4 */
	const struct lock_manager_operations  * fl_lmops; /*   104     4 */
	union {
		struct nfs_lock_info nfs_fl;             /*          16 */
		struct nfs4_lock_info nfs4_fl;           /*           4 */
		struct {
			struct list_head link;           /*   108     8 */
			int        state;                /*   116     4 */
		} afs;                                   /*          12 */
	} fl_u;                                          /*   108    16 */

	/* size: 128, cachelines: 2, members: 18 */
	/* sum members: 117, holes: 2, sum holes: 7 */
	/* padding: 4 */
};
struct fown_struct {
	rwlock_t                   lock;                 /*     0    16 */
	struct pid *               pid;                  /*    16     4 */
	enum pid_type              pid_type;             /*    20     4 */
	kuid_t                     uid;                  /*    24     4 */
	kuid_t                     euid;                 /*    28     4 */
	int                        signum;               /*    32     4 */

	/* size: 36, cachelines: 1, members: 6 */
	/* last cacheline: 36 bytes */
};
struct file_ra_state {
	long unsigned int          start;                /*     0     4 */
	unsigned int               size;                 /*     4     4 */
	unsigned int               async_size;           /*     8     4 */
	unsigned int               ra_pages;             /*    12     4 */
	unsigned int               mmap_miss;            /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	loff_t                     prev_pos;             /*    24     8 */

	/* size: 32, cachelines: 1, members: 6 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct files_struct {
	atomic_t                   count;                /*     0     4 */
	struct fdtable *           fdt;                  /*     4     4 */
	struct fdtable             fdtab;                /*     8    24 */

	/* XXX 32 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	spinlock_t                 file_lock;            /*    64    16 */
	int                        next_fd;              /*    80     4 */
	long unsigned int          close_on_exec_init[1]; /*    84     4 */
	long unsigned int          open_fds_init[1];     /*    88     4 */
	struct file *              fd_array[32];         /*    92   128 */
	/* --- cacheline 3 boundary (192 bytes) was 28 bytes ago --- */

	/* size: 256, cachelines: 4, members: 8 */
	/* sum members: 188, holes: 1, sum holes: 32 */
	/* padding: 36 */
};
struct file_lock_operations {
	void                       (*fl_copy_lock)(struct file_lock *, struct file_lock *); /*     0     4 */
	void                       (*fl_release_private)(struct file_lock *); /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct lock_manager_operations {
	int                        (*lm_compare_owner)(struct file_lock *, struct file_lock *); /*     0     4 */
	void                       (*lm_notify)(struct file_lock *); /*     4     4 */
	int                        (*lm_grant)(struct file_lock *, struct file_lock *, int); /*     8     4 */
	void                       (*lm_break)(struct file_lock *); /*    12     4 */
	int                        (*lm_change)(struct file_lock * *, int); /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct nfs_lock_info {
	u32                        state;                /*     0     4 */
	struct nlm_lockowner *     owner;                /*     4     4 */
	struct list_head           list;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct nfs4_lock_info {
	struct nfs4_lock_state *   owner;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct fasync_struct {
	spinlock_t                 fa_lock;              /*     0    16 */
	int                        magic;                /*    16     4 */
	int                        fa_fd;                /*    20     4 */
	struct fasync_struct *     fa_next;              /*    24     4 */
	struct file *              fa_file;              /*    28     4 */
	struct callback_head       fa_rcu;               /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* last cacheline: 40 bytes */
};
struct sb_writers {
	struct percpu_counter      counter[3];           /*     0   120 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */
	wait_queue_head_t          wait;                 /*   120    24 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	int                        frozen;               /*   144     4 */
	wait_queue_head_t          wait_unfrozen;        /*   148    24 */

	/* size: 176, cachelines: 3, members: 4 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct file_system_type {
	const char  *              name;                 /*     0     4 */
	int                        fs_flags;             /*     4     4 */
	struct dentry *            (*mount)(struct file_system_type *, int, const char  *, void *); /*     8     4 */
	void                       (*kill_sb)(struct super_block *); /*    12     4 */
	struct module *            owner;                /*    16     4 */
	struct file_system_type *  next;                 /*    20     4 */
	struct hlist_head          fs_supers;            /*    24     4 */
	struct lock_class_key      s_lock_key;           /*    28     0 */
	struct lock_class_key      s_umount_key;         /*    28     0 */
	struct lock_class_key      s_vfs_rename_key;     /*    28     0 */
	struct lock_class_key      s_writers_key[3];     /*    28     0 */
	struct lock_class_key      i_lock_key;           /*    28     0 */
	struct lock_class_key      i_mutex_key;          /*    28     0 */
	struct lock_class_key      i_mutex_dir_key;      /*    28     0 */

	/* size: 28, cachelines: 1, members: 14 */
	/* last cacheline: 28 bytes */
};
struct super_operations {
	struct inode *             (*alloc_inode)(struct super_block *); /*     0     4 */
	void                       (*destroy_inode)(struct inode *); /*     4     4 */
	void                       (*dirty_inode)(struct inode *, int); /*     8     4 */
	int                        (*write_inode)(struct inode *, struct writeback_control *); /*    12     4 */
	int                        (*drop_inode)(struct inode *); /*    16     4 */
	void                       (*evict_inode)(struct inode *); /*    20     4 */
	void                       (*put_super)(struct super_block *); /*    24     4 */
	int                        (*sync_fs)(struct super_block *, int); /*    28     4 */
	int                        (*freeze_fs)(struct super_block *); /*    32     4 */
	int                        (*unfreeze_fs)(struct super_block *); /*    36     4 */
	int                        (*statfs)(struct dentry *, struct kstatfs *); /*    40     4 */
	int                        (*remount_fs)(struct super_block *, int *, char *); /*    44     4 */
	void                       (*umount_begin)(struct super_block *); /*    48     4 */
	int                        (*show_options)(struct seq_file *, struct dentry *); /*    52     4 */
	int                        (*show_devname)(struct seq_file *, struct dentry *); /*    56     4 */
	int                        (*show_path)(struct seq_file *, struct dentry *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*show_stats)(struct seq_file *, struct dentry *); /*    64     4 */
	int                        (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t); /*    68     4 */
	int                        (*nr_cached_objects)(struct super_block *); /*    72     4 */
	void                       (*free_cached_objects)(struct super_block *, int); /*    76     4 */

	/* size: 80, cachelines: 2, members: 20 */
	/* last cacheline: 16 bytes */
};
struct xattr_handler {
	const char  *              prefix;               /*     0     4 */
	int                        flags;                /*     4     4 */
	size_t                     (*list)(struct dentry *, char *, size_t, const char  *, size_t, int); /*     8     4 */
	int                        (*get)(struct dentry *, const char  *, void *, size_t, int); /*    12     4 */
	int                        (*set)(struct dentry *, const char  *, const void  *, size_t, int, int); /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct fiemap_extent_info {
	unsigned int               fi_flags;             /*     0     4 */
	unsigned int               fi_extents_mapped;    /*     4     4 */
	unsigned int               fi_extents_max;       /*     8     4 */
	struct fiemap_extent *     fi_extents_start;     /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct poll_table_struct {
	poll_queue_proc            _qproc;               /*     0     4 */
	long unsigned int          _key;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct seq_file {
	char *                     buf;                  /*     0     4 */
	size_t                     size;                 /*     4     4 */
	size_t                     from;                 /*     8     4 */
	size_t                     count;                /*    12     4 */
	size_t                     pad_until;            /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	loff_t                     index;                /*    24     8 */
	loff_t                     read_pos;             /*    32     8 */
	u64                        version;              /*    40     8 */
	struct mutex               lock;                 /*    48    40 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	const struct seq_operations  * op;               /*    88     4 */
	int                        poll_event;           /*    92     4 */
	void *                     private;              /*    96     4 */

	/* size: 104, cachelines: 2, members: 12 */
	/* sum members: 96, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct stack_trace {
	unsigned int               nr_entries;           /*     0     4 */
	unsigned int               max_entries;          /*     4     4 */
	long unsigned int *        entries;              /*     8     4 */
	int                        skip;                 /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct mm_struct {
	struct vm_area_struct *    mmap;                 /*     0     4 */
	struct rb_root             mm_rb;                /*     4     4 */
	struct vm_area_struct *    mmap_cache;           /*     8     4 */
	long unsigned int          (*get_unmapped_area)(struct file *, long unsigned int, long unsigned int, long unsigned int, long unsigned int); /*    12     4 */
	long unsigned int          mmap_base;            /*    16     4 */
	long unsigned int          mmap_legacy_base;     /*    20     4 */
	long unsigned int          task_size;            /*    24     4 */
	long unsigned int          highest_vm_end;       /*    28     4 */
	pgd_t *                    pgd;                  /*    32     4 */
	atomic_t                   mm_users;             /*    36     4 */
	atomic_t                   mm_count;             /*    40     4 */
	int                        map_count;            /*    44     4 */
	spinlock_t                 page_table_lock;      /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct rw_semaphore        mmap_sem;             /*    64    28 */
	struct list_head           mmlist;               /*    92     8 */
	long unsigned int          hiwater_rss;          /*   100     4 */
	long unsigned int          hiwater_vm;           /*   104     4 */
	long unsigned int          total_vm;             /*   108     4 */
	long unsigned int          locked_vm;            /*   112     4 */
	long unsigned int          pinned_vm;            /*   116     4 */
	long unsigned int          shared_vm;            /*   120     4 */
	long unsigned int          exec_vm;              /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	long unsigned int          stack_vm;             /*   128     4 */
	long unsigned int          def_flags;            /*   132     4 */
	long unsigned int          nr_ptes;              /*   136     4 */
	long unsigned int          start_code;           /*   140     4 */
	long unsigned int          end_code;             /*   144     4 */
	long unsigned int          start_data;           /*   148     4 */
	long unsigned int          end_data;             /*   152     4 */
	long unsigned int          start_brk;            /*   156     4 */
	long unsigned int          brk;                  /*   160     4 */
	long unsigned int          start_stack;          /*   164     4 */
	long unsigned int          arg_start;            /*   168     4 */
	long unsigned int          arg_end;              /*   172     4 */
	long unsigned int          env_start;            /*   176     4 */
	long unsigned int          env_end;              /*   180     4 */
	long unsigned int          saved_auxv[42];       /*   184   168 */
	/* --- cacheline 5 boundary (320 bytes) was 32 bytes ago --- */
	struct mm_rss_stat         rss_stat;             /*   352    12 */
	struct linux_binfmt *      binfmt;               /*   364     4 */
	cpumask_var_t              cpu_vm_mask_var;      /*   368     4 */

	/* XXX 4 bytes hole, try to pack */

	mm_context_t               context;              /*   376    16 */
	/* --- cacheline 6 boundary (384 bytes) was 8 bytes ago --- */
	long unsigned int          flags;                /*   392     4 */
	struct core_state *        core_state;           /*   396     4 */
	spinlock_t                 ioctx_lock;           /*   400    16 */
	struct hlist_head          ioctx_list;           /*   416     4 */
	struct file *              exe_file;             /*   420     4 */
	bool                       tlb_flush_pending;    /*   424     1 */
	struct uprobes_state       uprobes_state;        /*   425     0 */

	/* size: 432, cachelines: 7, members: 48 */
	/* sum members: 421, holes: 1, sum holes: 4 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct uprobes_state {

	/* size: 0, cachelines: 0, members: 0 */
};
struct kmem_cache {
	struct kmem_cache_cpu *    cpu_slab;             /*     0     4 */
	long unsigned int          flags;                /*     4     4 */
	long unsigned int          min_partial;          /*     8     4 */
	int                        size;                 /*    12     4 */
	int                        object_size;          /*    16     4 */
	int                        offset;               /*    20     4 */
	int                        cpu_partial;          /*    24     4 */
	struct kmem_cache_order_objects oo;              /*    28     4 */
	struct kmem_cache_order_objects max;             /*    32     4 */
	struct kmem_cache_order_objects min;             /*    36     4 */
	gfp_t                      allocflags;           /*    40     4 */
	int                        refcount;             /*    44     4 */
	void                       (*ctor)(void *);      /*    48     4 */
	int                        inuse;                /*    52     4 */
	int                        align;                /*    56     4 */
	int                        reserved;             /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	const char  *              name;                 /*    64     4 */
	struct list_head           list;                 /*    68     8 */
	struct kobject             kobj;                 /*    76    36 */
	struct kmem_cache_node *   node[1];              /*   112     4 */

	/* size: 116, cachelines: 2, members: 20 */
	/* last cacheline: 52 bytes */
};
struct page_frag {
	struct page *              page;                 /*     0     4 */
	__u16                      offset;               /*     4     2 */
	__u16                      size;                 /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct vm_operations_struct {
	void                       (*open)(struct vm_area_struct *); /*     0     4 */
	void                       (*close)(struct vm_area_struct *); /*     4     4 */
	int                        (*fault)(struct vm_area_struct *, struct vm_fault *); /*     8     4 */
	int                        (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *); /*    12     4 */
	int                        (*access)(struct vm_area_struct *, long unsigned int, void *, int, int); /*    16     4 */
	int                        (*remap_pages)(struct vm_area_struct *, long unsigned int, long unsigned int, long unsigned int); /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct core_thread {
	struct task_struct *       task;                 /*     0     4 */
	struct core_thread *       next;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct core_state {
	atomic_t                   nr_threads;           /*     0     4 */
	struct core_thread         dumper;               /*     4     8 */
	struct completion          startup;              /*    12    28 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct mm_rss_stat {
	atomic_long_t              count[3];             /*     0    12 */

	/* size: 12, cachelines: 1, members: 1 */
	/* last cacheline: 12 bytes */
};
struct sysv_sem {
	struct sem_undo_list *     undo_list;            /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct siginfo {
	int                        si_signo;             /*     0     4 */
	int                        si_errno;             /*     4     4 */
	int                        si_code;              /*     8     4 */
	union {
		int                _pad[29];             /*         116 */
		struct {
			__kernel_pid_t _pid;             /*    12     4 */
			__kernel_uid32_t _uid;           /*    16     4 */
		} _kill;                                 /*           8 */
		struct {
			__kernel_timer_t _tid;           /*    12     4 */
			int        _overrun;             /*    16     4 */
			char       _pad[0];              /*    20     0 */
			sigval_t   _sigval;              /*    20     4 */
			int        _sys_private;         /*    24     4 */
		} _timer;                                /*          16 */
		struct {
			__kernel_pid_t _pid;             /*    12     4 */
			__kernel_uid32_t _uid;           /*    16     4 */
			sigval_t   _sigval;              /*    20     4 */
		} _rt;                                   /*          12 */
		struct {
			__kernel_pid_t _pid;             /*    12     4 */
			__kernel_uid32_t _uid;           /*    16     4 */
			int        _status;              /*    20     4 */
			__kernel_clock_t _utime;         /*    24     4 */
			__kernel_clock_t _stime;         /*    28     4 */
		} _sigchld;                              /*          20 */
		struct {
			void *     _addr;                /*    12     4 */
			short int  _addr_lsb;            /*    16     2 */
		} _sigfault;                             /*           8 */
		struct {
			long int   _band;                /*    12     4 */
			int        _fd;                  /*    16     4 */
		} _sigpoll;                              /*           8 */
		struct {
			void *     _call_addr;           /*    12     4 */
			int        _syscall;             /*    16     4 */
			unsigned int _arch;              /*    20     4 */
		} _sigsys;                               /*          12 */
	} _sifields;                                     /*    12   116 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 4 */
};
struct user_struct {
	atomic_t                   __count;              /*     0     4 */
	atomic_t                   processes;            /*     4     4 */
	atomic_t                   files;                /*     8     4 */
	atomic_t                   sigpending;           /*    12     4 */
	atomic_t                   inotify_watches;      /*    16     4 */
	atomic_t                   inotify_devs;         /*    20     4 */
	atomic_long_t              epoll_watches;        /*    24     4 */
	long unsigned int          locked_shm;           /*    28     4 */
	struct key *               uid_keyring;          /*    32     4 */
	struct key *               session_keyring;      /*    36     4 */
	struct hlist_node          uidhash_node;         /*    40     8 */
	kuid_t                     uid;                  /*    48     4 */
	atomic_long_t              locked_vm;            /*    52     4 */

	/* size: 56, cachelines: 1, members: 13 */
	/* last cacheline: 56 bytes */
};
struct sigpending {
	struct list_head           list;                 /*     0     8 */
	sigset_t                   signal;               /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct sigaction {
	__sighandler_t             sa_handler;           /*     0     4 */
	long unsigned int          sa_flags;             /*     4     4 */
	__sigrestore_t             sa_restorer;          /*     8     4 */
	sigset_t                   sa_mask;              /*    12     8 */

	/* size: 20, cachelines: 1, members: 4 */
	/* last cacheline: 20 bytes */
};
struct k_sigaction {
	struct sigaction           sa;                   /*     0    20 */

	/* size: 20, cachelines: 1, members: 1 */
	/* last cacheline: 20 bytes */
};
struct seccomp {
	int                        mode;                 /*     0     4 */
	struct seccomp_filter *    filter;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct plist_head {
	struct list_head           node_list;            /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct plist_node {
	int                        prio;                 /*     0     4 */
	struct list_head           prio_list;            /*     4     8 */
	struct list_head           node_list;            /*    12     8 */

	/* size: 20, cachelines: 1, members: 3 */
	/* last cacheline: 20 bytes */
};
struct rt_mutex {
	raw_spinlock_t             wait_lock;            /*     0    16 */
	struct plist_head          wait_list;            /*    16     8 */
	struct task_struct *       owner;                /*    24     4 */

	/* size: 28, cachelines: 1, members: 3 */
	/* last cacheline: 28 bytes */
};
struct rlimit {
	long unsigned int          rlim_cur;             /*     0     4 */
	long unsigned int          rlim_max;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct timerqueue_node {
	struct rb_node             node;                 /*     0    12 */

	/* XXX 4 bytes hole, try to pack */

	ktime_t                    expires;              /*    16     8 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct timerqueue_head {
	struct rb_root             head;                 /*     0     4 */
	struct timerqueue_node *   next;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct hrtimer {
	struct timerqueue_node     node;                 /*     0    24 */
	ktime_t                    _softexpires;         /*    24     8 */
	enum hrtimer_restart       (*function)(struct hrtimer *); /*    32     4 */
	struct hrtimer_clock_base * base;                /*    36     4 */
	long unsigned int          state;                /*    40     4 */
	int                        start_pid;            /*    44     4 */
	void *                     start_site;           /*    48     4 */
	char                       start_comm[16];       /*    52    16 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */

	/* size: 72, cachelines: 2, members: 8 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct hrtimer_clock_base {
	struct hrtimer_cpu_base *  cpu_base;             /*     0     4 */
	int                        index;                /*     4     4 */
	clockid_t                  clockid;              /*     8     4 */
	struct timerqueue_head     active;               /*    12     8 */

	/* XXX 4 bytes hole, try to pack */

	ktime_t                    resolution;           /*    24     8 */
	ktime_t                    (*get_time)(void);    /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	ktime_t                    softirq_time;         /*    40     8 */
	ktime_t                    offset;               /*    48     8 */

	/* size: 56, cachelines: 1, members: 8 */
	/* sum members: 48, holes: 2, sum holes: 8 */
	/* last cacheline: 56 bytes */
};
struct hrtimer_cpu_base {
	raw_spinlock_t             lock;                 /*     0    16 */
	unsigned int               active_bases;         /*    16     4 */
	unsigned int               clock_was_set;        /*    20     4 */
	ktime_t                    expires_next;         /*    24     8 */
	int                        in_hrtirq;            /*    32     4 */
	int                        hres_active;          /*    36     4 */
	int                        hang_detected;        /*    40     4 */
	long unsigned int          nr_events;            /*    44     4 */
	long unsigned int          nr_retries;           /*    48     4 */
	long unsigned int          nr_hangs;             /*    52     4 */
	ktime_t                    max_hang_time;        /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct hrtimer_clock_base  clock_base[4];        /*    64   224 */
	/* --- cacheline 4 boundary (256 bytes) was 32 bytes ago --- */

	/* size: 288, cachelines: 5, members: 12 */
	/* last cacheline: 32 bytes */
};
struct task_io_accounting {

	/* size: 0, cachelines: 0, members: 0 */
};
struct key {
	atomic_t                   usage;                /*     0     4 */
	key_serial_t               serial;               /*     4     4 */
	union {
		struct list_head   graveyard_link;       /*           8 */
		struct rb_node     serial_node;          /*          12 */
	};                                               /*     8    12 */
	struct key_type *          type;                 /*    20     4 */
	struct rw_semaphore        sem;                  /*    24    28 */
	struct key_user *          user;                 /*    52     4 */
	void *                     security;             /*    56     4 */
	union {
		time_t             expiry;               /*           4 */
		time_t             revoked_at;           /*           4 */
	};                                               /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	time_t                     last_used_at;         /*    64     4 */
	kuid_t                     uid;                  /*    68     4 */
	kgid_t                     gid;                  /*    72     4 */
	key_perm_t                 perm;                 /*    76     4 */
	short unsigned int         quotalen;             /*    80     2 */
	short unsigned int         datalen;              /*    82     2 */
	long unsigned int          flags;                /*    84     4 */
	char *                     description;          /*    88     4 */
	union {
		struct list_head   link;                 /*           8 */
		long unsigned int  x[2];                 /*           8 */
		void *             p[2];                 /*           8 */
		int                reject_error;         /*           4 */
	} type_data;                                     /*    92     8 */
	union {
		long unsigned int  value;                /*           4 */
		void *             rcudata;              /*           4 */
		void *             data;                 /*           4 */
		struct keyring_list * subscriptions;     /*           4 */
	} payload;                                       /*   100     4 */

	/* size: 104, cachelines: 2, members: 18 */
	/* last cacheline: 40 bytes */
};
struct group_info {
	atomic_t                   usage;                /*     0     4 */
	int                        ngroups;              /*     4     4 */
	int                        nblocks;              /*     8     4 */
	kgid_t                     small_block[32];      /*    12   128 */
	/* --- cacheline 2 boundary (128 bytes) was 12 bytes ago --- */
	kgid_t *                   blocks[0];            /*   140     0 */

	/* size: 140, cachelines: 3, members: 5 */
	/* last cacheline: 12 bytes */
};
struct llist_node {
	struct llist_node *        next;                 /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct sighand_struct {
	atomic_t                   count;                /*     0     4 */
	struct k_sigaction         action[64];           /*     4  1280 */
	/* --- cacheline 20 boundary (1280 bytes) was 4 bytes ago --- */
	spinlock_t                 siglock;              /*  1284    16 */
	wait_queue_head_t          signalfd_wqh;         /*  1300    24 */

	/* size: 1324, cachelines: 21, members: 4 */
	/* last cacheline: 44 bytes */
};
struct cpu_itimer {
	cputime_t                  expires;              /*     0     4 */
	cputime_t                  incr;                 /*     4     4 */
	u32                        error;                /*     8     4 */
	u32                        incr_error;           /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct cputime {
	cputime_t                  utime;                /*     0     4 */
	cputime_t                  stime;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct task_cputime {
	cputime_t                  utime;                /*     0     4 */
	cputime_t                  stime;                /*     4     4 */
	long long unsigned int     sum_exec_runtime;     /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct thread_group_cputimer {
	struct task_cputime        cputime;              /*     0    16 */
	int                        running;              /*    16     4 */
	raw_spinlock_t             lock;                 /*    20    16 */

	/* size: 40, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct signal_struct {
	atomic_t                   sigcnt;               /*     0     4 */
	atomic_t                   live;                 /*     4     4 */
	int                        nr_threads;           /*     8     4 */
	struct list_head           thread_head;          /*    12     8 */
	wait_queue_head_t          wait_chldexit;        /*    20    24 */
	struct task_struct *       curr_target;          /*    44     4 */
	struct sigpending          shared_pending;       /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        group_exit_code;      /*    64     4 */
	int                        notify_count;         /*    68     4 */
	struct task_struct *       group_exit_task;      /*    72     4 */
	int                        group_stop_count;     /*    76     4 */
	unsigned int               flags;                /*    80     4 */
	unsigned int               is_child_subreaper:1; /*    84:31  4 */
	unsigned int               has_child_subreaper:1; /*    84:30  4 */

	/* XXX 30 bits hole, try to pack */

	int                        posix_timer_id;       /*    88     4 */
	struct list_head           posix_timers;         /*    92     8 */

	/* XXX 4 bytes hole, try to pack */

	struct hrtimer             real_timer;           /*   104    72 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 48 bytes ago --- */
	struct pid *               leader_pid;           /*   176     4 */

	/* XXX 4 bytes hole, try to pack */

	ktime_t                    it_real_incr;         /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct cpu_itimer          it[2];                /*   192    32 */
	struct thread_group_cputimer cputimer;           /*   224    40 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 4 boundary (256 bytes) was 8 bytes ago --- */
	struct task_cputime        cputime_expires;      /*   264    16 */
	struct list_head           cpu_timers[3];        /*   280    24 */
	struct pid *               tty_old_pgrp;         /*   304     4 */
	int                        leader;               /*   308     4 */
	struct tty_struct *        tty;                  /*   312     4 */
	cputime_t                  utime;                /*   316     4 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	cputime_t                  stime;                /*   320     4 */
	cputime_t                  cutime;               /*   324     4 */
	cputime_t                  cstime;               /*   328     4 */
	cputime_t                  gtime;                /*   332     4 */
	cputime_t                  cgtime;               /*   336     4 */
	struct cputime             prev_cputime;         /*   340     8 */
	long unsigned int          nvcsw;                /*   348     4 */
	long unsigned int          nivcsw;               /*   352     4 */
	long unsigned int          cnvcsw;               /*   356     4 */
	long unsigned int          cnivcsw;              /*   360     4 */
	long unsigned int          min_flt;              /*   364     4 */
	long unsigned int          maj_flt;              /*   368     4 */
	long unsigned int          cmin_flt;             /*   372     4 */
	long unsigned int          cmaj_flt;             /*   376     4 */
	long unsigned int          inblock;              /*   380     4 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	long unsigned int          oublock;              /*   384     4 */
	long unsigned int          cinblock;             /*   388     4 */
	long unsigned int          coublock;             /*   392     4 */
	long unsigned int          maxrss;               /*   396     4 */
	long unsigned int          cmaxrss;              /*   400     4 */
	struct task_io_accounting  ioac;                 /*   404     0 */

	/* XXX 4 bytes hole, try to pack */

	long long unsigned int     sum_sched_runtime;    /*   408     8 */
	struct rlimit              rlim[16];             /*   416   128 */
	/* --- cacheline 8 boundary (512 bytes) was 32 bytes ago --- */
	unsigned int               audit_tty;            /*   544     4 */
	unsigned int               audit_tty_log_passwd; /*   548     4 */
	struct tty_audit_buf *     tty_audit_buf;        /*   552     4 */
	struct rw_semaphore        group_rwsem;          /*   556    28 */
	/* --- cacheline 9 boundary (576 bytes) was 8 bytes ago --- */
	oom_flags_t                oom_flags;            /*   584     4 */
	short int                  oom_score_adj;        /*   588     2 */
	short int                  oom_score_adj_min;    /*   590     2 */
	struct mutex               cred_guard_mutex;     /*   592    40 */

	/* size: 632, cachelines: 10, members: 58 */
	/* sum members: 620, holes: 3, sum holes: 12 */
	/* bit holes: 1, sum bit holes: 30 bits */
	/* paddings: 2, sum paddings: 8 */
	/* last cacheline: 56 bytes */
};
struct tty_struct {
	int                        magic;                /*     0     4 */
	struct kref                kref;                 /*     4     4 */
	struct device *            dev;                  /*     8     4 */
	struct tty_driver *        driver;               /*    12     4 */
	const struct tty_operations  * ops;              /*    16     4 */
	int                        index;                /*    20     4 */
	struct ld_semaphore        ldisc_sem;            /*    24    40 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct tty_ldisc *         ldisc;                /*    64     4 */
	struct mutex               atomic_write_lock;    /*    68    40 */
	struct mutex               legacy_mutex;         /*   108    40 */
	/* --- cacheline 2 boundary (128 bytes) was 20 bytes ago --- */
	struct mutex               termios_mutex;        /*   148    40 */
	spinlock_t                 ctrl_lock;            /*   188    16 */
	/* --- cacheline 3 boundary (192 bytes) was 12 bytes ago --- */
	struct ktermios            termios;              /*   204    44 */
	struct ktermios            termios_locked;       /*   248    44 */
	/* --- cacheline 4 boundary (256 bytes) was 36 bytes ago --- */
	struct termiox *           termiox;              /*   292     4 */
	char                       name[64];             /*   296    64 */
	/* --- cacheline 5 boundary (320 bytes) was 40 bytes ago --- */
	struct pid *               pgrp;                 /*   360     4 */
	struct pid *               session;              /*   364     4 */
	long unsigned int          flags;                /*   368     4 */
	int                        count;                /*   372     4 */
	struct winsize             winsize;              /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	unsigned char              stopped:1;            /*   384: 7  1 */
	unsigned char              hw_stopped:1;         /*   384: 6  1 */
	unsigned char              flow_stopped:1;       /*   384: 5  1 */
	unsigned char              packet:1;             /*   384: 4  1 */

	/* XXX 4 bits hole, try to pack */

	unsigned char              ctrl_status;          /*   385     1 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               receive_room;         /*   388     4 */
	int                        flow_change;          /*   392     4 */
	struct tty_struct *        link;                 /*   396     4 */
	struct fasync_struct *     fasync;               /*   400     4 */
	int                        alt_speed;            /*   404     4 */
	wait_queue_head_t          write_wait;           /*   408    24 */
	wait_queue_head_t          read_wait;            /*   432    24 */
	/* --- cacheline 7 boundary (448 bytes) was 8 bytes ago --- */
	struct work_struct         hangup_work;          /*   456    16 */
	void *                     disc_data;            /*   472     4 */
	void *                     driver_data;          /*   476     4 */
	struct list_head           tty_files;            /*   480     8 */
	unsigned char              closing:1;            /*   488: 7  1 */

	/* XXX 7 bits hole, try to pack */
	/* XXX 1 byte hole, try to pack */

	short unsigned int         minimum_to_wake;      /*   490     2 */
	unsigned char *            write_buf;            /*   492     4 */
	int                        write_cnt;            /*   496     4 */
	struct work_struct         SAK_work;             /*   500    16 */
	/* --- cacheline 8 boundary (512 bytes) was 4 bytes ago --- */
	struct tty_port *          port;                 /*   516     4 */

	/* size: 520, cachelines: 9, members: 43 */
	/* sum members: 517, holes: 2, sum holes: 3 */
	/* bit holes: 2, sum bit holes: 11 bits */
	/* last cacheline: 8 bytes */
};
struct sched_info {
	long unsigned int          pcount;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	long long unsigned int     run_delay;            /*     8     8 */
	long long unsigned int     last_arrival;         /*    16     8 */
	long long unsigned int     last_queued;          /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct load_weight {
	long unsigned int          weight;               /*     0     4 */
	long unsigned int          inv_weight;           /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct sched_avg {
	u32                        runnable_avg_sum;     /*     0     4 */
	u32                        runnable_avg_period;  /*     4     4 */
	u32                        runnable_avg_sum_scaled; /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	u64                        last_runnable_update; /*    16     8 */
	s64                        decay_count;          /*    24     8 */
	long unsigned int          load_avg_contrib;     /*    32     4 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 32, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct sched_statistics {
	u64                        wait_start;           /*     0     8 */
	u64                        wait_max;             /*     8     8 */
	u64                        wait_count;           /*    16     8 */
	u64                        wait_sum;             /*    24     8 */
	u64                        iowait_count;         /*    32     8 */
	u64                        iowait_sum;           /*    40     8 */
	u64                        sleep_start;          /*    48     8 */
	u64                        sleep_max;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	s64                        sum_sleep_runtime;    /*    64     8 */
	u64                        block_start;          /*    72     8 */
	u64                        block_max;            /*    80     8 */
	u64                        exec_max;             /*    88     8 */
	u64                        slice_max;            /*    96     8 */
	u64                        nr_migrations_cold;   /*   104     8 */
	u64                        nr_failed_migrations_affine; /*   112     8 */
	u64                        nr_failed_migrations_running; /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	u64                        nr_failed_migrations_hot; /*   128     8 */
	u64                        nr_forced_migrations; /*   136     8 */
	u64                        nr_wakeups;           /*   144     8 */
	u64                        nr_wakeups_sync;      /*   152     8 */
	u64                        nr_wakeups_migrate;   /*   160     8 */
	u64                        nr_wakeups_local;     /*   168     8 */
	u64                        nr_wakeups_remote;    /*   176     8 */
	u64                        nr_wakeups_affine;    /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	u64                        nr_wakeups_affine_attempts; /*   192     8 */
	u64                        nr_wakeups_passive;   /*   200     8 */
	u64                        nr_wakeups_idle;      /*   208     8 */

	/* size: 216, cachelines: 4, members: 27 */
	/* last cacheline: 24 bytes */
};
struct ravg {
	u64                        mark_start;           /*     0     8 */
	u32                        sum;                  /*     8     4 */
	u32                        demand;               /*    12     4 */
	u32                        sum_history[5];       /*    16    20 */

	/* size: 40, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct sched_entity {
	struct load_weight         load;                 /*     0     8 */
	struct rb_node             run_node;             /*     8    12 */
	struct list_head           group_node;           /*    20     8 */
	unsigned int               on_rq;                /*    28     4 */
	u64                        exec_start;           /*    32     8 */
	u64                        sum_exec_runtime;     /*    40     8 */
	u64                        vruntime;             /*    48     8 */
	u64                        prev_sum_exec_runtime; /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u64                        nr_migrations;        /*    64     8 */
	struct sched_statistics    statistics;           /*    72   216 */
	/* --- cacheline 4 boundary (256 bytes) was 32 bytes ago --- */
	struct sched_entity *      parent;               /*   288     4 */
	struct cfs_rq *            cfs_rq;               /*   292     4 */
	struct cfs_rq *            my_q;                 /*   296     4 */

	/* XXX 4 bytes hole, try to pack */

	struct sched_avg           avg;                  /*   304    40 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */

	/* size: 344, cachelines: 6, members: 14 */
	/* sum members: 340, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 24 bytes */
};
struct sched_rt_entity {
	struct list_head           run_list;             /*     0     8 */
	long unsigned int          timeout;              /*     8     4 */
	long unsigned int          watchdog_stamp;       /*    12     4 */
	unsigned int               time_slice;           /*    16     4 */
	struct sched_rt_entity *   back;                 /*    20     4 */
	struct sched_rt_entity *   parent;               /*    24     4 */
	struct rt_rq *             rt_rq;                /*    28     4 */
	struct rt_rq *             my_q;                 /*    32     4 */

	/* size: 36, cachelines: 1, members: 8 */
	/* last cacheline: 36 bytes */
};
struct bio_list {
	struct bio *               head;                 /*     0     4 */
	struct bio *               tail;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct io_context {
	atomic_long_t              refcount;             /*     0     4 */
	atomic_t                   active_ref;           /*     4     4 */
	atomic_t                   nr_tasks;             /*     8     4 */
	spinlock_t                 lock;                 /*    12    16 */
	short unsigned int         ioprio;               /*    28     2 */

	/* XXX 2 bytes hole, try to pack */

	int                        nr_batch_requests;    /*    32     4 */
	long unsigned int          last_waited;          /*    36     4 */
	struct radix_tree_root     icq_tree;             /*    40    12 */
	struct io_cq *             icq_hint;             /*    52     4 */
	struct hlist_head          icq_list;             /*    56     4 */
	struct work_struct         release_work;         /*    60    16 */
	/* --- cacheline 1 boundary (64 bytes) was 12 bytes ago --- */

	/* size: 76, cachelines: 2, members: 11 */
	/* sum members: 74, holes: 1, sum holes: 2 */
	/* last cacheline: 12 bytes */
};
struct css_set {
	atomic_t                   refcount;             /*     0     4 */
	struct hlist_node          hlist;                /*     4     8 */
	struct list_head           tasks;                /*    12     8 */
	struct list_head           cg_links;             /*    20     8 */
	struct cgroup_subsys_state * subsys[4];          /*    28    16 */
	struct callback_head       callback_head;        /*    44     8 */

	/* size: 52, cachelines: 1, members: 6 */
	/* last cacheline: 52 bytes */
};
struct uts_namespace {
	struct kref                kref;                 /*     0     4 */
	struct new_utsname         name;                 /*     4   390 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 6 boundary (384 bytes) was 12 bytes ago --- */
	struct user_namespace *    user_ns;              /*   396     4 */
	unsigned int               proc_inum;            /*   400     4 */

	/* size: 404, cachelines: 7, members: 4 */
	/* sum members: 402, holes: 1, sum holes: 2 */
	/* last cacheline: 20 bytes */
};
struct mnt_namespace {
	atomic_t                   count;                /*     0     4 */
	struct mount *             root;                 /*     4     4 */
	struct list_head           list;                 /*     8     8 */
	wait_queue_head_t          poll;                 /*    16    24 */
	int                        event;                /*    40     4 */

	/* size: 44, cachelines: 1, members: 5 */
	/* last cacheline: 44 bytes */
};
struct net {
	atomic_t                   passive;              /*     0     4 */
	atomic_t                   count;                /*     4     4 */
	spinlock_t                 rules_mod_lock;       /*     8    16 */
	struct list_head           list;                 /*    24     8 */
	struct list_head           cleanup_list;         /*    32     8 */
	struct list_head           exit_list;            /*    40     8 */
	struct user_namespace *    user_ns;              /*    48     4 */
	unsigned int               proc_inum;            /*    52     4 */
	struct proc_dir_entry *    proc_net;             /*    56     4 */
	struct proc_dir_entry *    proc_net_stat;        /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ctl_table_set       sysctls;              /*    64    48 */
	struct sock *              rtnl;                 /*   112     4 */
	struct sock *              genl_sock;            /*   116     4 */
	struct list_head           dev_base_head;        /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct hlist_head *        dev_name_head;        /*   128     4 */
	struct hlist_head *        dev_index_head;       /*   132     4 */
	unsigned int               dev_base_seq;         /*   136     4 */
	int                        ifindex;              /*   140     4 */
	struct list_head           rules_ops;            /*   144     8 */
	struct net_device *        loopback_dev;         /*   152     4 */
	struct netns_core          core;                 /*   156    12 */
	struct netns_mib           mib;                  /*   168    56 */
	/* --- cacheline 3 boundary (192 bytes) was 32 bytes ago --- */
	struct netns_packet        packet;               /*   224    44 */
	/* --- cacheline 4 boundary (256 bytes) was 12 bytes ago --- */
	struct netns_unix          unx;                  /*   268     8 */

	/* XXX 44 bytes hole, try to pack */

	/* --- cacheline 5 boundary (320 bytes) --- */
	struct netns_ipv4          ipv4;                 /*   320   384 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	struct netns_ipv6          ipv6;                 /*   704   576 */
	/* --- cacheline 20 boundary (1280 bytes) --- */
	struct netns_nf            nf;                   /*  1280    60 */
	struct netns_xt            xt;                   /*  1340   120 */
	/* --- cacheline 22 boundary (1408 bytes) was 52 bytes ago --- */
	struct netns_ct            ct;                   /*  1460   308 */

	/* XXX 24 bytes hole, try to pack */

	/* --- cacheline 28 boundary (1792 bytes) --- */
	struct netns_nf_frag       nf_frag;              /*  1792   192 */
	/* --- cacheline 31 boundary (1984 bytes) --- */
	struct sock *              nfnl;                 /*  1984     4 */
	struct sock *              nfnl_stash;           /*  1988     4 */
	struct sk_buff_head        wext_nlevents;        /*  1992    28 */
	struct net_generic *       gen;                  /*  2020     4 */

	/* XXX 24 bytes hole, try to pack */

	/* --- cacheline 32 boundary (2048 bytes) --- */
	struct netns_xfrm          xfrm;                 /*  2048   512 */
	/* --- cacheline 40 boundary (2560 bytes) --- */
	struct netns_ipvs *        ipvs;                 /*  2560     4 */
	struct sock *              diag_nlsk;            /*  2564     4 */
	atomic_t                   rt_genid;             /*  2568     4 */

	/* size: 2624, cachelines: 41, members: 38 */
	/* sum members: 2480, holes: 3, sum holes: 92 */
	/* padding: 52 */
};
struct new_utsname {
	char                       sysname[65];          /*     0    65 */
	/* --- cacheline 1 boundary (64 bytes) was 1 bytes ago --- */
	char                       nodename[65];         /*    65    65 */
	/* --- cacheline 2 boundary (128 bytes) was 2 bytes ago --- */
	char                       release[65];          /*   130    65 */
	/* --- cacheline 3 boundary (192 bytes) was 3 bytes ago --- */
	char                       version[65];          /*   195    65 */
	/* --- cacheline 4 boundary (256 bytes) was 4 bytes ago --- */
	char                       machine[65];          /*   260    65 */
	/* --- cacheline 5 boundary (320 bytes) was 5 bytes ago --- */
	char                       domainname[65];       /*   325    65 */
	/* --- cacheline 6 boundary (384 bytes) was 6 bytes ago --- */

	/* size: 390, cachelines: 7, members: 6 */
	/* last cacheline: 6 bytes */
};
struct sockaddr {
	sa_family_t                sa_family;            /*     0     2 */
	char                       sa_data[14];          /*     2    14 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct msghdr {
	void *                     msg_name;             /*     0     4 */
	int                        msg_namelen;          /*     4     4 */
	struct iovec *             msg_iov;              /*     8     4 */
	__kernel_size_t            msg_iovlen;           /*    12     4 */
	void *                     msg_control;          /*    16     4 */
	__kernel_size_t            msg_controllen;       /*    20     4 */
	unsigned int               msg_flags;            /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* last cacheline: 28 bytes */
};
struct socket_wq {
	wait_queue_head_t          wait;                 /*     0    24 */
	struct fasync_struct *     fasync_list;          /*    24     4 */
	struct callback_head       rcu;                  /*    28     8 */

	/* size: 64, cachelines: 1, members: 3 */
	/* padding: 28 */
};
struct socket {
	socket_state               state;                /*     0     4 */
	short int                  type;                 /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	long unsigned int          flags;                /*     8     4 */
	struct socket_wq *         wq;                   /*    12     4 */
	struct file *              file;                 /*    16     4 */
	struct sock *              sk;                   /*    20     4 */
	const struct proto_ops  *  ops;                  /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* sum members: 26, holes: 1, sum holes: 2 */
	/* last cacheline: 28 bytes */
};
struct proto_ops {
	int                        family;               /*     0     4 */
	struct module *            owner;                /*     4     4 */
	int                        (*release)(struct socket *); /*     8     4 */
	int                        (*bind)(struct socket *, struct sockaddr *, int); /*    12     4 */
	int                        (*connect)(struct socket *, struct sockaddr *, int, int); /*    16     4 */
	int                        (*socketpair)(struct socket *, struct socket *); /*    20     4 */
	int                        (*accept)(struct socket *, struct socket *, int); /*    24     4 */
	int                        (*getname)(struct socket *, struct sockaddr *, int *, int); /*    28     4 */
	unsigned int               (*poll)(struct file *, struct socket *, struct poll_table_struct *); /*    32     4 */
	int                        (*ioctl)(struct socket *, unsigned int, long unsigned int); /*    36     4 */
	int                        (*listen)(struct socket *, int); /*    40     4 */
	int                        (*shutdown)(struct socket *, int); /*    44     4 */
	int                        (*setsockopt)(struct socket *, int, int, char *, unsigned int); /*    48     4 */
	int                        (*getsockopt)(struct socket *, int, int, char *, int *); /*    52     4 */
	int                        (*sendmsg)(struct kiocb *, struct socket *, struct msghdr *, size_t); /*    56     4 */
	int                        (*recvmsg)(struct kiocb *, struct socket *, struct msghdr *, size_t, int); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*mmap)(struct file *, struct socket *, struct vm_area_struct *); /*    64     4 */
	ssize_t                    (*sendpage)(struct socket *, struct page *, int, size_t, int); /*    68     4 */
	ssize_t                    (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t, unsigned int); /*    72     4 */
	int                        (*set_peek_off)(struct sock *, int); /*    76     4 */

	/* size: 80, cachelines: 2, members: 20 */
	/* last cacheline: 16 bytes */
};
struct kmem_cache_cpu {
	void * *                   freelist;             /*     0     4 */
	long unsigned int          tid;                  /*     4     4 */
	struct page *              page;                 /*     8     4 */
	struct page *              partial;              /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct kmem_cache_order_objects {
	long unsigned int          x;                    /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct in6_addr {
	union {
		__u8               u6_addr8[16];         /*          16 */
		__be16             u6_addr16[8];         /*          16 */
		__be32             u6_addr32[4];         /*          16 */
	} in6_u;                                         /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct klist_node {
	void *                     n_klist;              /*     0     4 */
	struct list_head           n_node;               /*     4     8 */
	struct kref                n_ref;                /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct seq_operations {
	void *                     (*start)(struct seq_file *, loff_t *); /*     0     4 */
	void                       (*stop)(struct seq_file *, void *); /*     4     4 */
	void *                     (*next)(struct seq_file *, void *, loff_t *); /*     8     4 */
	int                        (*show)(struct seq_file *, void *); /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct dev_pin_info {
	struct pinctrl *           p;                    /*     0     4 */
	struct pinctrl_state *     default_state;        /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct pm_message {
	int                        event;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct dev_pm_ops {
	int                        (*prepare)(struct device *); /*     0     4 */
	void                       (*complete)(struct device *); /*     4     4 */
	int                        (*suspend)(struct device *); /*     8     4 */
	int                        (*resume)(struct device *); /*    12     4 */
	int                        (*freeze)(struct device *); /*    16     4 */
	int                        (*thaw)(struct device *); /*    20     4 */
	int                        (*poweroff)(struct device *); /*    24     4 */
	int                        (*restore)(struct device *); /*    28     4 */
	int                        (*suspend_late)(struct device *); /*    32     4 */
	int                        (*resume_early)(struct device *); /*    36     4 */
	int                        (*freeze_late)(struct device *); /*    40     4 */
	int                        (*thaw_early)(struct device *); /*    44     4 */
	int                        (*poweroff_late)(struct device *); /*    48     4 */
	int                        (*restore_early)(struct device *); /*    52     4 */
	int                        (*suspend_noirq)(struct device *); /*    56     4 */
	int                        (*resume_noirq)(struct device *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*freeze_noirq)(struct device *); /*    64     4 */
	int                        (*thaw_noirq)(struct device *); /*    68     4 */
	int                        (*poweroff_noirq)(struct device *); /*    72     4 */
	int                        (*restore_noirq)(struct device *); /*    76     4 */
	int                        (*runtime_suspend)(struct device *); /*    80     4 */
	int                        (*runtime_resume)(struct device *); /*    84     4 */
	int                        (*runtime_idle)(struct device *); /*    88     4 */

	/* size: 92, cachelines: 2, members: 23 */
	/* last cacheline: 28 bytes */
};
struct device {
	struct device *            parent;               /*     0     4 */
	struct device_private *    p;                    /*     4     4 */
	struct kobject             kobj;                 /*     8    36 */
	const char  *              init_name;            /*    44     4 */
	const struct device_type  * type;                /*    48     4 */
	struct mutex               mutex;                /*    52    40 */
	/* --- cacheline 1 boundary (64 bytes) was 28 bytes ago --- */
	struct bus_type *          bus;                  /*    92     4 */
	struct device_driver *     driver;               /*    96     4 */
	void *                     platform_data;        /*   100     4 */
	struct dev_pm_info         power;                /*   104   216 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	struct dev_pm_domain *     pm_domain;            /*   320     4 */
	struct dev_pin_info *      pins;                 /*   324     4 */
	u64 *                      dma_mask;             /*   328     4 */

	/* XXX 4 bytes hole, try to pack */

	u64                        coherent_dma_mask;    /*   336     8 */
	struct device_dma_parameters * dma_parms;        /*   344     4 */
	struct list_head           dma_pools;            /*   348     8 */
	struct dma_coherent_mem *  dma_mem;              /*   356     4 */
	struct cma *               cma_area;             /*   360     4 */
	struct dev_archdata        archdata;             /*   364     8 */
	struct device_node *       of_node;              /*   372     4 */
	struct acpi_dev_node       acpi_node;            /*   376     0 */
	dev_t                      devt;                 /*   376     4 */
	u32                        id;                   /*   380     4 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	spinlock_t                 devres_lock;          /*   384    16 */
	struct list_head           devres_head;          /*   400     8 */
	struct klist_node          knode_class;          /*   408    16 */
	struct class *             class;                /*   424     4 */
	const struct attribute_group  * * groups;        /*   428     4 */
	void                       (*release)(struct device *); /*   432     4 */
	struct iommu_group *       iommu_group;          /*   436     4 */

	/* size: 440, cachelines: 7, members: 30 */
	/* sum members: 436, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct pm_subsys_data {
	spinlock_t                 lock;                 /*     0    16 */
	unsigned int               refcount;             /*    16     4 */
	struct list_head           clock_list;           /*    20     8 */

	/* size: 28, cachelines: 1, members: 3 */
	/* last cacheline: 28 bytes */
};
struct dev_pm_info {
	pm_message_t               power_state;          /*     0     4 */
	unsigned int               can_wakeup:1;         /*     4:31  4 */
	unsigned int               async_suspend:1;      /*     4:30  4 */
	bool                       is_prepared:1;        /*     4: 5  1 */
	bool                       is_suspended:1;       /*     4: 4  1 */
	bool                       ignore_children:1;    /*     4: 3  1 */
	bool                       early_init:1;         /*     4: 2  1 */

	/* XXX 26 bits hole, try to pack */

	spinlock_t                 lock;                 /*     8    16 */
	struct list_head           entry;                /*    24     8 */
	struct completion          completion;           /*    32    28 */
	struct wakeup_source *     wakeup;               /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	bool                       wakeup_path:1;        /*    64: 7  1 */
	bool                       syscore:1;            /*    64: 6  1 */

	/* XXX 6 bits hole, try to pack */
	/* XXX 3 bytes hole, try to pack */

	struct timer_list          suspend_timer;        /*    68    52 */
	long unsigned int          timer_expires;        /*   120     4 */
	struct work_struct         work;                 /*   124    16 */
	/* --- cacheline 2 boundary (128 bytes) was 12 bytes ago --- */
	wait_queue_head_t          wait_queue;           /*   140    24 */
	atomic_t                   usage_count;          /*   164     4 */
	atomic_t                   child_count;          /*   168     4 */
	unsigned int               disable_depth:3;      /*   172:29  4 */
	unsigned int               idle_notification:1;  /*   172:28  4 */
	unsigned int               request_pending:1;    /*   172:27  4 */
	unsigned int               deferred_resume:1;    /*   172:26  4 */
	unsigned int               run_wake:1;           /*   172:25  4 */
	unsigned int               runtime_auto:1;       /*   172:24  4 */
	unsigned int               no_callbacks:1;       /*   172:23  4 */
	unsigned int               irq_safe:1;           /*   172:22  4 */
	unsigned int               use_autosuspend:1;    /*   172:21  4 */
	unsigned int               timer_autosuspends:1; /*   172:20  4 */
	unsigned int               memalloc_noio:1;      /*   172:19  4 */

	/* XXX 19 bits hole, try to pack */

	enum rpm_request           request;              /*   176     4 */
	enum rpm_status            runtime_status;       /*   180     4 */
	int                        runtime_error;        /*   184     4 */
	int                        autosuspend_delay;    /*   188     4 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	long unsigned int          last_busy;            /*   192     4 */
	long unsigned int          active_jiffies;       /*   196     4 */
	long unsigned int          suspended_jiffies;    /*   200     4 */
	long unsigned int          accounting_timestamp; /*   204     4 */
	struct pm_subsys_data *    subsys_data;          /*   208     4 */
	struct dev_pm_qos *        qos;                  /*   212     4 */

	/* size: 216, cachelines: 4, members: 40 */
	/* sum members: 213, holes: 1, sum holes: 3 */
	/* bit holes: 3, sum bit holes: 51 bits */
	/* last cacheline: 24 bytes */
};
struct wakeup_source {
	const char  *              name;                 /*     0     4 */
	struct list_head           entry;                /*     4     8 */
	spinlock_t                 lock;                 /*    12    16 */
	struct timer_list          timer;                /*    28    52 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	long unsigned int          timer_expires;        /*    80     4 */

	/* XXX 4 bytes hole, try to pack */

	ktime_t                    total_time;           /*    88     8 */
	ktime_t                    max_time;             /*    96     8 */
	ktime_t                    last_time;            /*   104     8 */
	ktime_t                    start_prevent_time;   /*   112     8 */
	ktime_t                    prevent_sleep_time;   /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	long unsigned int          event_count;          /*   128     4 */
	long unsigned int          active_count;         /*   132     4 */
	long unsigned int          relax_count;          /*   136     4 */
	long unsigned int          expire_count;         /*   140     4 */
	long unsigned int          wakeup_count;         /*   144     4 */
	bool                       active:1;             /*   148: 7  1 */
	bool                       autosleep_enabled:1;  /*   148: 6  1 */

	/* size: 152, cachelines: 3, members: 17 */
	/* sum members: 145, holes: 1, sum holes: 4 */
	/* padding: 3 */
	/* bit_padding: 6 bits */
	/* last cacheline: 24 bytes */
};
struct dev_pm_qos {
	struct pm_qos_constraints  latency;              /*     0    56 */
	struct pm_qos_flags        flags;                /*    56    12 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	struct dev_pm_qos_request * latency_req;         /*    68     4 */
	struct dev_pm_qos_request * flags_req;           /*    72     4 */

	/* size: 76, cachelines: 2, members: 4 */
	/* last cacheline: 12 bytes */
};
struct dev_pm_domain {
	struct dev_pm_ops          ops;                  /*     0    92 */
	/* --- cacheline 1 boundary (64 bytes) was 28 bytes ago --- */

	/* size: 92, cachelines: 2, members: 1 */
	/* last cacheline: 28 bytes */
};
struct dev_archdata {
	struct dma_map_ops *       dma_ops;              /*     0     4 */
	void *                     iommu;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct dma_map_ops {
	void *                     (*alloc)(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *); /*     0     4 */
	void                       (*free)(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *); /*     4     4 */
	int                        (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, struct dma_attrs *); /*     8     4 */
	int                        (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t, size_t, struct dma_attrs *); /*    12     4 */
	dma_addr_t                 (*map_page)(struct device *, struct page *, long unsigned int, size_t, enum dma_data_direction, struct dma_attrs *); /*    16     4 */
	void                       (*unmap_page)(struct device *, dma_addr_t, size_t, enum dma_data_direction, struct dma_attrs *); /*    20     4 */
	int                        (*map_sg)(struct device *, struct scatterlist *, int, enum dma_data_direction, struct dma_attrs *); /*    24     4 */
	void                       (*unmap_sg)(struct device *, struct scatterlist *, int, enum dma_data_direction, struct dma_attrs *); /*    28     4 */
	void                       (*sync_single_for_cpu)(struct device *, dma_addr_t, size_t, enum dma_data_direction); /*    32     4 */
	void                       (*sync_single_for_device)(struct device *, dma_addr_t, size_t, enum dma_data_direction); /*    36     4 */
	void                       (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int, enum dma_data_direction); /*    40     4 */
	void                       (*sync_sg_for_device)(struct device *, struct scatterlist *, int, enum dma_data_direction); /*    44     4 */
	int                        (*mapping_error)(struct device *, dma_addr_t); /*    48     4 */
	int                        (*dma_supported)(struct device *, u64); /*    52     4 */
	int                        (*set_dma_mask)(struct device *, u64); /*    56     4 */
	void *                     (*remap)(struct device *, void *, dma_addr_t, size_t, struct dma_attrs *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*unremap)(struct device *, void *, size_t); /*    64     4 */
	int                        is_phys;              /*    68     4 */

	/* size: 72, cachelines: 2, members: 18 */
	/* last cacheline: 8 bytes */
};
struct bus_attribute {
	struct attribute           attr;                 /*     0     8 */

	/* XXX last struct has 2 bytes of padding */

	ssize_t                    (*show)(struct bus_type *, char *); /*     8     4 */
	ssize_t                    (*store)(struct bus_type *, const char  *, size_t); /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 16 bytes */
};
struct bus_type {
	const char  *              name;                 /*     0     4 */
	const char  *              dev_name;             /*     4     4 */
	struct device *            dev_root;             /*     8     4 */
	struct bus_attribute *     bus_attrs;            /*    12     4 */
	struct device_attribute *  dev_attrs;            /*    16     4 */
	struct driver_attribute *  drv_attrs;            /*    20     4 */
	int                        (*match)(struct device *, struct device_driver *); /*    24     4 */
	int                        (*uevent)(struct device *, struct kobj_uevent_env *); /*    28     4 */
	int                        (*probe)(struct device *); /*    32     4 */
	int                        (*remove)(struct device *); /*    36     4 */
	void                       (*shutdown)(struct device *); /*    40     4 */
	int                        (*suspend)(struct device *, pm_message_t); /*    44     4 */
	int                        (*resume)(struct device *); /*    48     4 */
	const struct dev_pm_ops  * pm;                   /*    52     4 */
	struct iommu_ops *         iommu_ops;            /*    56     4 */
	struct subsys_private *    p;                    /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct lock_class_key      lock_key;             /*    64     0 */

	/* size: 64, cachelines: 1, members: 17 */
};
struct device_attribute {
	struct attribute           attr;                 /*     0     8 */

	/* XXX last struct has 2 bytes of padding */

	ssize_t                    (*show)(struct device *, struct device_attribute *, char *); /*     8     4 */
	ssize_t                    (*store)(struct device *, struct device_attribute *, const char  *, size_t); /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 16 bytes */
};
struct driver_attribute {
	struct attribute           attr;                 /*     0     8 */

	/* XXX last struct has 2 bytes of padding */

	ssize_t                    (*show)(struct device_driver *, char *); /*     8     4 */
	ssize_t                    (*store)(struct device_driver *, const char  *, size_t); /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 16 bytes */
};
struct device_driver {
	const char  *              name;                 /*     0     4 */
	struct bus_type *          bus;                  /*     4     4 */
	struct module *            owner;                /*     8     4 */
	const char  *              mod_name;             /*    12     4 */
	bool                       suppress_bind_attrs;  /*    16     1 */

	/* XXX 3 bytes hole, try to pack */

	const struct of_device_id  * of_match_table;     /*    20     4 */
	const struct acpi_device_id  * acpi_match_table; /*    24     4 */
	int                        (*probe)(struct device *); /*    28     4 */
	int                        (*remove)(struct device *); /*    32     4 */
	void                       (*shutdown)(struct device *); /*    36     4 */
	int                        (*suspend)(struct device *, pm_message_t); /*    40     4 */
	int                        (*resume)(struct device *); /*    44     4 */
	const struct attribute_group  * * groups;        /*    48     4 */
	const struct dev_pm_ops  * pm;                   /*    52     4 */
	struct driver_private *    p;                    /*    56     4 */

	/* size: 60, cachelines: 1, members: 15 */
	/* sum members: 57, holes: 1, sum holes: 3 */
	/* last cacheline: 60 bytes */
};
struct device_type {
	const char  *              name;                 /*     0     4 */
	const struct attribute_group  * * groups;        /*     4     4 */
	int                        (*uevent)(struct device *, struct kobj_uevent_env *); /*     8     4 */
	char *                     (*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *); /*    12     4 */
	void                       (*release)(struct device *); /*    16     4 */
	const struct dev_pm_ops  * pm;                   /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct class {
	const char  *              name;                 /*     0     4 */
	struct module *            owner;                /*     4     4 */
	struct class_attribute *   class_attrs;          /*     8     4 */
	struct device_attribute *  dev_attrs;            /*    12     4 */
	struct bin_attribute *     dev_bin_attrs;        /*    16     4 */
	struct kobject *           dev_kobj;             /*    20     4 */
	int                        (*dev_uevent)(struct device *, struct kobj_uevent_env *); /*    24     4 */
	char *                     (*devnode)(struct device *, umode_t *); /*    28     4 */
	void                       (*class_release)(struct class *); /*    32     4 */
	void                       (*dev_release)(struct device *); /*    36     4 */
	int                        (*suspend)(struct device *, pm_message_t); /*    40     4 */
	int                        (*resume)(struct device *); /*    44     4 */
	const struct kobj_ns_type_operations  * ns_type; /*    48     4 */
	const void  *              (*namespace)(struct device *); /*    52     4 */
	const struct dev_pm_ops  * pm;                   /*    56     4 */
	struct subsys_private *    p;                    /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 16 */
};
struct class_attribute {
	struct attribute           attr;                 /*     0     8 */

	/* XXX last struct has 2 bytes of padding */

	ssize_t                    (*show)(struct class *, struct class_attribute *, char *); /*     8     4 */
	ssize_t                    (*store)(struct class *, struct class_attribute *, const char  *, size_t); /*    12     4 */
	const void  *              (*namespace)(struct class *, const struct class_attribute  *); /*    16     4 */

	/* size: 20, cachelines: 1, members: 4 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 20 bytes */
};
struct device_dma_parameters {
	unsigned int               max_segment_size;     /*     0     4 */
	long unsigned int          segment_boundary_mask; /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct acpi_dev_node {

	/* size: 0, cachelines: 0, members: 0 */
};
struct cpu_tlb_fns {
	void                       (*flush_user_range)(long unsigned int, long unsigned int, struct vm_area_struct *); /*     0     4 */
	void                       (*flush_kern_range)(long unsigned int, long unsigned int); /*     4     4 */
	long unsigned int          tlb_flags;            /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct vm_fault {
	unsigned int               flags;                /*     0     4 */
	long unsigned int          pgoff;                /*     4     4 */
	void *                     virtual_address;      /*     8     4 */
	struct page *              page;                 /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct vm_event_state {
	long unsigned int          event[51];            /*     0   204 */
	/* --- cacheline 3 boundary (192 bytes) was 12 bytes ago --- */

	/* size: 204, cachelines: 4, members: 1 */
	/* last cacheline: 12 bytes */
};
struct scatterlist {
	long unsigned int          page_link;            /*     0     4 */
	unsigned int               offset;               /*     4     4 */
	unsigned int               length;               /*     8     4 */
	dma_addr_t                 dma_address;          /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct sg_table {
	struct scatterlist *       sgl;                  /*     0     4 */
	unsigned int               nents;                /*     4     4 */
	unsigned int               orig_nents;           /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct dma_attrs {
	long unsigned int          flags[1];             /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct nf_conntrack {
	atomic_t                   use;                  /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct nf_bridge_info {
	atomic_t                   use;                  /*     0     4 */
	unsigned int               mask;                 /*     4     4 */
	struct net_device *        physindev;            /*     8     4 */
	struct net_device *        physoutdev;           /*    12     4 */
	long unsigned int          data[8];              /*    16    32 */

	/* size: 48, cachelines: 1, members: 5 */
	/* last cacheline: 48 bytes */
};
struct net_device {
	char                       name[16];             /*     0    16 */
	struct hlist_node          name_hlist;           /*    16     8 */
	char *                     ifalias;              /*    24     4 */
	long unsigned int          mem_end;              /*    28     4 */
	long unsigned int          mem_start;            /*    32     4 */
	long unsigned int          base_addr;            /*    36     4 */
	unsigned int               irq;                  /*    40     4 */
	long unsigned int          state;                /*    44     4 */
	struct list_head           dev_list;             /*    48     8 */
	struct list_head           napi_list;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct list_head           unreg_list;           /*    64     8 */
	struct list_head           upper_dev_list;       /*    72     8 */
	netdev_features_t          features;             /*    80     8 */
	netdev_features_t          hw_features;          /*    88     8 */
	netdev_features_t          wanted_features;      /*    96     8 */
	netdev_features_t          vlan_features;        /*   104     8 */
	netdev_features_t          hw_enc_features;      /*   112     8 */
	int                        ifindex;              /*   120     4 */
	int                        iflink;               /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct net_device_stats    stats;                /*   128    92 */
	/* --- cacheline 3 boundary (192 bytes) was 28 bytes ago --- */
	atomic_long_t              rx_dropped;           /*   220     4 */
	const struct iw_handler_def  * wireless_handlers; /*   224     4 */
	struct iw_public_data *    wireless_data;        /*   228     4 */
	const struct net_device_ops  * netdev_ops;       /*   232     4 */
	const struct ethtool_ops  * ethtool_ops;         /*   236     4 */
	const struct header_ops  * header_ops;           /*   240     4 */
	unsigned int               flags;                /*   244     4 */
	unsigned int               priv_flags;           /*   248     4 */
	short unsigned int         gflags;               /*   252     2 */
	short unsigned int         padded;               /*   254     2 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	unsigned char              operstate;            /*   256     1 */
	unsigned char              link_mode;            /*   257     1 */
	unsigned char              if_port;              /*   258     1 */
	unsigned char              dma;                  /*   259     1 */
	unsigned int               mtu;                  /*   260     4 */
	short unsigned int         type;                 /*   264     2 */
	short unsigned int         hard_header_len;      /*   266     2 */
	short unsigned int         needed_headroom;      /*   268     2 */
	short unsigned int         needed_tailroom;      /*   270     2 */
	unsigned char              perm_addr[32];        /*   272    32 */
	unsigned char              addr_assign_type;     /*   304     1 */
	unsigned char              addr_len;             /*   305     1 */
	unsigned char              neigh_priv_len;       /*   306     1 */

	/* XXX 1 byte hole, try to pack */

	short unsigned int         dev_id;               /*   308     2 */

	/* XXX 2 bytes hole, try to pack */

	spinlock_t                 addr_list_lock;       /*   312    16 */
	/* --- cacheline 5 boundary (320 bytes) was 8 bytes ago --- */
	struct netdev_hw_addr_list uc;                   /*   328    12 */
	struct netdev_hw_addr_list mc;                   /*   340    12 */
	struct netdev_hw_addr_list dev_addrs;            /*   352    12 */
	struct kset *              queues_kset;          /*   364     4 */
	bool                       uc_promisc;           /*   368     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               promiscuity;          /*   372     4 */
	unsigned int               allmulti;             /*   376     4 */
	void *                     atalk_ptr;            /*   380     4 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	struct in_device *         ip_ptr;               /*   384     4 */
	struct dn_dev *            dn_ptr;               /*   388     4 */
	struct inet6_dev *         ip6_ptr;              /*   392     4 */
	void *                     ax25_ptr;             /*   396     4 */
	struct wireless_dev *      ieee80211_ptr;        /*   400     4 */
	long unsigned int          last_rx;              /*   404     4 */
	unsigned char *            dev_addr;             /*   408     4 */
	struct netdev_rx_queue *   _rx;                  /*   412     4 */
	unsigned int               num_rx_queues;        /*   416     4 */
	unsigned int               real_num_rx_queues;   /*   420     4 */
	rx_handler_func_t *        rx_handler;           /*   424     4 */
	void *                     rx_handler_data;      /*   428     4 */
	struct netdev_queue *      ingress_queue;        /*   432     4 */
	unsigned char              broadcast[32];        /*   436    32 */

	/* XXX 44 bytes hole, try to pack */

	/* --- cacheline 8 boundary (512 bytes) --- */
	struct netdev_queue *      _tx;                  /*   512     4 */
	unsigned int               num_tx_queues;        /*   516     4 */
	unsigned int               real_num_tx_queues;   /*   520     4 */
	struct Qdisc *             qdisc;                /*   524     4 */
	long unsigned int          tx_queue_len;         /*   528     4 */
	spinlock_t                 tx_global_lock;       /*   532    16 */
	struct xps_dev_maps *      xps_maps;             /*   548     4 */
	struct cpu_rmap *          rx_cpu_rmap;          /*   552     4 */
	long unsigned int          trans_start;          /*   556     4 */
	int                        watchdog_timeo;       /*   560     4 */
	struct timer_list          watchdog_timer;       /*   564    52 */
	/* --- cacheline 9 boundary (576 bytes) was 40 bytes ago --- */
	int *                      pcpu_refcnt;          /*   616     4 */
	struct list_head           todo_list;            /*   620     8 */
	struct hlist_node          index_hlist;          /*   628     8 */
	struct list_head           link_watch_list;      /*   636     8 */
	/* --- cacheline 10 boundary (640 bytes) was 4 bytes ago --- */
	enum {
		NETREG_UNINITIALIZED = 0,
		NETREG_REGISTERED = 1,
		NETREG_UNREGISTERING = 2,
		NETREG_UNREGISTERED = 3,
		NETREG_RELEASED = 4,
		NETREG_DUMMY = 5,
	} reg_state:8;                                     /*   644     4 */

	/* Bitfield combined with next fields */

	bool                       dismantle;            /*   645     1 */

	/* Bitfield combined with previous fields */

	enum {
		RTNL_LINK_INITIALIZED = 0,
		RTNL_LINK_INITIALIZING = 1,
	} rtnl_link_state:16;                               /*   644     4 */
	void                       (*destructor)(struct net_device *); /*   648     4 */
	struct net *               nd_net;               /*   652     4 */
	union {
		void *             ml_priv;              /*           4 */
		struct pcpu_lstats * lstats;             /*           4 */
		struct pcpu_tstats * tstats;             /*           4 */
		struct pcpu_dstats * dstats;             /*           4 */
		struct pcpu_vstats * vstats;             /*           4 */
	};                                               /*   656     4 */
	struct garp_port *         garp_port;            /*   660     4 */
	struct mrp_port *          mrp_port;             /*   664     4 */

	/* XXX 4 bytes hole, try to pack */

	struct device              dev;                  /*   672   440 */
	/* --- cacheline 17 boundary (1088 bytes) was 24 bytes ago --- */
	const struct attribute_group  * sysfs_groups[4]; /*  1112    16 */
	const struct rtnl_link_ops  * rtnl_link_ops;     /*  1128     4 */
	unsigned int               gso_max_size;         /*  1132     4 */
	u16                        gso_max_segs;         /*  1136     2 */
	u8                         num_tc;               /*  1138     1 */

	/* XXX 1 byte hole, try to pack */

	struct netdev_tc_txq       tc_to_txq[16];        /*  1140    64 */
	/* --- cacheline 18 boundary (1152 bytes) was 52 bytes ago --- */
	u8                         prio_tc_map[16];      /*  1204    16 */
	/* --- cacheline 19 boundary (1216 bytes) was 4 bytes ago --- */
	struct phy_device *        phydev;               /*  1220     4 */
	struct lock_class_key *    qdisc_tx_busylock;    /*  1224     4 */
	int                        group;                /*  1228     4 */
	struct pm_qos_request      pm_qos_req;           /*  1232   136 */
	/* --- cacheline 21 boundary (1344 bytes) was 24 bytes ago --- */

	/* size: 1408, cachelines: 22, members: 102 */
	/* sum members: 1313, holes: 6, sum holes: 55 */
	/* padding: 40 */
};
struct sk_buff_head {
	struct sk_buff *           next;                 /*     0     4 */
	struct sk_buff *           prev;                 /*     4     4 */
	__u32                      qlen;                 /*     8     4 */
	spinlock_t                 lock;                 /*    12    16 */

	/* size: 28, cachelines: 1, members: 4 */
	/* last cacheline: 28 bytes */
};
struct sk_buff {
	struct sk_buff *           next;                 /*     0     4 */
	struct sk_buff *           prev;                 /*     4     4 */
	ktime_t                    tstamp;               /*     8     8 */
	struct sock *              sk;                   /*    16     4 */
	struct net_device *        dev;                  /*    20     4 */
	char                       cb[48];               /*    24    48 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	long unsigned int          _skb_refdst;          /*    72     4 */
	struct sec_path *          sp;                   /*    76     4 */
	unsigned int               len;                  /*    80     4 */
	unsigned int               data_len;             /*    84     4 */
	__u16                      mac_len;              /*    88     2 */
	__u16                      hdr_len;              /*    90     2 */
	union {
		__wsum             csum;                 /*           4 */
		struct {
			__u16      csum_start;           /*    92     2 */
			__u16      csum_offset;          /*    94     2 */
		};                                       /*           4 */
	};                                               /*    92     4 */
	__u32                      priority;             /*    96     4 */
	__u8                       local_df:1;           /*   100: 7  1 */
	__u8                       cloned:1;             /*   100: 6  1 */
	__u8                       ip_summed:2;          /*   100: 4  1 */
	__u8                       nohdr:1;              /*   100: 3  1 */
	__u8                       nfctinfo:3;           /*   100: 0  1 */
	__u8                       pkt_type:3;           /*   101: 5  1 */
	__u8                       fclone:2;             /*   101: 3  1 */
	__u8                       ipvs_property:1;      /*   101: 2  1 */
	__u8                       peeked:1;             /*   101: 1  1 */
	__u8                       nf_trace:1;           /*   101: 0  1 */
	__be16                     protocol;             /*   102     2 */
	void                       (*destructor)(struct sk_buff *); /*   104     4 */
	struct nf_conntrack *      nfct;                 /*   108     4 */
	struct nf_bridge_info *    nf_bridge;            /*   112     4 */
	int                        skb_iif;              /*   116     4 */
	__u32                      rxhash;               /*   120     4 */
	__be16                     vlan_proto;           /*   124     2 */
	__u16                      vlan_tci;             /*   126     2 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	__u16                      tc_index;             /*   128     2 */
	__u16                      tc_verd;              /*   130     2 */
	__u16                      queue_mapping;        /*   132     2 */
	__u8                       ndisc_nodetype:2;     /*   134: 6  1 */
	__u8                       pfmemalloc:1;         /*   134: 5  1 */
	__u8                       ooo_okay:1;           /*   134: 4  1 */
	__u8                       l4_rxhash:1;          /*   134: 3  1 */
	__u8                       wifi_acked_valid:1;   /*   134: 2  1 */
	__u8                       wifi_acked:1;         /*   134: 1  1 */
	__u8                       no_fcs:1;             /*   134: 0  1 */
	__u8                       head_frag:1;          /*   135: 7  1 */
	__u8                       encapsulation:1;      /*   135: 6  1 */

	/* XXX 6 bits hole, try to pack */

	__u32                      secmark;              /*   136     4 */
	union {
		__u32              mark;                 /*           4 */
		__u32              dropcount;            /*           4 */
		__u32              reserved_tailroom;    /*           4 */
	};                                               /*   140     4 */
	sk_buff_data_t             inner_transport_header; /*   144     4 */
	sk_buff_data_t             inner_network_header; /*   148     4 */
	sk_buff_data_t             inner_mac_header;     /*   152     4 */
	sk_buff_data_t             transport_header;     /*   156     4 */
	sk_buff_data_t             network_header;       /*   160     4 */
	sk_buff_data_t             mac_header;           /*   164     4 */
	sk_buff_data_t             tail;                 /*   168     4 */
	sk_buff_data_t             end;                  /*   172     4 */
	unsigned char *            head;                 /*   176     4 */
	unsigned char *            data;                 /*   180     4 */
	unsigned int               truesize;             /*   184     4 */
	atomic_t                   users;                /*   188     4 */
	/* --- cacheline 3 boundary (192 bytes) --- */

	/* size: 192, cachelines: 3, members: 58 */
	/* bit holes: 1, sum bit holes: 6 bits */
};
struct hlist_nulls_head {
	struct hlist_nulls_node *  first;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct hlist_nulls_node {
	struct hlist_nulls_node *  next;                 /*     0     4 */
	struct hlist_nulls_node * * pprev;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct irq_affinity_notify {
	unsigned int               irq;                  /*     0     4 */
	struct kref                kref;                 /*     4     4 */
	struct list_head           list;                 /*     8     8 */
	void                       (*notify)(struct irq_affinity_notify *, const cpumask_t  *); /*    16     4 */
	void                       (*release)(struct kref *); /*    20     4 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct pm_qos_request {
	enum pm_qos_req_type       type;                 /*     0     4 */
	struct cpumask             cpus_affine;          /*     4     4 */
	uint32_t                   irq;                  /*     8     4 */
	struct irq_affinity_notify irq_notify;           /*    12    24 */
	struct plist_node          node;                 /*    36    20 */
	int                        pm_qos_class;         /*    56     4 */
	struct delayed_work        work;                 /*    60    76 */
	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */

	/* size: 136, cachelines: 3, members: 7 */
	/* last cacheline: 8 bytes */
};
struct pm_qos_flags_request {
	struct list_head           node;                 /*     0     8 */
	s32                        flags;                /*     8     4 */

	/* size: 12, cachelines: 1, members: 2 */
	/* last cacheline: 12 bytes */
};
struct dev_pm_qos_request {
	enum dev_pm_qos_req_type   type;                 /*     0     4 */
	union {
		struct pm_qos_request lat;               /*         136 */
		struct pm_qos_flags_request flr;         /*          12 */
	} data;                                          /*     4   136 */
	/* --- cacheline 2 boundary (128 bytes) was 12 bytes ago --- */
	struct device *            dev;                  /*   140     4 */

	/* size: 144, cachelines: 3, members: 3 */
	/* last cacheline: 16 bytes */
};
struct pm_qos_constraints {
	struct plist_head          list;                 /*     0     8 */
	s32                        target_value;         /*     8     4 */
	s32                        target_per_cpu[8];    /*    12    32 */
	s32                        default_value;        /*    44     4 */
	enum pm_qos_type           type;                 /*    48     4 */
	struct blocking_notifier_head * notifiers;       /*    52     4 */

	/* size: 56, cachelines: 1, members: 6 */
	/* last cacheline: 56 bytes */
};
struct pm_qos_flags {
	struct list_head           list;                 /*     0     8 */
	s32                        effective_flags;      /*     8     4 */

	/* size: 12, cachelines: 1, members: 2 */
	/* last cacheline: 12 bytes */
};
struct arm_delay_ops {
	void                       (*delay)(long unsigned int); /*     0     4 */
	void                       (*const_udelay)(long unsigned int); /*     4     4 */
	void                       (*udelay)(long unsigned int); /*     8     4 */
	long unsigned int          ticks_per_jiffy;      /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct dql {
	unsigned int               num_queued;           /*     0     4 */
	unsigned int               adj_limit;            /*     4     4 */
	unsigned int               last_obj_cnt;         /*     8     4 */

	/* XXX 52 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               limit;                /*    64     4 */
	unsigned int               num_completed;        /*    68     4 */
	unsigned int               prev_ovlimit;         /*    72     4 */
	unsigned int               prev_num_queued;      /*    76     4 */
	unsigned int               prev_last_obj_cnt;    /*    80     4 */
	unsigned int               lowest_slack;         /*    84     4 */
	long unsigned int          slack_start_time;     /*    88     4 */
	unsigned int               max_limit;            /*    92     4 */
	unsigned int               min_limit;            /*    96     4 */
	unsigned int               slack_hold_time;      /*   100     4 */

	/* size: 128, cachelines: 2, members: 13 */
	/* sum members: 52, holes: 1, sum holes: 52 */
	/* padding: 24 */
};
struct ethhdr {
	unsigned char              h_dest[6];            /*     0     6 */
	unsigned char              h_source[6];          /*     6     6 */
	__be16                     h_proto;              /*    12     2 */

	/* size: 14, cachelines: 1, members: 3 */
	/* last cacheline: 14 bytes */
};
struct ethtool_cmd {
	__u32                      cmd;                  /*     0     4 */
	__u32                      supported;            /*     4     4 */
	__u32                      advertising;          /*     8     4 */
	__u16                      speed;                /*    12     2 */
	__u8                       duplex;               /*    14     1 */
	__u8                       port;                 /*    15     1 */
	__u8                       phy_address;          /*    16     1 */
	__u8                       transceiver;          /*    17     1 */
	__u8                       autoneg;              /*    18     1 */
	__u8                       mdio_support;         /*    19     1 */
	__u32                      maxtxpkt;             /*    20     4 */
	__u32                      maxrxpkt;             /*    24     4 */
	__u16                      speed_hi;             /*    28     2 */
	__u8                       eth_tp_mdix;          /*    30     1 */
	__u8                       eth_tp_mdix_ctrl;     /*    31     1 */
	__u32                      lp_advertising;       /*    32     4 */
	__u32                      reserved[2];          /*    36     8 */

	/* size: 44, cachelines: 1, members: 17 */
	/* last cacheline: 44 bytes */
};
struct ethtool_drvinfo {
	__u32                      cmd;                  /*     0     4 */
	char                       driver[32];           /*     4    32 */
	char                       version[32];          /*    36    32 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	char                       fw_version[32];       /*    68    32 */
	char                       bus_info[32];         /*   100    32 */
	/* --- cacheline 2 boundary (128 bytes) was 4 bytes ago --- */
	char                       reserved1[32];        /*   132    32 */
	char                       reserved2[12];        /*   164    12 */
	__u32                      n_priv_flags;         /*   176     4 */
	__u32                      n_stats;              /*   180     4 */
	__u32                      testinfo_len;         /*   184     4 */
	__u32                      eedump_len;           /*   188     4 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	__u32                      regdump_len;          /*   192     4 */

	/* size: 196, cachelines: 4, members: 12 */
	/* last cacheline: 4 bytes */
};
struct ethtool_wolinfo {
	__u32                      cmd;                  /*     0     4 */
	__u32                      supported;            /*     4     4 */
	__u32                      wolopts;              /*     8     4 */
	__u8                       sopass[6];            /*    12     6 */

	/* size: 20, cachelines: 1, members: 4 */
	/* padding: 2 */
	/* last cacheline: 20 bytes */
};
struct ethtool_regs {
	__u32                      cmd;                  /*     0     4 */
	__u32                      version;              /*     4     4 */
	__u32                      len;                  /*     8     4 */
	__u8                       data[0];              /*    12     0 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct ethtool_eeprom {
	__u32                      cmd;                  /*     0     4 */
	__u32                      magic;                /*     4     4 */
	__u32                      offset;               /*     8     4 */
	__u32                      len;                  /*    12     4 */
	__u8                       data[0];              /*    16     0 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ethtool_eee {
	__u32                      cmd;                  /*     0     4 */
	__u32                      supported;            /*     4     4 */
	__u32                      advertised;           /*     8     4 */
	__u32                      lp_advertised;        /*    12     4 */
	__u32                      eee_active;           /*    16     4 */
	__u32                      eee_enabled;          /*    20     4 */
	__u32                      tx_lpi_enabled;       /*    24     4 */
	__u32                      tx_lpi_timer;         /*    28     4 */
	__u32                      reserved[2];          /*    32     8 */

	/* size: 40, cachelines: 1, members: 9 */
	/* last cacheline: 40 bytes */
};
struct ethtool_modinfo {
	__u32                      cmd;                  /*     0     4 */
	__u32                      type;                 /*     4     4 */
	__u32                      eeprom_len;           /*     8     4 */
	__u32                      reserved[8];          /*    12    32 */

	/* size: 44, cachelines: 1, members: 4 */
	/* last cacheline: 44 bytes */
};
struct ethtool_coalesce {
	__u32                      cmd;                  /*     0     4 */
	__u32                      rx_coalesce_usecs;    /*     4     4 */
	__u32                      rx_max_coalesced_frames; /*     8     4 */
	__u32                      rx_coalesce_usecs_irq; /*    12     4 */
	__u32                      rx_max_coalesced_frames_irq; /*    16     4 */
	__u32                      tx_coalesce_usecs;    /*    20     4 */
	__u32                      tx_max_coalesced_frames; /*    24     4 */
	__u32                      tx_coalesce_usecs_irq; /*    28     4 */
	__u32                      tx_max_coalesced_frames_irq; /*    32     4 */
	__u32                      stats_block_coalesce_usecs; /*    36     4 */
	__u32                      use_adaptive_rx_coalesce; /*    40     4 */
	__u32                      use_adaptive_tx_coalesce; /*    44     4 */
	__u32                      pkt_rate_low;         /*    48     4 */
	__u32                      rx_coalesce_usecs_low; /*    52     4 */
	__u32                      rx_max_coalesced_frames_low; /*    56     4 */
	__u32                      tx_coalesce_usecs_low; /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	__u32                      tx_max_coalesced_frames_low; /*    64     4 */
	__u32                      pkt_rate_high;        /*    68     4 */
	__u32                      rx_coalesce_usecs_high; /*    72     4 */
	__u32                      rx_max_coalesced_frames_high; /*    76     4 */
	__u32                      tx_coalesce_usecs_high; /*    80     4 */
	__u32                      tx_max_coalesced_frames_high; /*    84     4 */
	__u32                      rate_sample_interval; /*    88     4 */

	/* size: 92, cachelines: 2, members: 23 */
	/* last cacheline: 28 bytes */
};
struct ethtool_ringparam {
	__u32                      cmd;                  /*     0     4 */
	__u32                      rx_max_pending;       /*     4     4 */
	__u32                      rx_mini_max_pending;  /*     8     4 */
	__u32                      rx_jumbo_max_pending; /*    12     4 */
	__u32                      tx_max_pending;       /*    16     4 */
	__u32                      rx_pending;           /*    20     4 */
	__u32                      rx_mini_pending;      /*    24     4 */
	__u32                      rx_jumbo_pending;     /*    28     4 */
	__u32                      tx_pending;           /*    32     4 */

	/* size: 36, cachelines: 1, members: 9 */
	/* last cacheline: 36 bytes */
};
struct ethtool_channels {
	__u32                      cmd;                  /*     0     4 */
	__u32                      max_rx;               /*     4     4 */
	__u32                      max_tx;               /*     8     4 */
	__u32                      max_other;            /*    12     4 */
	__u32                      max_combined;         /*    16     4 */
	__u32                      rx_count;             /*    20     4 */
	__u32                      tx_count;             /*    24     4 */
	__u32                      other_count;          /*    28     4 */
	__u32                      combined_count;       /*    32     4 */

	/* size: 36, cachelines: 1, members: 9 */
	/* last cacheline: 36 bytes */
};
struct ethtool_pauseparam {
	__u32                      cmd;                  /*     0     4 */
	__u32                      autoneg;              /*     4     4 */
	__u32                      rx_pause;             /*     8     4 */
	__u32                      tx_pause;             /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ethtool_test {
	__u32                      cmd;                  /*     0     4 */
	__u32                      flags;                /*     4     4 */
	__u32                      reserved;             /*     8     4 */
	__u32                      len;                  /*    12     4 */
	__u64                      data[0];              /*    16     0 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ethtool_stats {
	__u32                      cmd;                  /*     0     4 */
	__u32                      n_stats;              /*     4     4 */
	__u64                      data[0];              /*     8     0 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ethtool_tcpip4_spec {
	__be32                     ip4src;               /*     0     4 */
	__be32                     ip4dst;               /*     4     4 */
	__be16                     psrc;                 /*     8     2 */
	__be16                     pdst;                 /*    10     2 */
	__u8                       tos;                  /*    12     1 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 16 bytes */
};
struct ethtool_ah_espip4_spec {
	__be32                     ip4src;               /*     0     4 */
	__be32                     ip4dst;               /*     4     4 */
	__be32                     spi;                  /*     8     4 */
	__u8                       tos;                  /*    12     1 */

	/* size: 16, cachelines: 1, members: 4 */
	/* padding: 3 */
	/* last cacheline: 16 bytes */
};
struct ethtool_usrip4_spec {
	__be32                     ip4src;               /*     0     4 */
	__be32                     ip4dst;               /*     4     4 */
	__be32                     l4_4_bytes;           /*     8     4 */
	__u8                       tos;                  /*    12     1 */
	__u8                       ip_ver;               /*    13     1 */
	__u8                       proto;                /*    14     1 */

	/* size: 16, cachelines: 1, members: 6 */
	/* padding: 1 */
	/* last cacheline: 16 bytes */
};
struct ethtool_flow_ext {
	__u8                       padding[2];           /*     0     2 */
	unsigned char              h_dest[6];            /*     2     6 */
	__be16                     vlan_etype;           /*     8     2 */
	__be16                     vlan_tci;             /*    10     2 */
	__be32                     data[2];              /*    12     8 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct ethtool_rx_flow_spec {
	__u32                      flow_type;            /*     0     4 */
	union ethtool_flow_union   h_u;                  /*     4    52 */
	struct ethtool_flow_ext    h_ext;                /*    56    20 */
	/* --- cacheline 1 boundary (64 bytes) was 12 bytes ago --- */
	union ethtool_flow_union   m_u;                  /*    76    52 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct ethtool_flow_ext    m_ext;                /*   128    20 */

	/* XXX 4 bytes hole, try to pack */

	__u64                      ring_cookie;          /*   152     8 */
	__u32                      location;             /*   160     4 */

	/* size: 168, cachelines: 3, members: 7 */
	/* sum members: 160, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct ethtool_rxnfc {
	__u32                      cmd;                  /*     0     4 */
	__u32                      flow_type;            /*     4     4 */
	__u64                      data;                 /*     8     8 */
	struct ethtool_rx_flow_spec fs;                  /*    16   168 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 56 bytes ago --- */
	__u32                      rule_cnt;             /*   184     4 */
	__u32                      rule_locs[0];         /*   188     0 */

	/* size: 192, cachelines: 3, members: 6 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 4 */
};
struct ethtool_flash {
	__u32                      cmd;                  /*     0     4 */
	__u32                      region;               /*     4     4 */
	char                       data[128];            /*     8   128 */
	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */

	/* size: 136, cachelines: 3, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ethtool_dump {
	__u32                      cmd;                  /*     0     4 */
	__u32                      version;              /*     4     4 */
	__u32                      flag;                 /*     8     4 */
	__u32                      len;                  /*    12     4 */
	__u8                       data[0];              /*    16     0 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ethtool_ts_info {
	__u32                      cmd;                  /*     0     4 */
	__u32                      so_timestamping;      /*     4     4 */
	__s32                      phc_index;            /*     8     4 */
	__u32                      tx_types;             /*    12     4 */
	__u32                      tx_reserved[3];       /*    16    12 */
	__u32                      rx_filters;           /*    28     4 */
	__u32                      rx_reserved[3];       /*    32    12 */

	/* size: 44, cachelines: 1, members: 7 */
	/* last cacheline: 44 bytes */
};
struct ethtool_ops {
	int                        (*get_settings)(struct net_device *, struct ethtool_cmd *); /*     0     4 */
	int                        (*set_settings)(struct net_device *, struct ethtool_cmd *); /*     4     4 */
	void                       (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *); /*     8     4 */
	int                        (*get_regs_len)(struct net_device *); /*    12     4 */
	void                       (*get_regs)(struct net_device *, struct ethtool_regs *, void *); /*    16     4 */
	void                       (*get_wol)(struct net_device *, struct ethtool_wolinfo *); /*    20     4 */
	int                        (*set_wol)(struct net_device *, struct ethtool_wolinfo *); /*    24     4 */
	u32                        (*get_msglevel)(struct net_device *); /*    28     4 */
	void                       (*set_msglevel)(struct net_device *, u32); /*    32     4 */
	int                        (*nway_reset)(struct net_device *); /*    36     4 */
	u32                        (*get_link)(struct net_device *); /*    40     4 */
	int                        (*get_eeprom_len)(struct net_device *); /*    44     4 */
	int                        (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *); /*    48     4 */
	int                        (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *); /*    52     4 */
	int                        (*get_coalesce)(struct net_device *, struct ethtool_coalesce *); /*    56     4 */
	int                        (*set_coalesce)(struct net_device *, struct ethtool_coalesce *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*get_ringparam)(struct net_device *, struct ethtool_ringparam *); /*    64     4 */
	int                        (*set_ringparam)(struct net_device *, struct ethtool_ringparam *); /*    68     4 */
	void                       (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *); /*    72     4 */
	int                        (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *); /*    76     4 */
	void                       (*self_test)(struct net_device *, struct ethtool_test *, u64 *); /*    80     4 */
	void                       (*get_strings)(struct net_device *, u32, u8 *); /*    84     4 */
	int                        (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state); /*    88     4 */
	void                       (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *); /*    92     4 */
	int                        (*begin)(struct net_device *); /*    96     4 */
	void                       (*complete)(struct net_device *); /*   100     4 */
	u32                        (*get_priv_flags)(struct net_device *); /*   104     4 */
	int                        (*set_priv_flags)(struct net_device *, u32); /*   108     4 */
	int                        (*get_sset_count)(struct net_device *, int); /*   112     4 */
	int                        (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *); /*   116     4 */
	int                        (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *); /*   120     4 */
	int                        (*flash_device)(struct net_device *, struct ethtool_flash *); /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        (*reset)(struct net_device *, u32 *); /*   128     4 */
	u32                        (*get_rxfh_indir_size)(struct net_device *); /*   132     4 */
	int                        (*get_rxfh_indir)(struct net_device *, u32 *); /*   136     4 */
	int                        (*set_rxfh_indir)(struct net_device *, const u32  *); /*   140     4 */
	void                       (*get_channels)(struct net_device *, struct ethtool_channels *); /*   144     4 */
	int                        (*set_channels)(struct net_device *, struct ethtool_channels *); /*   148     4 */
	int                        (*get_dump_flag)(struct net_device *, struct ethtool_dump *); /*   152     4 */
	int                        (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *); /*   156     4 */
	int                        (*set_dump)(struct net_device *, struct ethtool_dump *); /*   160     4 */
	int                        (*get_ts_info)(struct net_device *, struct ethtool_ts_info *); /*   164     4 */
	int                        (*get_module_info)(struct net_device *, struct ethtool_modinfo *); /*   168     4 */
	int                        (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *); /*   172     4 */
	int                        (*get_eee)(struct net_device *, struct ethtool_eee *); /*   176     4 */
	int                        (*set_eee)(struct net_device *, struct ethtool_eee *); /*   180     4 */

	/* size: 184, cachelines: 3, members: 46 */
	/* last cacheline: 56 bytes */
};
struct netns_core {
	struct ctl_table_header *  sysctl_hdr;           /*     0     4 */
	int                        sysctl_somaxconn;     /*     4     4 */
	struct prot_inuse *        inuse;                /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct u64_stats_sync {
	seqcount_t                 seq;                  /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ipstats_mib {
	u64                        mibs[32];             /*     0   256 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	struct u64_stats_sync      syncp;                /*   256     4 */

	/* size: 264, cachelines: 5, members: 2 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct icmp_mib {
	long unsigned int          mibs[28];             /*     0   112 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */

	/* size: 112, cachelines: 2, members: 1 */
	/* last cacheline: 48 bytes */
};
struct icmpmsg_mib {
	atomic_long_t              mibs[512];            /*     0  2048 */
	/* --- cacheline 32 boundary (2048 bytes) --- */

	/* size: 2048, cachelines: 32, members: 1 */
};
struct icmpv6_mib {
	long unsigned int          mibs[6];              /*     0    24 */

	/* size: 24, cachelines: 1, members: 1 */
	/* last cacheline: 24 bytes */
};
struct icmpv6_mib_device {
	atomic_long_t              mibs[6];              /*     0    24 */

	/* size: 24, cachelines: 1, members: 1 */
	/* last cacheline: 24 bytes */
};
struct icmpv6msg_mib {
	atomic_long_t              mibs[512];            /*     0  2048 */
	/* --- cacheline 32 boundary (2048 bytes) --- */

	/* size: 2048, cachelines: 32, members: 1 */
};
struct icmpv6msg_mib_device {
	atomic_long_t              mibs[512];            /*     0  2048 */
	/* --- cacheline 32 boundary (2048 bytes) --- */

	/* size: 2048, cachelines: 32, members: 1 */
};
struct tcp_mib {
	long unsigned int          mibs[16];             /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct udp_mib {
	long unsigned int          mibs[8];              /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct linux_mib {
	long unsigned int          mibs[95];             /*     0   380 */
	/* --- cacheline 5 boundary (320 bytes) was 60 bytes ago --- */

	/* size: 380, cachelines: 6, members: 1 */
	/* last cacheline: 60 bytes */
};
struct linux_xfrm_mib {
	long unsigned int          mibs[28];             /*     0   112 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */

	/* size: 112, cachelines: 2, members: 1 */
	/* last cacheline: 48 bytes */
};
struct netns_mib {
	struct tcp_mib *           tcp_statistics[1];    /*     0     4 */
	struct ipstats_mib *       ip_statistics[1];     /*     4     4 */
	struct linux_mib *         net_statistics[1];    /*     8     4 */
	struct udp_mib *           udp_statistics[1];    /*    12     4 */
	struct udp_mib *           udplite_statistics[1]; /*    16     4 */
	struct icmp_mib *          icmp_statistics[1];   /*    20     4 */
	struct icmpmsg_mib *       icmpmsg_statistics;   /*    24     4 */
	struct proc_dir_entry *    proc_net_devsnmp6;    /*    28     4 */
	struct udp_mib *           udp_stats_in6[1];     /*    32     4 */
	struct udp_mib *           udplite_stats_in6[1]; /*    36     4 */
	struct ipstats_mib *       ipv6_statistics[1];   /*    40     4 */
	struct icmpv6_mib *        icmpv6_statistics[1]; /*    44     4 */
	struct icmpv6msg_mib *     icmpv6msg_statistics; /*    48     4 */
	struct linux_xfrm_mib *    xfrm_statistics[1];   /*    52     4 */

	/* size: 56, cachelines: 1, members: 14 */
	/* last cacheline: 56 bytes */
};
struct netns_unix {
	int                        sysctl_max_dgram_qlen; /*     0     4 */
	struct ctl_table_header *  ctl;                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct netns_packet {
	struct mutex               sklist_lock;          /*     0    40 */
	struct hlist_head          sklist;               /*    40     4 */

	/* size: 44, cachelines: 1, members: 2 */
	/* last cacheline: 44 bytes */
};
struct netns_frags {
	int                        nqueues;              /*     0     4 */
	struct list_head           lru_list;             /*     4     8 */
	spinlock_t                 lru_lock;             /*    12    16 */

	/* XXX 36 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct percpu_counter      mem;                  /*    64    40 */

	/* XXX last struct has 4 bytes of padding */

	int                        timeout;              /*   104     4 */
	int                        high_thresh;          /*   108     4 */
	int                        low_thresh;           /*   112     4 */

	/* size: 128, cachelines: 2, members: 7 */
	/* sum members: 80, holes: 1, sum holes: 36 */
	/* padding: 12 */
	/* paddings: 1, sum paddings: 4 */
};
struct netns_ipv4 {
	struct ctl_table_header *  forw_hdr;             /*     0     4 */
	struct ctl_table_header *  frags_hdr;            /*     4     4 */
	struct ctl_table_header *  ipv4_hdr;             /*     8     4 */
	struct ctl_table_header *  route_hdr;            /*    12     4 */
	struct ctl_table_header *  xfrm4_hdr;            /*    16     4 */
	struct ipv4_devconf *      devconf_all;          /*    20     4 */
	struct ipv4_devconf *      devconf_dflt;         /*    24     4 */
	struct fib_rules_ops *     rules_ops;            /*    28     4 */
	bool                       fib_has_custom_rules; /*    32     1 */

	/* XXX 3 bytes hole, try to pack */

	struct fib_table *         fib_local;            /*    36     4 */
	struct fib_table *         fib_main;             /*    40     4 */
	struct fib_table *         fib_default;          /*    44     4 */
	struct hlist_head *        fib_table_hash;       /*    48     4 */
	struct sock *              fibnl;                /*    52     4 */
	struct sock * *            icmp_sk;              /*    56     4 */
	struct inet_peer_base *    peers;                /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct tcpm_hash_bucket *  tcp_metrics_hash;     /*    64     4 */
	unsigned int               tcp_metrics_hash_log; /*    68     4 */

	/* XXX 56 bytes hole, try to pack */

	/* --- cacheline 2 boundary (128 bytes) --- */
	struct netns_frags         frags;                /*   128   128 */

	/* XXX last struct has 12 bytes of padding */

	/* --- cacheline 4 boundary (256 bytes) --- */
	struct xt_table *          iptable_filter;       /*   256     4 */
	struct xt_table *          iptable_mangle;       /*   260     4 */
	struct xt_table *          iptable_raw;          /*   264     4 */
	struct xt_table *          arptable_filter;      /*   268     4 */
	struct xt_table *          iptable_security;     /*   272     4 */
	struct xt_table *          nat_table;            /*   276     4 */
	int                        sysctl_icmp_echo_ignore_all; /*   280     4 */
	int                        sysctl_icmp_echo_ignore_broadcasts; /*   284     4 */
	int                        sysctl_icmp_ignore_bogus_error_responses; /*   288     4 */
	int                        sysctl_icmp_ratelimit; /*   292     4 */
	int                        sysctl_icmp_ratemask; /*   296     4 */
	int                        sysctl_icmp_errors_use_inbound_ifaddr; /*   300     4 */
	int                        sysctl_tcp_ecn;       /*   304     4 */
	int                        sysctl_fwmark_reflect; /*   308     4 */
	int                        sysctl_tcp_fwmark_accept; /*   312     4 */
	kgid_t                     sysctl_ping_group_range[2]; /*   316     8 */
	/* --- cacheline 5 boundary (320 bytes) was 4 bytes ago --- */
	long int                   sysctl_tcp_mem[3];    /*   324    12 */
	atomic_t                   dev_addr_genid;       /*   336     4 */

	/* size: 384, cachelines: 6, members: 37 */
	/* sum members: 281, holes: 2, sum holes: 59 */
	/* padding: 44 */
	/* paddings: 1, sum paddings: 12 */
};
struct ipv4_devconf {
	void *                     sysctl;               /*     0     4 */
	int                        data[26];             /*     4   104 */
	/* --- cacheline 1 boundary (64 bytes) was 44 bytes ago --- */
	long unsigned int          state[1];             /*   108     4 */

	/* size: 112, cachelines: 2, members: 3 */
	/* last cacheline: 48 bytes */
};
struct fib_rules_ops {
	int                        family;               /*     0     4 */
	struct list_head           list;                 /*     4     8 */
	int                        rule_size;            /*    12     4 */
	int                        addr_size;            /*    16     4 */
	int                        unresolved_rules;     /*    20     4 */
	int                        nr_goto_rules;        /*    24     4 */
	int                        (*action)(struct fib_rule *, struct flowi *, int, struct fib_lookup_arg *); /*    28     4 */
	int                        (*match)(struct fib_rule *, struct flowi *, int); /*    32     4 */
	int                        (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr * *); /*    36     4 */
	void                       (*delete)(struct fib_rule *); /*    40     4 */
	int                        (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr * *); /*    44     4 */
	int                        (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *); /*    48     4 */
	u32                        (*default_pref)(struct fib_rules_ops *); /*    52     4 */
	size_t                     (*nlmsg_payload)(struct fib_rule *); /*    56     4 */
	void                       (*flush_cache)(struct fib_rules_ops *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        nlgroup;              /*    64     4 */
	const struct nla_policy  * policy;               /*    68     4 */
	struct list_head           rules_list;           /*    72     8 */
	struct module *            owner;                /*    80     4 */
	struct net *               fro_net;              /*    84     4 */
	struct callback_head       rcu;                  /*    88     8 */

	/* size: 96, cachelines: 2, members: 21 */
	/* last cacheline: 32 bytes */
};
struct fib_table {
	struct hlist_node          tb_hlist;             /*     0     8 */
	u32                        tb_id;                /*     8     4 */
	int                        tb_default;           /*    12     4 */
	int                        tb_num_default;       /*    16     4 */
	long unsigned int          tb_data[0];           /*    20     0 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct inet_peer_base {
	struct inet_peer *         root;                 /*     0     4 */
	seqlock_t                  lock;                 /*     4    20 */
	u32                        flush_seq;            /*    24     4 */
	int                        total;                /*    28     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct xt_table {
	struct list_head           list;                 /*     0     8 */
	unsigned int               valid_hooks;          /*     8     4 */
	struct xt_table_info *     private;              /*    12     4 */
	struct module *            me;                   /*    16     4 */
	u_int8_t                   af;                   /*    20     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        priority;             /*    24     4 */
	charconst                  name;                 /*    28    32 */

	/* size: 60, cachelines: 1, members: 7 */
	/* sum members: 57, holes: 1, sum holes: 3 */
	/* last cacheline: 60 bytes */
};
struct dst_ops {
	short unsigned int         family;               /*     0     2 */
	__be16                     protocol;             /*     2     2 */
	unsigned int               gc_thresh;            /*     4     4 */
	int                        (*gc)(struct dst_ops *); /*     8     4 */
	struct dst_entry *         (*check)(struct dst_entry *, __u32); /*    12     4 */
	unsigned int               (*default_advmss)(const struct dst_entry  *); /*    16     4 */
	unsigned int               (*mtu)(const struct dst_entry  *); /*    20     4 */
	u32 *                      (*cow_metrics)(struct dst_entry *, long unsigned int); /*    24     4 */
	void                       (*destroy)(struct dst_entry *); /*    28     4 */
	void                       (*ifdown)(struct dst_entry *, struct net_device *, int); /*    32     4 */
	struct dst_entry *         (*negative_advice)(struct dst_entry *); /*    36     4 */
	void                       (*link_failure)(struct sk_buff *); /*    40     4 */
	void                       (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32); /*    44     4 */
	void                       (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *); /*    48     4 */
	int                        (*local_out)(struct sk_buff *); /*    52     4 */
	struct neighbour *         (*neigh_lookup)(const struct dst_entry  *, struct sk_buff *, const void  *); /*    56     4 */
	struct kmem_cache *        kmem_cachep;          /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct percpu_counter      pcpuc_entries;        /*    64    40 */

	/* XXX last struct has 4 bytes of padding */

	/* size: 128, cachelines: 2, members: 18 */
	/* padding: 24 */
	/* paddings: 1, sum paddings: 4 */
};
struct dst_entry {
	struct callback_head       callback_head;        /*     0     8 */
	struct dst_entry *         child;                /*     8     4 */
	struct net_device *        dev;                  /*    12     4 */
	struct dst_ops *           ops;                  /*    16     4 */
	long unsigned int          _metrics;             /*    20     4 */
	long unsigned int          expires;              /*    24     4 */
	struct dst_entry *         path;                 /*    28     4 */
	struct dst_entry *         from;                 /*    32     4 */
	struct xfrm_state *        xfrm;                 /*    36     4 */
	int                        (*input)(struct sk_buff *); /*    40     4 */
	int                        (*output)(struct sk_buff *); /*    44     4 */
	short unsigned int         flags;                /*    48     2 */
	short unsigned int         pending_confirm;      /*    50     2 */
	short int                  error;                /*    52     2 */
	short int                  obsolete;             /*    54     2 */
	short unsigned int         header_len;           /*    56     2 */
	short unsigned int         trailer_len;          /*    58     2 */
	__u32                      __pad2;               /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	atomic_t                   __refcnt;             /*    64     4 */
	int                        __use;                /*    68     4 */
	long unsigned int          lastuse;              /*    72     4 */
	union {
		struct dst_entry * next;                 /*           4 */
		struct rtable *    rt_next;              /*           4 */
		struct rt6_info *  rt6_next;             /*           4 */
		struct dn_route *  dn_next;              /*           4 */
	};                                               /*    76     4 */

	/* size: 80, cachelines: 2, members: 22 */
	/* last cacheline: 16 bytes */
};
struct neighbour {
	struct neighbour *         next;                 /*     0     4 */
	struct neigh_table *       tbl;                  /*     4     4 */
	struct neigh_parms *       parms;                /*     8     4 */
	long unsigned int          confirmed;            /*    12     4 */
	long unsigned int          updated;              /*    16     4 */
	rwlock_t                   lock;                 /*    20    16 */
	atomic_t                   refcnt;               /*    36     4 */
	struct sk_buff_head        arp_queue;            /*    40    28 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	unsigned int               arp_queue_len_bytes;  /*    68     4 */
	struct timer_list          timer;                /*    72    52 */
	long unsigned int          used;                 /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	atomic_t                   probes;               /*   128     4 */
	__u8                       flags;                /*   132     1 */
	__u8                       nud_state;            /*   133     1 */
	__u8                       type;                 /*   134     1 */
	__u8                       dead;                 /*   135     1 */
	seqlock_t                  ha_lock;              /*   136    20 */
	unsigned char              ha[32];               /*   156    32 */
	struct hh_cache            hh;                   /*   188   120 */
	/* --- cacheline 4 boundary (256 bytes) was 52 bytes ago --- */
	int                        (*output)(struct neighbour *, struct sk_buff *); /*   308     4 */
	const struct neigh_ops  *  ops;                  /*   312     4 */
	struct callback_head       rcu;                  /*   316     8 */
	/* --- cacheline 5 boundary (320 bytes) was 4 bytes ago --- */
	struct net_device *        dev;                  /*   324     4 */
	u8                         primary_key[0];       /*   328     0 */

	/* size: 328, cachelines: 6, members: 24 */
	/* last cacheline: 8 bytes */
};
struct netns_sysctl_ipv6 {
	struct ctl_table_header *  hdr;                  /*     0     4 */
	struct ctl_table_header *  route_hdr;            /*     4     4 */
	struct ctl_table_header *  icmp_hdr;             /*     8     4 */
	struct ctl_table_header *  frags_hdr;            /*    12     4 */
	struct ctl_table_header *  xfrm6_hdr;            /*    16     4 */
	int                        bindv6only;           /*    20     4 */
	int                        flush_delay;          /*    24     4 */
	int                        ip6_rt_max_size;      /*    28     4 */
	int                        ip6_rt_gc_min_interval; /*    32     4 */
	int                        ip6_rt_gc_timeout;    /*    36     4 */
	int                        ip6_rt_gc_interval;   /*    40     4 */
	int                        ip6_rt_gc_elasticity; /*    44     4 */
	int                        ip6_rt_mtu_expires;   /*    48     4 */
	int                        ip6_rt_min_advmss;    /*    52     4 */
	int                        icmpv6_time;          /*    56     4 */
	int                        fwmark_reflect;       /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 16 */
};
struct netns_ipv6 {
	struct netns_sysctl_ipv6   sysctl;               /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ipv6_devconf *      devconf_all;          /*    64     4 */
	struct ipv6_devconf *      devconf_dflt;         /*    68     4 */
	struct inet_peer_base *    peers;                /*    72     4 */

	/* XXX 52 bytes hole, try to pack */

	/* --- cacheline 2 boundary (128 bytes) --- */
	struct netns_frags         frags;                /*   128   128 */

	/* XXX last struct has 12 bytes of padding */

	/* --- cacheline 4 boundary (256 bytes) --- */
	struct xt_table *          ip6table_filter;      /*   256     4 */
	struct xt_table *          ip6table_mangle;      /*   260     4 */
	struct xt_table *          ip6table_raw;         /*   264     4 */
	struct xt_table *          ip6table_security;    /*   268     4 */
	struct xt_table *          ip6table_nat;         /*   272     4 */
	struct rt6_info *          ip6_null_entry;       /*   276     4 */
	struct rt6_statistics *    rt6_stats;            /*   280     4 */
	struct timer_list          ip6_fib_timer;        /*   284    52 */
	/* --- cacheline 5 boundary (320 bytes) was 16 bytes ago --- */
	struct hlist_head *        fib_table_hash;       /*   336     4 */
	struct fib6_table *        fib6_main_tbl;        /*   340     4 */

	/* XXX 40 bytes hole, try to pack */

	/* --- cacheline 6 boundary (384 bytes) --- */
	struct dst_ops             ip6_dst_ops;          /*   384   128 */

	/* XXX last struct has 24 bytes of padding */

	/* --- cacheline 8 boundary (512 bytes) --- */
	unsigned int               ip6_rt_gc_expire;     /*   512     4 */
	long unsigned int          ip6_rt_last_gc;       /*   516     4 */
	struct rt6_info *          ip6_prohibit_entry;   /*   520     4 */
	struct rt6_info *          ip6_blk_hole_entry;   /*   524     4 */
	struct fib6_table *        fib6_local_tbl;       /*   528     4 */
	struct fib_rules_ops *     fib6_rules_ops;       /*   532     4 */
	struct sock * *            icmp_sk;              /*   536     4 */
	struct sock *              ndisc_sk;             /*   540     4 */
	struct sock *              tcp_sk;               /*   544     4 */
	struct sock *              igmp_sk;              /*   548     4 */
	atomic_t                   dev_addr_genid;       /*   552     4 */

	/* size: 576, cachelines: 9, members: 27 */
	/* sum members: 464, holes: 2, sum holes: 92 */
	/* padding: 20 */
	/* paddings: 2, sum paddings: 36 */
};
struct ipv6_devconf {
	__s32                      forwarding;           /*     0     4 */
	__s32                      hop_limit;            /*     4     4 */
	__s32                      mtu6;                 /*     8     4 */
	__s32                      accept_ra;            /*    12     4 */
	__s32                      accept_redirects;     /*    16     4 */
	__s32                      autoconf;             /*    20     4 */
	__s32                      dad_transmits;        /*    24     4 */
	__s32                      rtr_solicits;         /*    28     4 */
	__s32                      rtr_solicit_interval; /*    32     4 */
	__s32                      rtr_solicit_delay;    /*    36     4 */
	__s32                      force_mld_version;    /*    40     4 */
	__s32                      use_tempaddr;         /*    44     4 */
	__s32                      temp_valid_lft;       /*    48     4 */
	__s32                      temp_prefered_lft;    /*    52     4 */
	__s32                      regen_max_retry;      /*    56     4 */
	__s32                      max_desync_factor;    /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	__s32                      max_addresses;        /*    64     4 */
	__s32                      accept_ra_defrtr;     /*    68     4 */
	__s32                      accept_ra_pinfo;      /*    72     4 */
	__s32                      accept_ra_rtr_pref;   /*    76     4 */
	__s32                      rtr_probe_interval;   /*    80     4 */
	__s32                      accept_ra_rt_info_max_plen; /*    84     4 */
	__s32                      accept_ra_rt_table;   /*    88     4 */
	__s32                      proxy_ndp;            /*    92     4 */
	__s32                      accept_source_route;  /*    96     4 */
	__s32                      optimistic_dad;       /*   100     4 */
	__s32                      disable_ipv6;         /*   104     4 */
	__s32                      accept_dad;           /*   108     4 */
	__s32                      force_tllao;          /*   112     4 */
	__s32                      ndisc_notify;         /*   116     4 */
	__s32                      accept_ra_prefix_route; /*   120     4 */
	void *                     sysctl;               /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 32 */
};
struct netns_nf_frag {
	struct netns_sysctl_ipv6   sysctl;               /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct netns_frags         frags;                /*    64   128 */

	/* XXX last struct has 12 bytes of padding */

	/* --- cacheline 3 boundary (192 bytes) --- */

	/* size: 192, cachelines: 3, members: 2 */
	/* paddings: 1, sum paddings: 12 */
};
struct ifmap {
	long unsigned int          mem_start;            /*     0     4 */
	long unsigned int          mem_end;              /*     4     4 */
	short unsigned int         base_addr;            /*     8     2 */
	unsigned char              irq;                  /*    10     1 */
	unsigned char              dma;                  /*    11     1 */
	unsigned char              port;                 /*    12     1 */

	/* size: 16, cachelines: 1, members: 6 */
	/* padding: 3 */
	/* last cacheline: 16 bytes */
};
struct if_settings {
	unsigned int               type;                 /*     0     4 */
	unsigned int               size;                 /*     4     4 */
	union {
		raw_hdlc_proto *   raw_hdlc;             /*           4 */
		cisco_proto *      cisco;                /*           4 */
		fr_proto *         fr;                   /*           4 */
		fr_proto_pvc *     fr_pvc;               /*           4 */
		fr_proto_pvc_info * fr_pvc_info;         /*           4 */
		sync_serial_settings * sync;             /*           4 */
		te1_settings *     te1;                  /*           4 */
	} ifs_ifsu;                                      /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ifreq {
	union {
		char               ifrn_name[16];        /*          16 */
	} ifr_ifrn;                                      /*     0    16 */
	union {
		struct sockaddr    ifru_addr;            /*          16 */
		struct sockaddr    ifru_dstaddr;         /*          16 */
		struct sockaddr    ifru_broadaddr;       /*          16 */
		struct sockaddr    ifru_netmask;         /*          16 */
		struct sockaddr    ifru_hwaddr;          /*          16 */
		short int          ifru_flags;           /*           2 */
		int                ifru_ivalue;          /*           4 */
		int                ifru_mtu;             /*           4 */
		struct ifmap       ifru_map;             /*          16 */
		char               ifru_slave[16];       /*          16 */
		char               ifru_newname[16];     /*          16 */
		void *             ifru_data;            /*           4 */
		struct if_settings ifru_settings;        /*          12 */
	} ifr_ifru;                                      /*    16    16 */

	/* size: 32, cachelines: 1, members: 2 */
	/* last cacheline: 32 bytes */
};
struct nf_hook_ops {
	struct list_head           list;                 /*     0     8 */
	nf_hookfn *                hook;                 /*     8     4 */
	struct module *            owner;                /*    12     4 */
	u_int8_t                   pf;                   /*    16     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               hooknum;              /*    20     4 */
	int                        priority;             /*    24     4 */

	/* size: 28, cachelines: 1, members: 6 */
	/* sum members: 25, holes: 1, sum holes: 3 */
	/* last cacheline: 28 bytes */
};
struct nf_sockopt_ops {
	struct list_head           list;                 /*     0     8 */
	u_int8_t                   pf;                   /*     8     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        set_optmin;           /*    12     4 */
	int                        set_optmax;           /*    16     4 */
	int                        (*set)(struct sock *, int, void *, unsigned int); /*    20     4 */
	int                        get_optmin;           /*    24     4 */
	int                        get_optmax;           /*    28     4 */
	int                        (*get)(struct sock *, int, void *, int *); /*    32     4 */
	struct module *            owner;                /*    36     4 */

	/* size: 40, cachelines: 1, members: 9 */
	/* sum members: 37, holes: 1, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct nf_afinfo {
	short unsigned int         family;               /*     0     2 */

	/* XXX 2 bytes hole, try to pack */

	__sum16                    (*checksum)(struct sk_buff *, unsigned int, unsigned int, u_int8_t); /*     4     4 */
	__sum16                    (*checksum_partial)(struct sk_buff *, unsigned int, unsigned int, unsigned int, u_int8_t); /*     8     4 */
	int                        (*route)(struct net *, struct dst_entry * *, struct flowi *, bool); /*    12     4 */
	void                       (*saveroute)(const struct sk_buff  *, struct nf_queue_entry *); /*    16     4 */
	int                        (*reroute)(struct sk_buff *, const struct nf_queue_entry  *); /*    20     4 */
	int                        route_key_size;       /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* sum members: 26, holes: 1, sum holes: 2 */
	/* last cacheline: 28 bytes */
};
struct flowi {
	union {
		struct flowi_common __fl_common;         /*          24 */
		struct flowi4      ip4;                  /*          36 */
		struct flowi6      ip6;                  /*          64 */
		struct flowidn     dn;                   /*          32 */
	} u;                                             /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct flowi_common {
	int                        flowic_oif;           /*     0     4 */
	int                        flowic_iif;           /*     4     4 */
	__u32                      flowic_mark;          /*     8     4 */
	__u8                       flowic_tos;           /*    12     1 */
	__u8                       flowic_scope;         /*    13     1 */
	__u8                       flowic_proto;         /*    14     1 */
	__u8                       flowic_flags;         /*    15     1 */
	__u32                      flowic_secid;         /*    16     4 */
	kuid_t                     flowic_uid;           /*    20     4 */

	/* size: 24, cachelines: 1, members: 9 */
	/* last cacheline: 24 bytes */
};
struct flowi4 {
	struct flowi_common        __fl_common;          /*     0    24 */
	__be32                     saddr;                /*    24     4 */
	__be32                     daddr;                /*    28     4 */
	union flowi_uli            uli;                  /*    32     4 */

	/* size: 36, cachelines: 1, members: 4 */
	/* last cacheline: 36 bytes */
};
struct flowi6 {
	struct flowi_common        __fl_common;          /*     0    24 */
	struct in6_addr            daddr;                /*    24    16 */
	struct in6_addr            saddr;                /*    40    16 */
	__be32                     flowlabel;            /*    56     4 */
	union flowi_uli            uli;                  /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 5 */
};
struct flowidn {
	struct flowi_common        __fl_common;          /*     0    24 */
	__le16                     daddr;                /*    24     2 */
	__le16                     saddr;                /*    26     2 */
	union flowi_uli            uli;                  /*    28     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct nlattr {
	__u16                      nla_len;              /*     0     2 */
	__u16                      nla_type;             /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct netns_nf {
	struct proc_dir_entry *    proc_netfilter;       /*     0     4 */
	const struct nf_logger  *  nf_loggers[13];       /*     4    52 */
	struct ctl_table_header *  nf_log_dir_header;    /*    56     4 */

	/* size: 60, cachelines: 1, members: 3 */
	/* last cacheline: 60 bytes */
};
struct netns_xt {
	struct list_head           tables[13];           /*     0   104 */
	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
	bool                       notrack_deprecated_warning; /*   104     1 */

	/* XXX 3 bytes hole, try to pack */

	struct ebt_table *         broute_table;         /*   108     4 */
	struct ebt_table *         frame_filter;         /*   112     4 */
	struct ebt_table *         frame_nat;            /*   116     4 */

	/* size: 120, cachelines: 2, members: 5 */
	/* sum members: 117, holes: 1, sum holes: 3 */
	/* last cacheline: 56 bytes */
};
struct nf_proto_net {
	struct ctl_table_header *  ctl_table_header;     /*     0     4 */
	struct ctl_table *         ctl_table;            /*     4     4 */
	struct ctl_table_header *  ctl_compat_header;    /*     8     4 */
	struct ctl_table *         ctl_compat_table;     /*    12     4 */
	unsigned int               users;                /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct nf_generic_net {
	struct nf_proto_net        pn;                   /*     0    20 */
	unsigned int               timeout;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct nf_tcp_net {
	struct nf_proto_net        pn;                   /*     0    20 */
	unsigned int               timeouts[14];         /*    20    56 */
	/* --- cacheline 1 boundary (64 bytes) was 12 bytes ago --- */
	unsigned int               tcp_loose;            /*    76     4 */
	unsigned int               tcp_be_liberal;       /*    80     4 */
	unsigned int               tcp_max_retrans;      /*    84     4 */

	/* size: 88, cachelines: 2, members: 5 */
	/* last cacheline: 24 bytes */
};
struct nf_udp_net {
	struct nf_proto_net        pn;                   /*     0    20 */
	unsigned int               timeouts[2];          /*    20     8 */

	/* size: 28, cachelines: 1, members: 2 */
	/* last cacheline: 28 bytes */
};
struct nf_icmp_net {
	struct nf_proto_net        pn;                   /*     0    20 */
	unsigned int               timeout;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct nf_ip_net {
	struct nf_generic_net      generic;              /*     0    24 */
	struct nf_tcp_net          tcp;                  /*    24    88 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */
	struct nf_udp_net          udp;                  /*   112    28 */
	/* --- cacheline 2 boundary (128 bytes) was 12 bytes ago --- */
	struct nf_icmp_net         icmp;                 /*   140    24 */
	struct nf_icmp_net         icmpv6;               /*   164    24 */
	struct ctl_table_header *  ctl_table_header;     /*   188     4 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ctl_table *         ctl_table;            /*   192     4 */

	/* size: 196, cachelines: 4, members: 7 */
	/* last cacheline: 4 bytes */
};
struct netns_ct {
	atomic_t                   count;                /*     0     4 */
	unsigned int               expect_count;         /*     4     4 */
	unsigned int               htable_size;          /*     8     4 */
	struct kmem_cache *        nf_conntrack_cachep;  /*    12     4 */
	struct hlist_nulls_head *  hash;                 /*    16     4 */
	struct hlist_head *        expect_hash;          /*    20     4 */
	struct hlist_nulls_head    unconfirmed;          /*    24     4 */
	struct hlist_nulls_head    dying;                /*    28     4 */
	struct hlist_nulls_head    tmpl;                 /*    32     4 */
	struct ip_conntrack_stat * stat;                 /*    36     4 */
	struct nf_ct_event_notifier * nf_conntrack_event_cb; /*    40     4 */
	struct nf_exp_event_notifier * nf_expect_event_cb; /*    44     4 */
	int                        sysctl_events;        /*    48     4 */
	unsigned int               sysctl_events_retry_timeout; /*    52     4 */
	int                        sysctl_acct;          /*    56     4 */
	int                        sysctl_tstamp;        /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        sysctl_checksum;      /*    64     4 */
	unsigned int               sysctl_log_invalid;   /*    68     4 */
	int                        sysctl_auto_assign_helper; /*    72     4 */
	bool                       auto_assign_helper_warned; /*    76     1 */

	/* XXX 3 bytes hole, try to pack */

	struct nf_ip_net           nf_ct_proto;          /*    80   196 */
	/* --- cacheline 4 boundary (256 bytes) was 20 bytes ago --- */
	struct hlist_head *        nat_bysource;         /*   276     4 */
	unsigned int               nat_htable_size;      /*   280     4 */
	struct ctl_table_header *  sysctl_header;        /*   284     4 */
	struct ctl_table_header *  acct_sysctl_header;   /*   288     4 */
	struct ctl_table_header *  tstamp_sysctl_header; /*   292     4 */
	struct ctl_table_header *  event_sysctl_header;  /*   296     4 */
	struct ctl_table_header *  helper_sysctl_header; /*   300     4 */
	char *                     slabname;             /*   304     4 */

	/* size: 308, cachelines: 5, members: 29 */
	/* sum members: 305, holes: 1, sum holes: 3 */
	/* last cacheline: 52 bytes */
};
struct xfrm_policy_hash {
	struct hlist_head *        table;                /*     0     4 */
	unsigned int               hmask;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct netns_xfrm {
	struct list_head           state_all;            /*     0     8 */
	struct hlist_head *        state_bydst;          /*     8     4 */
	struct hlist_head *        state_bysrc;          /*    12     4 */
	struct hlist_head *        state_byspi;          /*    16     4 */
	unsigned int               state_hmask;          /*    20     4 */
	unsigned int               state_num;            /*    24     4 */
	struct work_struct         state_hash_work;      /*    28    16 */
	struct hlist_head          state_gc_list;        /*    44     4 */
	struct work_struct         state_gc_work;        /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	wait_queue_head_t          km_waitq;             /*    64    24 */
	struct list_head           policy_all;           /*    88     8 */
	struct hlist_head *        policy_byidx;         /*    96     4 */
	unsigned int               policy_idx_hmask;     /*   100     4 */
	struct hlist_head          policy_inexact[6];    /*   104    24 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct xfrm_policy_hash    policy_bydst[6];      /*   128    48 */
	unsigned int               policy_count[6];      /*   176    24 */
	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	struct work_struct         policy_hash_work;     /*   200    16 */
	struct sock *              nlsk;                 /*   216     4 */
	struct sock *              nlsk_stash;           /*   220     4 */
	u32                        sysctl_aevent_etime;  /*   224     4 */
	u32                        sysctl_aevent_rseqth; /*   228     4 */
	int                        sysctl_larval_drop;   /*   232     4 */
	u32                        sysctl_acq_expires;   /*   236     4 */
	struct ctl_table_header *  sysctl_hdr;           /*   240     4 */

	/* XXX 12 bytes hole, try to pack */

	/* --- cacheline 4 boundary (256 bytes) --- */
	struct dst_ops             xfrm4_dst_ops;        /*   256   128 */

	/* XXX last struct has 24 bytes of padding */

	/* --- cacheline 6 boundary (384 bytes) --- */
	struct dst_ops             xfrm6_dst_ops;        /*   384   128 */

	/* XXX last struct has 24 bytes of padding */

	/* --- cacheline 8 boundary (512 bytes) --- */

	/* size: 512, cachelines: 8, members: 26 */
	/* sum members: 500, holes: 1, sum holes: 12 */
	/* paddings: 2, sum paddings: 48 */
};
struct idr_layer {
	int                        prefix;               /*     0     4 */
	long unsigned int          bitmap[8];            /*     4    32 */
	struct idr_layer *         ary[256];             /*    36  1024 */
	/* --- cacheline 16 boundary (1024 bytes) was 36 bytes ago --- */
	int                        count;                /*  1060     4 */
	int                        layer;                /*  1064     4 */
	struct callback_head       callback_head;        /*  1068     8 */

	/* size: 1076, cachelines: 17, members: 6 */
	/* last cacheline: 52 bytes */
};
struct idr {
	struct idr_layer *         hint;                 /*     0     4 */
	struct idr_layer *         top;                  /*     4     4 */
	struct idr_layer *         id_free;              /*     8     4 */
	int                        layers;               /*    12     4 */
	int                        id_free_cnt;          /*    16     4 */
	int                        cur;                  /*    20     4 */
	spinlock_t                 lock;                 /*    24    16 */

	/* size: 40, cachelines: 1, members: 7 */
	/* last cacheline: 40 bytes */
};
struct ida_bitmap {
	long int                   nr_busy;              /*     0     4 */
	long unsigned int          bitmap[31];           /*     4   124 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 2 */
};
struct ida {
	struct idr                 idr;                  /*     0    40 */
	struct ida_bitmap *        free_bitmap;          /*    40     4 */

	/* size: 44, cachelines: 1, members: 2 */
	/* last cacheline: 44 bytes */
};
struct simple_xattrs {
	struct list_head           head;                 /*     0     8 */
	spinlock_t                 lock;                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct cgroup_subsys_state {
	struct cgroup *            cgroup;               /*     0     4 */
	atomic_t                   refcnt;               /*     4     4 */
	long unsigned int          flags;                /*     8     4 */
	struct css_id *            id;                   /*    12     4 */
	struct work_struct         dput_work;            /*    16    16 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct cgroup {
	long unsigned int          flags;                /*     0     4 */
	atomic_t                   count;                /*     4     4 */
	int                        id;                   /*     8     4 */
	struct list_head           sibling;              /*    12     8 */
	struct list_head           children;             /*    20     8 */
	struct list_head           files;                /*    28     8 */
	struct cgroup *            parent;               /*    36     4 */
	struct dentry *            dentry;               /*    40     4 */
	struct cgroup_name *       name;                 /*    44     4 */
	struct cgroup_subsys_state * subsys[4];          /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct cgroupfs_root *     root;                 /*    64     4 */
	struct list_head           css_sets;             /*    68     8 */
	struct list_head           allcg_node;           /*    76     8 */
	struct list_head           cft_q_node;           /*    84     8 */
	struct list_head           release_list;         /*    92     8 */
	struct list_head           pidlists;             /*   100     8 */
	struct mutex               pidlist_mutex;        /*   108    40 */
	/* --- cacheline 2 boundary (128 bytes) was 20 bytes ago --- */
	struct callback_head       callback_head;        /*   148     8 */
	struct work_struct         free_work;            /*   156    16 */
	struct list_head           event_list;           /*   172     8 */
	spinlock_t                 event_list_lock;      /*   180    16 */
	/* --- cacheline 3 boundary (192 bytes) was 4 bytes ago --- */
	struct simple_xattrs       xattrs;               /*   196    24 */

	/* size: 220, cachelines: 4, members: 22 */
	/* last cacheline: 28 bytes */
};
struct cgroup_name {
	struct callback_head       callback_head;        /*     0     8 */
	char                       name[0];              /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct cgroupfs_root {
	struct super_block *       sb;                   /*     0     4 */
	long unsigned int          subsys_mask;          /*     4     4 */
	int                        hierarchy_id;         /*     8     4 */
	long unsigned int          actual_subsys_mask;   /*    12     4 */
	struct list_head           subsys_list;          /*    16     8 */
	struct cgroup              top_cgroup;           /*    24   220 */
	/* --- cacheline 3 boundary (192 bytes) was 52 bytes ago --- */
	int                        number_of_cgroups;    /*   244     4 */
	struct list_head           root_list;            /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	struct list_head           allcg_list;           /*   256     8 */
	long unsigned int          flags;                /*   264     4 */
	struct ida                 cgroup_ida;           /*   268    44 */
	char                       release_agent_path[4096]; /*   312  4096 */
	/* --- cacheline 68 boundary (4352 bytes) was 56 bytes ago --- */
	char                       name[64];             /*  4408    64 */
	/* --- cacheline 69 boundary (4416 bytes) was 56 bytes ago --- */

	/* size: 4472, cachelines: 70, members: 13 */
	/* last cacheline: 56 bytes */
};
struct mempool_s {
	spinlock_t                 lock;                 /*     0    16 */
	int                        min_nr;               /*    16     4 */
	int                        curr_nr;              /*    20     4 */
	void * *                   elements;             /*    24     4 */
	void *                     pool_data;            /*    28     4 */
	mempool_alloc_t *          alloc;                /*    32     4 */
	mempool_free_t *           free;                 /*    36     4 */
	wait_queue_head_t          wait;                 /*    40    24 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
};
struct io_cq {
	struct request_queue *     q;                    /*     0     4 */
	struct io_context *        ioc;                  /*     4     4 */
	union {
		struct list_head   q_node;               /*           8 */
		struct kmem_cache * __rcu_icq_cache;     /*           4 */
	};                                               /*     8     8 */
	union {
		struct hlist_node  ioc_node;             /*           8 */
		struct callback_head __rcu_head;         /*           8 */
	};                                               /*    16     8 */
	unsigned int               flags;                /*    24     4 */

	/* size: 28, cachelines: 1, members: 5 */
	/* last cacheline: 28 bytes */
};
struct request_sock {
	struct request_sock *      dl_next;              /*     0     4 */
	u16                        mss;                  /*     4     2 */
	u8                         num_retrans;          /*     6     1 */
	u8                         cookie_ts:1;          /*     7: 7  1 */
	u8                         num_timeout:7;        /*     7: 0  1 */
	u32                        window_clamp;         /*     8     4 */
	u32                        rcv_wnd;              /*    12     4 */
	u32                        ts_recent;            /*    16     4 */
	long unsigned int          expires;              /*    20     4 */
	const struct request_sock_ops  * rsk_ops;        /*    24     4 */
	struct sock *              sk;                   /*    28     4 */
	u32                        secid;                /*    32     4 */
	u32                        peer_secid;           /*    36     4 */

	/* size: 40, cachelines: 1, members: 13 */
	/* last cacheline: 40 bytes */
};
struct nlmsghdr {
	__u32                      nlmsg_len;            /*     0     4 */
	__u16                      nlmsg_type;           /*     4     2 */
	__u16                      nlmsg_flags;          /*     6     2 */
	__u32                      nlmsg_seq;            /*     8     4 */
	__u32                      nlmsg_pid;            /*    12     4 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct netlink_callback {
	struct sk_buff *           skb;                  /*     0     4 */
	const struct nlmsghdr  *   nlh;                  /*     4     4 */
	int                        (*dump)(struct sk_buff *, struct netlink_callback *); /*     8     4 */
	int                        (*done)(struct netlink_callback *); /*    12     4 */
	void *                     data;                 /*    16     4 */
	struct module *            module;               /*    20     4 */
	u16                        family;               /*    24     2 */
	u16                        min_dump_alloc;       /*    26     2 */
	unsigned int               prev_seq;             /*    28     4 */
	unsigned int               seq;                  /*    32     4 */
	long int                   args[6];              /*    36    24 */

	/* size: 60, cachelines: 1, members: 11 */
	/* last cacheline: 60 bytes */
};
struct ndmsg {
	__u8                       ndm_family;           /*     0     1 */
	__u8                       ndm_pad1;             /*     1     1 */
	__u16                      ndm_pad2;             /*     2     2 */
	__s32                      ndm_ifindex;          /*     4     4 */
	__u16                      ndm_state;            /*     8     2 */
	__u8                       ndm_flags;            /*    10     1 */
	__u8                       ndm_type;             /*    11     1 */

	/* size: 12, cachelines: 1, members: 7 */
	/* last cacheline: 12 bytes */
};
struct tpacket_stats {
	unsigned int               tp_packets;           /*     0     4 */
	unsigned int               tp_drops;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct tpacket_stats_v3 {
	unsigned int               tp_packets;           /*     0     4 */
	unsigned int               tp_drops;             /*     4     4 */
	unsigned int               tp_freeze_q_cnt;      /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct rtnl_link_stats64 {
	__u64                      rx_packets;           /*     0     8 */
	__u64                      tx_packets;           /*     8     8 */
	__u64                      rx_bytes;             /*    16     8 */
	__u64                      tx_bytes;             /*    24     8 */
	__u64                      rx_errors;            /*    32     8 */
	__u64                      tx_errors;            /*    40     8 */
	__u64                      rx_dropped;           /*    48     8 */
	__u64                      tx_dropped;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	__u64                      multicast;            /*    64     8 */
	__u64                      collisions;           /*    72     8 */
	__u64                      rx_length_errors;     /*    80     8 */
	__u64                      rx_over_errors;       /*    88     8 */
	__u64                      rx_crc_errors;        /*    96     8 */
	__u64                      rx_frame_errors;      /*   104     8 */
	__u64                      rx_fifo_errors;       /*   112     8 */
	__u64                      rx_missed_errors;     /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	__u64                      tx_aborted_errors;    /*   128     8 */
	__u64                      tx_carrier_errors;    /*   136     8 */
	__u64                      tx_fifo_errors;       /*   144     8 */
	__u64                      tx_heartbeat_errors;  /*   152     8 */
	__u64                      tx_window_errors;     /*   160     8 */
	__u64                      rx_compressed;        /*   168     8 */
	__u64                      tx_compressed;        /*   176     8 */

	/* size: 184, cachelines: 3, members: 23 */
	/* last cacheline: 56 bytes */
};
struct ifla_vf_info {
	__u32                      vf;                   /*     0     4 */
	__u8                       mac[32];              /*     4    32 */
	__u32                      vlan;                 /*    36     4 */
	__u32                      qos;                  /*    40     4 */
	__u32                      tx_rate;              /*    44     4 */
	__u32                      spoofchk;             /*    48     4 */

	/* size: 52, cachelines: 1, members: 6 */
	/* last cacheline: 52 bytes */
};
struct net_device_stats {
	long unsigned int          rx_packets;           /*     0     4 */
	long unsigned int          tx_packets;           /*     4     4 */
	long unsigned int          rx_bytes;             /*     8     4 */
	long unsigned int          tx_bytes;             /*    12     4 */
	long unsigned int          rx_errors;            /*    16     4 */
	long unsigned int          tx_errors;            /*    20     4 */
	long unsigned int          rx_dropped;           /*    24     4 */
	long unsigned int          tx_dropped;           /*    28     4 */
	long unsigned int          multicast;            /*    32     4 */
	long unsigned int          collisions;           /*    36     4 */
	long unsigned int          rx_length_errors;     /*    40     4 */
	long unsigned int          rx_over_errors;       /*    44     4 */
	long unsigned int          rx_crc_errors;        /*    48     4 */
	long unsigned int          rx_frame_errors;      /*    52     4 */
	long unsigned int          rx_fifo_errors;       /*    56     4 */
	long unsigned int          rx_missed_errors;     /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long unsigned int          tx_aborted_errors;    /*    64     4 */
	long unsigned int          tx_carrier_errors;    /*    68     4 */
	long unsigned int          tx_fifo_errors;       /*    72     4 */
	long unsigned int          tx_heartbeat_errors;  /*    76     4 */
	long unsigned int          tx_window_errors;     /*    80     4 */
	long unsigned int          rx_compressed;        /*    84     4 */
	long unsigned int          tx_compressed;        /*    88     4 */

	/* size: 92, cachelines: 2, members: 23 */
	/* last cacheline: 28 bytes */
};
struct netdev_hw_addr_list {
	struct list_head           list;                 /*     0     8 */
	int                        count;                /*     8     4 */

	/* size: 12, cachelines: 1, members: 2 */
	/* last cacheline: 12 bytes */
};
struct hh_cache {
	u16                        hh_len;               /*     0     2 */
	u16                        __pad;                /*     2     2 */
	seqlock_t                  hh_lock;              /*     4    20 */
	long unsigned int          hh_data[24];          /*    24    96 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */

	/* size: 120, cachelines: 2, members: 4 */
	/* last cacheline: 56 bytes */
};
struct header_ops {
	int                        (*create)(struct sk_buff *, struct net_device *, short unsigned int, const void  *, const void  *, unsigned int); /*     0     4 */
	int                        (*parse)(const struct sk_buff  *, unsigned char *); /*     4     4 */
	int                        (*rebuild)(struct sk_buff *); /*     8     4 */
	int                        (*cache)(const struct neighbour  *, struct hh_cache *, __be16); /*    12     4 */
	void                       (*cache_update)(struct hh_cache *, const struct net_device  *, const unsigned char  *); /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct netdev_queue {
	struct net_device *        dev;                  /*     0     4 */
	struct Qdisc *             qdisc;                /*     4     4 */
	struct Qdisc *             qdisc_sleeping;       /*     8     4 */
	struct kobject             kobj;                 /*    12    36 */

	/* XXX 16 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	spinlock_t                 _xmit_lock;           /*    64    16 */
	int                        xmit_lock_owner;      /*    80     4 */
	long unsigned int          trans_start;          /*    84     4 */
	long unsigned int          trans_timeout;        /*    88     4 */
	long unsigned int          state;                /*    92     4 */

	/* XXX 32 bytes hole, try to pack */

	/* --- cacheline 2 boundary (128 bytes) --- */
	struct dql                 dql;                  /*   128   128 */

	/* XXX last struct has 24 bytes of padding */

	/* --- cacheline 4 boundary (256 bytes) --- */

	/* size: 256, cachelines: 4, members: 10 */
	/* sum members: 208, holes: 2, sum holes: 48 */
	/* paddings: 1, sum paddings: 24 */
};
struct Qdisc {
	int                        (*enqueue)(struct sk_buff *, struct Qdisc *); /*     0     4 */
	struct sk_buff *           (*dequeue)(struct Qdisc *); /*     4     4 */
	unsigned int               flags;                /*     8     4 */
	int                        padded;               /*    12     4 */
	const struct Qdisc_ops  *  ops;                  /*    16     4 */
	struct qdisc_size_table *  stab;                 /*    20     4 */
	struct list_head           list;                 /*    24     8 */
	u32                        handle;               /*    32     4 */
	u32                        parent;               /*    36     4 */
	atomic_t                   refcnt;               /*    40     4 */
	struct gnet_stats_rate_est rate_est;             /*    44     8 */
	int                        (*reshape_fail)(struct sk_buff *, struct Qdisc *); /*    52     4 */
	void *                     u32_node;             /*    56     4 */
	struct Qdisc *             __parent;             /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct netdev_queue *      dev_queue;            /*    64     4 */
	struct Qdisc *             next_sched;           /*    68     4 */
	struct sk_buff *           gso_skb;              /*    72     4 */
	long unsigned int          state;                /*    76     4 */
	struct sk_buff_head        q;                    /*    80    28 */
	struct gnet_stats_basic_packed bstats;           /*   108    12 */
	unsigned int               __state;              /*   120     4 */
	struct gnet_stats_queue    qstats;               /*   124    20 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	struct callback_head       callback_head;        /*   144     8 */
	spinlock_t                 busylock;             /*   152    16 */
	u32                        limit;                /*   168     4 */

	/* size: 172, cachelines: 3, members: 25 */
	/* last cacheline: 44 bytes */
};
struct rps_map {
	unsigned int               len;                  /*     0     4 */
	struct callback_head       rcu;                  /*     4     8 */
	u16                        cpus[0];              /*    12     0 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct rps_dev_flow {
	u16                        cpu;                  /*     0     2 */
	u16                        filter;               /*     2     2 */
	unsigned int               last_qtail;           /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct rps_dev_flow_table {
	unsigned int               mask;                 /*     0     4 */
	struct callback_head       rcu;                  /*     4     8 */
	struct rps_dev_flow        flows[0];             /*    12     0 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct rps_sock_flow_table {
	unsigned int               mask;                 /*     0     4 */
	u16                        ents[0];              /*     4     0 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct netdev_rx_queue {
	struct rps_map *           rps_map;              /*     0     4 */
	struct rps_dev_flow_table * rps_flow_table;      /*     4     4 */
	struct kobject             kobj;                 /*     8    36 */
	struct net_device *        dev;                  /*    44     4 */

	/* size: 64, cachelines: 1, members: 4 */
	/* padding: 16 */
};
struct xps_map {
	unsigned int               len;                  /*     0     4 */
	unsigned int               alloc_len;            /*     4     4 */
	struct callback_head       rcu;                  /*     8     8 */
	u16                        queues[0];            /*    16     0 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct xps_dev_maps {
	struct callback_head       rcu;                  /*     0     8 */
	struct xps_map *           cpu_map[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct netdev_tc_txq {
	u16                        count;                /*     0     2 */
	u16                        offset;               /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct net_device_ops {
	int                        (*ndo_init)(struct net_device *); /*     0     4 */
	void                       (*ndo_uninit)(struct net_device *); /*     4     4 */
	int                        (*ndo_open)(struct net_device *); /*     8     4 */
	int                        (*ndo_stop)(struct net_device *); /*    12     4 */
	netdev_tx_t                (*ndo_start_xmit)(struct sk_buff *, struct net_device *); /*    16     4 */
	u16                        (*ndo_select_queue)(struct net_device *, struct sk_buff *); /*    20     4 */
	void                       (*ndo_change_rx_flags)(struct net_device *, int); /*    24     4 */
	void                       (*ndo_set_rx_mode)(struct net_device *); /*    28     4 */
	int                        (*ndo_set_mac_address)(struct net_device *, void *); /*    32     4 */
	int                        (*ndo_validate_addr)(struct net_device *); /*    36     4 */
	int                        (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int); /*    40     4 */
	int                        (*ndo_set_config)(struct net_device *, struct ifmap *); /*    44     4 */
	int                        (*ndo_change_mtu)(struct net_device *, int); /*    48     4 */
	int                        (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *); /*    52     4 */
	void                       (*ndo_tx_timeout)(struct net_device *); /*    56     4 */
	struct rtnl_link_stats64 * (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct net_device_stats *  (*ndo_get_stats)(struct net_device *); /*    64     4 */
	int                        (*ndo_vlan_rx_add_vid)(struct net_device *, __be16, u16); /*    68     4 */
	int                        (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16, u16); /*    72     4 */
	int                        (*ndo_set_vf_mac)(struct net_device *, int, u8 *); /*    76     4 */
	int                        (*ndo_set_vf_vlan)(struct net_device *, int, u16, u8); /*    80     4 */
	int                        (*ndo_set_vf_tx_rate)(struct net_device *, int, int); /*    84     4 */
	int                        (*ndo_set_vf_spoofchk)(struct net_device *, int, bool); /*    88     4 */
	int                        (*ndo_get_vf_config)(struct net_device *, int, struct ifla_vf_info *); /*    92     4 */
	int                        (*ndo_set_vf_port)(struct net_device *, int, struct nlattr * *); /*    96     4 */
	int                        (*ndo_get_vf_port)(struct net_device *, int, struct sk_buff *); /*   100     4 */
	int                        (*ndo_setup_tc)(struct net_device *, u8); /*   104     4 */
	int                        (*ndo_rx_flow_steer)(struct net_device *, const struct sk_buff  *, u16, u32); /*   108     4 */
	int                        (*ndo_add_slave)(struct net_device *, struct net_device *); /*   112     4 */
	int                        (*ndo_del_slave)(struct net_device *, struct net_device *); /*   116     4 */
	netdev_features_t          (*ndo_fix_features)(struct net_device *, netdev_features_t); /*   120     4 */
	int                        (*ndo_set_features)(struct net_device *, netdev_features_t); /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        (*ndo_neigh_construct)(struct neighbour *); /*   128     4 */
	void                       (*ndo_neigh_destroy)(struct neighbour *); /*   132     4 */
	int                        (*ndo_fdb_add)(struct ndmsg *, struct nlattr * *, struct net_device *, const unsigned char  *, u16); /*   136     4 */
	int                        (*ndo_fdb_del)(struct ndmsg *, struct nlattr * *, struct net_device *, const unsigned char  *); /*   140     4 */
	int                        (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, int); /*   144     4 */
	int                        (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *); /*   148     4 */
	int                        (*ndo_bridge_getlink)(struct sk_buff *, u32, u32, struct net_device *, u32); /*   152     4 */
	int                        (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *); /*   156     4 */
	int                        (*ndo_change_carrier)(struct net_device *, bool); /*   160     4 */

	/* size: 164, cachelines: 3, members: 41 */
	/* last cacheline: 36 bytes */
};
struct neigh_parms {
	struct net *               net;                  /*     0     4 */
	struct net_device *        dev;                  /*     4     4 */
	struct neigh_parms *       next;                 /*     8     4 */
	int                        (*neigh_setup)(struct neighbour *); /*    12     4 */
	void                       (*neigh_cleanup)(struct neighbour *); /*    16     4 */
	struct neigh_table *       tbl;                  /*    20     4 */
	void *                     sysctl_table;         /*    24     4 */
	int                        dead;                 /*    28     4 */
	atomic_t                   refcnt;               /*    32     4 */
	struct callback_head       callback_head;        /*    36     8 */
	int                        base_reachable_time;  /*    44     4 */
	int                        retrans_time;         /*    48     4 */
	int                        gc_staletime;         /*    52     4 */
	int                        reachable_time;       /*    56     4 */
	int                        delay_probe_time;     /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        queue_len_bytes;      /*    64     4 */
	int                        ucast_probes;         /*    68     4 */
	int                        app_probes;           /*    72     4 */
	int                        mcast_probes;         /*    76     4 */
	int                        anycast_delay;        /*    80     4 */
	int                        proxy_delay;          /*    84     4 */
	int                        proxy_qlen;           /*    88     4 */
	int                        locktime;             /*    92     4 */

	/* size: 96, cachelines: 2, members: 23 */
	/* last cacheline: 32 bytes */
};
struct in_device {
	struct net_device *        dev;                  /*     0     4 */
	atomic_t                   refcnt;               /*     4     4 */
	int                        dead;                 /*     8     4 */
	struct in_ifaddr *         ifa_list;             /*    12     4 */
	struct ip_mc_list *        mc_list;              /*    16     4 */
	int                        mc_count;             /*    20     4 */
	spinlock_t                 mc_tomb_lock;         /*    24    16 */
	struct ip_mc_list *        mc_tomb;              /*    40     4 */
	long unsigned int          mr_v1_seen;           /*    44     4 */
	long unsigned int          mr_v2_seen;           /*    48     4 */
	long unsigned int          mr_maxdelay;          /*    52     4 */
	unsigned char              mr_qrv;               /*    56     1 */
	unsigned char              mr_gq_running;        /*    57     1 */
	unsigned char              mr_ifc_count;         /*    58     1 */

	/* XXX 1 byte hole, try to pack */

	struct timer_list          mr_gq_timer;          /*    60    52 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */
	struct timer_list          mr_ifc_timer;         /*   112    52 */
	/* --- cacheline 2 boundary (128 bytes) was 36 bytes ago --- */
	struct neigh_parms *       arp_parms;            /*   164     4 */
	struct ipv4_devconf        cnf;                  /*   168   112 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	struct callback_head       callback_head;        /*   280     8 */

	/* size: 288, cachelines: 5, members: 19 */
	/* sum members: 287, holes: 1, sum holes: 1 */
	/* last cacheline: 32 bytes */
};
struct inet6_dev {
	struct net_device *        dev;                  /*     0     4 */
	struct list_head           addr_list;            /*     4     8 */
	struct ifmcaddr6 *         mc_list;              /*    12     4 */
	struct ifmcaddr6 *         mc_tomb;              /*    16     4 */
	spinlock_t                 mc_lock;              /*    20    16 */
	unsigned char              mc_qrv;               /*    36     1 */
	unsigned char              mc_gq_running;        /*    37     1 */
	unsigned char              mc_ifc_count;         /*    38     1 */

	/* XXX 1 byte hole, try to pack */

	long unsigned int          mc_v1_seen;           /*    40     4 */
	long unsigned int          mc_maxdelay;          /*    44     4 */
	struct timer_list          mc_gq_timer;          /*    48    52 */
	/* --- cacheline 1 boundary (64 bytes) was 36 bytes ago --- */
	struct timer_list          mc_ifc_timer;         /*   100    52 */
	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	struct ifacaddr6 *         ac_list;              /*   152     4 */
	rwlock_t                   lock;                 /*   156    16 */
	atomic_t                   refcnt;               /*   172     4 */
	__u32                      if_flags;             /*   176     4 */
	int                        dead;                 /*   180     4 */
	u8                         rndid[8];             /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct timer_list          regen_timer;          /*   192    52 */
	struct list_head           tempaddr_list;        /*   244     8 */
	struct in6_addr            token;                /*   252    16 */
	/* --- cacheline 4 boundary (256 bytes) was 12 bytes ago --- */
	struct neigh_parms *       nd_parms;             /*   268     4 */
	struct inet6_dev *         next;                 /*   272     4 */
	struct ipv6_devconf        cnf;                  /*   276   128 */
	/* --- cacheline 6 boundary (384 bytes) was 20 bytes ago --- */
	struct ipv6_devstat        stats;                /*   404    16 */
	long unsigned int          tstamp;               /*   420     4 */
	struct callback_head       rcu;                  /*   424     8 */

	/* size: 432, cachelines: 7, members: 27 */
	/* sum members: 431, holes: 1, sum holes: 1 */
	/* last cacheline: 48 bytes */
};
struct rtnl_link_ops {
	struct list_head           list;                 /*     0     8 */
	const char  *              kind;                 /*     8     4 */
	size_t                     priv_size;            /*    12     4 */
	void                       (*setup)(struct net_device *); /*    16     4 */
	int                        maxtype;              /*    20     4 */
	const struct nla_policy  * policy;               /*    24     4 */
	int                        (*validate)(struct nlattr * *, struct nlattr * *); /*    28     4 */
	int                        (*newlink)(struct net *, struct net_device *, struct nlattr * *, struct nlattr * *); /*    32     4 */
	int                        (*changelink)(struct net_device *, struct nlattr * *, struct nlattr * *); /*    36     4 */
	void                       (*dellink)(struct net_device *, struct list_head *); /*    40     4 */
	size_t                     (*get_size)(const struct net_device  *); /*    44     4 */
	int                        (*fill_info)(struct sk_buff *, const struct net_device  *); /*    48     4 */
	size_t                     (*get_xstats_size)(const struct net_device  *); /*    52     4 */
	int                        (*fill_xstats)(struct sk_buff *, const struct net_device  *); /*    56     4 */
	unsigned int               (*get_num_tx_queues)(void); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               (*get_num_rx_queues)(void); /*    64     4 */

	/* size: 68, cachelines: 2, members: 16 */
	/* last cacheline: 4 bytes */
};
struct packet_type {
	__be16                     type;                 /*     0     2 */

	/* XXX 2 bytes hole, try to pack */

	struct net_device *        dev;                  /*     4     4 */
	int                        (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *); /*     8     4 */
	bool                       (*id_match)(struct packet_type *, struct sock *); /*    12     4 */
	void *                     af_packet_priv;       /*    16     4 */
	struct list_head           list;                 /*    20     8 */

	/* size: 28, cachelines: 1, members: 6 */
	/* sum members: 26, holes: 1, sum holes: 2 */
	/* last cacheline: 28 bytes */
};
struct res_counter {
	long long unsigned int     usage;                /*     0     8 */
	long long unsigned int     max_usage;            /*     8     8 */
	long long unsigned int     limit;                /*    16     8 */
	long long unsigned int     soft_limit;           /*    24     8 */
	long long unsigned int     failcnt;              /*    32     8 */
	spinlock_t                 lock;                 /*    40    16 */
	struct res_counter *       parent;               /*    56     4 */

	/* size: 64, cachelines: 1, members: 7 */
	/* padding: 4 */
};
struct io_event {
	__u64                      data;                 /*     0     8 */
	__u64                      obj;                  /*     8     8 */
	__s64                      res;                  /*    16     8 */
	__s64                      res2;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct sock_filter {
	__u16                      code;                 /*     0     2 */
	__u8                       jt;                   /*     2     1 */
	__u8                       jf;                   /*     3     1 */
	__u32                      k;                    /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct sk_filter {
	atomic_t                   refcnt;               /*     0     4 */
	unsigned int               len;                  /*     4     4 */
	unsigned int               (*bpf_func)(const struct sk_buff  *, const struct sock_filter  *); /*     8     4 */
	struct callback_head       rcu;                  /*    12     8 */
	struct sock_filter         insns[0];             /*    20     0 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct tcmsg {
	unsigned char              tcm_family;           /*     0     1 */
	unsigned char              tcm__pad1;            /*     1     1 */
	short unsigned int         tcm__pad2;            /*     2     2 */
	int                        tcm_ifindex;          /*     4     4 */
	__u32                      tcm_handle;           /*     8     4 */
	__u32                      tcm_parent;           /*    12     4 */
	__u32                      tcm_info;             /*    16     4 */

	/* size: 20, cachelines: 1, members: 7 */
	/* last cacheline: 20 bytes */
};
struct nla_policy {
	u16                        type;                 /*     0     2 */
	u16                        len;                  /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct neigh_table {
	struct neigh_table *       next;                 /*     0     4 */
	int                        family;               /*     4     4 */
	int                        entry_size;           /*     8     4 */
	int                        key_len;              /*    12     4 */
	__u32                      (*hash)(const void  *, const struct net_device  *, __u32 *); /*    16     4 */
	int                        (*constructor)(struct neighbour *); /*    20     4 */
	int                        (*pconstructor)(struct pneigh_entry *); /*    24     4 */
	void                       (*pdestructor)(struct pneigh_entry *); /*    28     4 */
	void                       (*proxy_redo)(struct sk_buff *); /*    32     4 */
	char *                     id;                   /*    36     4 */
	struct neigh_parms         parms;                /*    40    96 */
	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */
	int                        gc_interval;          /*   136     4 */
	int                        gc_thresh1;           /*   140     4 */
	int                        gc_thresh2;           /*   144     4 */
	int                        gc_thresh3;           /*   148     4 */
	long unsigned int          last_flush;           /*   152     4 */
	struct delayed_work        gc_work;              /*   156    76 */
	/* --- cacheline 3 boundary (192 bytes) was 40 bytes ago --- */
	struct timer_list          proxy_timer;          /*   232    52 */
	/* --- cacheline 4 boundary (256 bytes) was 28 bytes ago --- */
	struct sk_buff_head        proxy_queue;          /*   284    28 */
	atomic_t                   entries;              /*   312     4 */
	rwlock_t                   lock;                 /*   316    16 */
	/* --- cacheline 5 boundary (320 bytes) was 12 bytes ago --- */
	long unsigned int          last_rand;            /*   332     4 */
	struct neigh_statistics *  stats;                /*   336     4 */
	struct neigh_hash_table *  nht;                  /*   340     4 */
	struct pneigh_entry * *    phash_buckets;        /*   344     4 */

	/* size: 348, cachelines: 6, members: 25 */
	/* last cacheline: 28 bytes */
};
struct neigh_statistics {
	long unsigned int          allocs;               /*     0     4 */
	long unsigned int          destroys;             /*     4     4 */
	long unsigned int          hash_grows;           /*     8     4 */
	long unsigned int          res_failed;           /*    12     4 */
	long unsigned int          lookups;              /*    16     4 */
	long unsigned int          hits;                 /*    20     4 */
	long unsigned int          rcv_probes_mcast;     /*    24     4 */
	long unsigned int          rcv_probes_ucast;     /*    28     4 */
	long unsigned int          periodic_gc_runs;     /*    32     4 */
	long unsigned int          forced_gc_runs;       /*    36     4 */
	long unsigned int          unres_discards;       /*    40     4 */

	/* size: 44, cachelines: 1, members: 11 */
	/* last cacheline: 44 bytes */
};
struct neigh_ops {
	int                        family;               /*     0     4 */
	void                       (*solicit)(struct neighbour *, struct sk_buff *); /*     4     4 */
	void                       (*error_report)(struct neighbour *, struct sk_buff *); /*     8     4 */
	int                        (*output)(struct neighbour *, struct sk_buff *); /*    12     4 */
	int                        (*connected_output)(struct neighbour *, struct sk_buff *); /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct pneigh_entry {
	struct pneigh_entry *      next;                 /*     0     4 */
	struct net *               net;                  /*     4     4 */
	struct net_device *        dev;                  /*     8     4 */
	u8                         flags;                /*    12     1 */
	u8                         key[0];               /*    13     0 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 16 bytes */
};
struct neigh_hash_table {
	struct neighbour * *       hash_buckets;         /*     0     4 */
	unsigned int               hash_shift;           /*     4     4 */
	__u32                      hash_rnd[4];          /*     8    16 */
	struct callback_head       rcu;                  /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct rtable {
	struct dst_entry           dst;                  /*     0    80 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	int                        rt_genid;             /*    80     4 */
	unsigned int               rt_flags;             /*    84     4 */
	__u16                      rt_type;              /*    88     2 */
	__u8                       rt_is_input;          /*    90     1 */
	__u8                       rt_uses_gateway;      /*    91     1 */
	int                        rt_iif;               /*    92     4 */
	__be32                     rt_gateway;           /*    96     4 */
	u32                        rt_pmtu;              /*   100     4 */
	struct list_head           rt_uncached;          /*   104     8 */

	/* size: 112, cachelines: 2, members: 10 */
	/* last cacheline: 48 bytes */
};
struct sock_common {
	union {
		__addrpair         skc_addrpair;         /*           8 */
		struct {
			__be32     skc_daddr;            /*     0     4 */
			__be32     skc_rcv_saddr;        /*     4     4 */
		};                                       /*           8 */
	};                                               /*     0     8 */
	union {
		unsigned int       skc_hash;             /*           4 */
		__u16              skc_u16hashes[2];     /*           4 */
	};                                               /*     8     4 */
	union {
		__portpair         skc_portpair;         /*           4 */
		struct {
			__be16     skc_dport;            /*    12     2 */
			__u16      skc_num;              /*    14     2 */
		};                                       /*           4 */
	};                                               /*    12     4 */
	short unsigned int         skc_family;           /*    16     2 */
	volatile unsigned char     skc_state;            /*    18     1 */
	unsigned char              skc_reuse:4;          /*    19: 4  1 */
	unsigned char              skc_reuseport:4;      /*    19: 0  1 */
	int                        skc_bound_dev_if;     /*    20     4 */
	union {
		struct hlist_node  skc_bind_node;        /*           8 */
		struct hlist_nulls_node skc_portaddr_node; /*           8 */
	};                                               /*    24     8 */
	struct proto *             skc_prot;             /*    32     4 */
	struct net *               skc_net;              /*    36     4 */
	int                        skc_dontcopy_begin[0]; /*    40     0 */
	union {
		struct hlist_node  skc_node;             /*           8 */
		struct hlist_nulls_node skc_nulls_node;  /*           8 */
	};                                               /*    40     8 */
	int                        skc_tx_queue_mapping; /*    48     4 */
	atomic_t                   skc_refcnt;           /*    52     4 */
	int                        skc_dontcopy_end[0];  /*    56     0 */

	/* size: 56, cachelines: 1, members: 16 */
	/* last cacheline: 56 bytes */
};
struct proto {
	void                       (*close)(struct sock *, long int); /*     0     4 */
	int                        (*connect)(struct sock *, struct sockaddr *, int); /*     4     4 */
	int                        (*disconnect)(struct sock *, int); /*     8     4 */
	struct sock *              (*accept)(struct sock *, int, int *); /*    12     4 */
	int                        (*ioctl)(struct sock *, int, long unsigned int); /*    16     4 */
	int                        (*init)(struct sock *); /*    20     4 */
	void                       (*destroy)(struct sock *); /*    24     4 */
	void                       (*shutdown)(struct sock *, int); /*    28     4 */
	int                        (*setsockopt)(struct sock *, int, int, char *, unsigned int); /*    32     4 */
	int                        (*getsockopt)(struct sock *, int, int, char *, int *); /*    36     4 */
	int                        (*sendmsg)(struct kiocb *, struct sock *, struct msghdr *, size_t); /*    40     4 */
	int                        (*recvmsg)(struct kiocb *, struct sock *, struct msghdr *, size_t, int, int, int *); /*    44     4 */
	int                        (*sendpage)(struct sock *, struct page *, int, size_t, int); /*    48     4 */
	int                        (*bind)(struct sock *, struct sockaddr *, int); /*    52     4 */
	int                        (*backlog_rcv)(struct sock *, struct sk_buff *); /*    56     4 */
	void                       (*release_cb)(struct sock *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*mtu_reduced)(struct sock *); /*    64     4 */
	void                       (*hash)(struct sock *); /*    68     4 */
	void                       (*unhash)(struct sock *); /*    72     4 */
	void                       (*rehash)(struct sock *); /*    76     4 */
	int                        (*get_port)(struct sock *, short unsigned int); /*    80     4 */
	void                       (*clear_sk)(struct sock *, int); /*    84     4 */
	unsigned int               inuse_idx;            /*    88     4 */
	void                       (*enter_memory_pressure)(struct sock *); /*    92     4 */
	atomic_long_t *            memory_allocated;     /*    96     4 */
	struct percpu_counter *    sockets_allocated;    /*   100     4 */
	int *                      memory_pressure;      /*   104     4 */
	long int *                 sysctl_mem;           /*   108     4 */
	int *                      sysctl_wmem;          /*   112     4 */
	int *                      sysctl_rmem;          /*   116     4 */
	int                        max_header;           /*   120     4 */
	bool                       no_autobind;          /*   124     1 */

	/* XXX 3 bytes hole, try to pack */

	/* --- cacheline 2 boundary (128 bytes) --- */
	struct kmem_cache *        slab;                 /*   128     4 */
	unsigned int               obj_size;             /*   132     4 */
	int                        slab_flags;           /*   136     4 */
	struct percpu_counter *    orphan_count;         /*   140     4 */
	struct request_sock_ops *  rsk_prot;             /*   144     4 */
	struct timewait_sock_ops * twsk_prot;            /*   148     4 */
	union {
		struct inet_hashinfo * hashinfo;         /*           4 */
		struct udp_table * udp_table;            /*           4 */
		struct raw_hashinfo * raw_hash;          /*           4 */
	} h;                                             /*   152     4 */
	struct module *            owner;                /*   156     4 */
	char                       name[32];             /*   160    32 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct list_head           node;                 /*   192     8 */

	/* size: 200, cachelines: 4, members: 42 */
	/* sum members: 197, holes: 1, sum holes: 3 */
	/* last cacheline: 8 bytes */
};
struct cg_proto {
	void                       (*enter_memory_pressure)(struct sock *); /*     0     4 */
	struct res_counter *       memory_allocated;     /*     4     4 */
	struct percpu_counter *    sockets_allocated;    /*     8     4 */
	int *                      memory_pressure;      /*    12     4 */
	long int *                 sysctl_mem;           /*    16     4 */
	long unsigned int          flags;                /*    20     4 */
	struct mem_cgroup *        memcg;                /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* last cacheline: 28 bytes */
};
struct inet_hashinfo {
	struct inet_ehash_bucket * ehash;                /*     0     4 */
	spinlock_t *               ehash_locks;          /*     4     4 */
	unsigned int               ehash_mask;           /*     8     4 */
	unsigned int               ehash_locks_mask;     /*    12     4 */
	struct inet_bind_hashbucket * bhash;             /*    16     4 */
	unsigned int               bhash_size;           /*    20     4 */
	struct kmem_cache *        bind_bucket_cachep;   /*    24     4 */

	/* XXX 36 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct inet_listen_hashbucket listening_hash[32]; /*    64   640 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	atomic_t                   bsockets;             /*   704     4 */

	/* size: 768, cachelines: 12, members: 9 */
	/* sum members: 672, holes: 1, sum holes: 36 */
	/* padding: 60 */
};
struct udp_table {
	struct udp_hslot *         hash;                 /*     0     4 */
	struct udp_hslot *         hash2;                /*     4     4 */
	unsigned int               mask;                 /*     8     4 */
	unsigned int               log;                  /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct request_sock_ops {
	int                        family;               /*     0     4 */
	int                        obj_size;             /*     4     4 */
	struct kmem_cache *        slab;                 /*     8     4 */
	char *                     slab_name;            /*    12     4 */
	int                        (*rtx_syn_ack)(struct sock *, struct request_sock *); /*    16     4 */
	void                       (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *); /*    20     4 */
	void                       (*send_reset)(struct sock *, struct sk_buff *); /*    24     4 */
	void                       (*destructor)(struct request_sock *); /*    28     4 */
	void                       (*syn_ack_timeout)(struct sock *, struct request_sock *); /*    32     4 */

	/* size: 36, cachelines: 1, members: 9 */
	/* last cacheline: 36 bytes */
};
struct timewait_sock_ops {
	struct kmem_cache *        twsk_slab;            /*     0     4 */
	char *                     twsk_slab_name;       /*     4     4 */
	unsigned int               twsk_obj_size;        /*     8     4 */
	int                        (*twsk_unique)(struct sock *, struct sock *, void *); /*    12     4 */
	void                       (*twsk_destructor)(struct sock *); /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct socket_alloc {
	struct socket              socket;               /*     0    28 */

	/* XXX 4 bytes hole, try to pack */

	struct inode               vfs_inode;            /*    32   408 */
	/* --- cacheline 6 boundary (384 bytes) was 56 bytes ago --- */

	/* size: 440, cachelines: 7, members: 2 */
	/* sum members: 436, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct ip_options {
	__be32                     faddr;                /*     0     4 */
	__be32                     nexthop;              /*     4     4 */
	unsigned char              optlen;               /*     8     1 */
	unsigned char              srr;                  /*     9     1 */
	unsigned char              rr;                   /*    10     1 */
	unsigned char              ts;                   /*    11     1 */
	unsigned char              is_strictroute:1;     /*    12: 7  1 */
	unsigned char              srr_is_hit:1;         /*    12: 6  1 */
	unsigned char              is_changed:1;         /*    12: 5  1 */
	unsigned char              rr_needaddr:1;        /*    12: 4  1 */
	unsigned char              ts_needtime:1;        /*    12: 3  1 */
	unsigned char              ts_needaddr:1;        /*    12: 2  1 */

	/* XXX 2 bits hole, try to pack */

	unsigned char              router_alert;         /*    13     1 */
	unsigned char              cipso;                /*    14     1 */
	unsigned char              __pad2;               /*    15     1 */
	unsigned char              __data[0];            /*    16     0 */

	/* size: 16, cachelines: 1, members: 16 */
	/* bit holes: 1, sum bit holes: 2 bits */
	/* last cacheline: 16 bytes */
};
struct ip_options_rcu {
	struct callback_head       rcu;                  /*     0     8 */
	struct ip_options          opt;                  /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct inet_cork {
	unsigned int               flags;                /*     0     4 */
	__be32                     addr;                 /*     4     4 */
	struct ip_options *        opt;                  /*     8     4 */
	unsigned int               fragsize;             /*    12     4 */
	int                        length;               /*    16     4 */
	struct dst_entry *         dst;                  /*    20     4 */
	u8                         tx_flags;             /*    24     1 */

	/* size: 28, cachelines: 1, members: 7 */
	/* padding: 3 */
	/* last cacheline: 28 bytes */
};
struct inet_cork_full {
	struct inet_cork           base;                 /*     0    28 */

	/* XXX last struct has 3 bytes of padding */

	struct flowi               fl;                   /*    28    64 */
	/* --- cacheline 1 boundary (64 bytes) was 28 bytes ago --- */

	/* size: 92, cachelines: 2, members: 2 */
	/* paddings: 1, sum paddings: 3 */
	/* last cacheline: 28 bytes */
};
struct inet_sock {
	struct sock                sk;                   /*     0   520 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 8 boundary (512 bytes) was 8 bytes ago --- */
	struct ipv6_pinfo *        pinet6;               /*   520     4 */
	__be32                     inet_saddr;           /*   524     4 */
	__s16                      uc_ttl;               /*   528     2 */
	__u16                      cmsg_flags;           /*   530     2 */
	__be16                     inet_sport;           /*   532     2 */
	__u16                      inet_id;              /*   534     2 */
	struct ip_options_rcu *    inet_opt;             /*   536     4 */
	int                        rx_dst_ifindex;       /*   540     4 */
	__u8                       tos;                  /*   544     1 */
	__u8                       min_ttl;              /*   545     1 */
	__u8                       mc_ttl;               /*   546     1 */
	__u8                       pmtudisc;             /*   547     1 */
	__u8                       recverr:1;            /*   548: 7  1 */
	__u8                       is_icsk:1;            /*   548: 6  1 */
	__u8                       freebind:1;           /*   548: 5  1 */
	__u8                       hdrincl:1;            /*   548: 4  1 */
	__u8                       mc_loop:1;            /*   548: 3  1 */
	__u8                       transparent:1;        /*   548: 2  1 */
	__u8                       mc_all:1;             /*   548: 1  1 */
	__u8                       nodefrag:1;           /*   548: 0  1 */
	__u8                       rcv_tos;              /*   549     1 */

	/* XXX 2 bytes hole, try to pack */

	int                        uc_index;             /*   552     4 */
	int                        mc_index;             /*   556     4 */
	__be32                     mc_addr;              /*   560     4 */
	struct ip_mc_socklist *    mc_list;              /*   564     4 */
	struct inet_cork_full      cork;                 /*   568    92 */
	/* --- cacheline 10 boundary (640 bytes) was 20 bytes ago --- */

	/* size: 664, cachelines: 11, members: 27 */
	/* sum members: 658, holes: 1, sum holes: 2 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 24 bytes */
};
struct ipv6_pinfo {
	struct in6_addr            saddr;                /*     0    16 */
	struct in6_addr            rcv_saddr;            /*    16    16 */
	struct in6_addr            daddr;                /*    32    16 */
	struct in6_pktinfo         sticky_pktinfo;       /*    48    20 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	const struct in6_addr  *   daddr_cache;          /*    68     4 */
	const struct in6_addr  *   saddr_cache;          /*    72     4 */
	__be32                     flow_label;           /*    76     4 */
	__u32                      frag_size;            /*    80     4 */
	__u16                      __unused_1:7;         /*    84: 9  2 */
	__s16                      hop_limit:9;          /*    84: 0  2 */
	__u16                      mc_loop:1;            /*    86:15  2 */
	__u16                      __unused_2:6;         /*    86: 9  2 */
	__s16                      mcast_hops:9;         /*    86: 0  2 */
	int                        ucast_oif;            /*    88     4 */
	int                        mcast_oif;            /*    92     4 */
	union {
		struct {
			__u16      srcrt:1;              /*    96:15  2 */
			__u16      osrcrt:1;             /*    96:14  2 */
			__u16      rxinfo:1;             /*    96:13  2 */
			__u16      rxoinfo:1;            /*    96:12  2 */
			__u16      rxhlim:1;             /*    96:11  2 */
			__u16      rxohlim:1;            /*    96:10  2 */
			__u16      hopopts:1;            /*    96: 9  2 */
			__u16      ohopopts:1;           /*    96: 8  2 */
			__u16      dstopts:1;            /*    96: 7  2 */
			__u16      odstopts:1;           /*    96: 6  2 */
			__u16      rxflow:1;             /*    96: 5  2 */
			__u16      rxtclass:1;           /*    96: 4  2 */
			__u16      rxpmtu:1;             /*    96: 3  2 */
			__u16      rxorigdstaddr:1;      /*    96: 2  2 */
		} bits;                                  /*           2 */
		__u16              all;                  /*           2 */
	} rxopt;                                         /*    96     2 */
	__u16                      recverr:1;            /*    98:15  2 */
	__u16                      sndflow:1;            /*    98:14  2 */
	__u16                      pmtudisc:2;           /*    98:12  2 */
	__u16                      ipv6only:1;           /*    98:11  2 */
	__u16                      srcprefs:3;           /*    98: 8  2 */
	__u16                      dontfrag:1;           /*    98: 7  2 */

	/* XXX 7 bits hole, try to pack */

	__u8                       min_hopcount;         /*   100     1 */
	__u8                       tclass;               /*   101     1 */
	__u8                       rcv_tclass;           /*   102     1 */

	/* XXX 1 byte hole, try to pack */

	__u32                      dst_cookie;           /*   104     4 */
	__u32                      rx_dst_cookie;        /*   108     4 */
	struct ipv6_mc_socklist *  ipv6_mc_list;         /*   112     4 */
	struct ipv6_ac_socklist *  ipv6_ac_list;         /*   116     4 */
	struct ipv6_fl_socklist *  ipv6_fl_list;         /*   120     4 */
	struct ipv6_txoptions *    opt;                  /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct sk_buff *           pktoptions;           /*   128     4 */
	struct sk_buff *           rxpmtu;               /*   132     4 */
	struct {
		struct ipv6_txoptions * opt;             /*   136     4 */
		u8                 hop_limit;            /*   140     1 */
		u8                 tclass;               /*   141     1 */
	} cork;                                          /*   136     8 */

	/* size: 144, cachelines: 3, members: 34 */
	/* sum members: 143, holes: 1, sum holes: 1 */
	/* bit holes: 1, sum bit holes: 7 bits */
	/* last cacheline: 16 bytes */
};
struct in6_pktinfo {
	struct in6_addr            ipi6_addr;            /*     0    16 */
	int                        ipi6_ifindex;         /*    16     4 */

	/* size: 20, cachelines: 1, members: 2 */
	/* last cacheline: 20 bytes */
};
struct ipv6_rt_hdr {
	__u8                       nexthdr;              /*     0     1 */
	__u8                       hdrlen;               /*     1     1 */
	__u8                       type;                 /*     2     1 */
	__u8                       segments_left;        /*     3     1 */

	/* size: 4, cachelines: 1, members: 4 */
	/* last cacheline: 4 bytes */
};
struct ipv6_opt_hdr {
	__u8                       nexthdr;              /*     0     1 */
	__u8                       hdrlen;               /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct ipv6_txoptions {
	int                        tot_len;              /*     0     4 */
	__u16                      opt_flen;             /*     4     2 */
	__u16                      opt_nflen;            /*     6     2 */
	struct ipv6_opt_hdr *      hopopt;               /*     8     4 */
	struct ipv6_opt_hdr *      dst0opt;              /*    12     4 */
	struct ipv6_rt_hdr *       srcrt;                /*    16     4 */
	struct ipv6_opt_hdr *      dst1opt;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 7 */
	/* last cacheline: 24 bytes */
};
struct ipv6_mc_socklist {
	struct in6_addr            addr;                 /*     0    16 */
	int                        ifindex;              /*    16     4 */
	struct ipv6_mc_socklist *  next;                 /*    20     4 */
	rwlock_t                   sflock;               /*    24    16 */
	unsigned int               sfmode;               /*    40     4 */
	struct ip6_sf_socklist *   sflist;               /*    44     4 */
	struct callback_head       rcu;                  /*    48     8 */

	/* size: 56, cachelines: 1, members: 7 */
	/* last cacheline: 56 bytes */
};
struct ipv6_ac_socklist {
	struct in6_addr            acl_addr;             /*     0    16 */
	int                        acl_ifindex;          /*    16     4 */
	struct ipv6_ac_socklist *  acl_next;             /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ipv6_fl_socklist {
	struct ipv6_fl_socklist *  next;                 /*     0     4 */
	struct ip6_flowlabel *     fl;                   /*     4     4 */
	struct callback_head       rcu;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ip6_sf_socklist {
	unsigned int               sl_max;               /*     0     4 */
	unsigned int               sl_count;             /*     4     4 */
	struct in6_addr            sl_addr[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ip6_sf_list {
	struct ip6_sf_list *       sf_next;              /*     0     4 */
	struct in6_addr            sf_addr;              /*     4    16 */
	long unsigned int          sf_count[2];          /*    20     8 */
	unsigned char              sf_gsresp;            /*    28     1 */
	unsigned char              sf_oldin;             /*    29     1 */
	unsigned char              sf_crcount;           /*    30     1 */

	/* size: 32, cachelines: 1, members: 6 */
	/* padding: 1 */
	/* last cacheline: 32 bytes */
};
struct ifmcaddr6 {
	struct in6_addr            mca_addr;             /*     0    16 */
	struct inet6_dev *         idev;                 /*    16     4 */
	struct ifmcaddr6 *         next;                 /*    20     4 */
	struct ip6_sf_list *       mca_sources;          /*    24     4 */
	struct ip6_sf_list *       mca_tomb;             /*    28     4 */
	unsigned int               mca_sfmode;           /*    32     4 */
	unsigned char              mca_crcount;          /*    36     1 */

	/* XXX 3 bytes hole, try to pack */

	long unsigned int          mca_sfcount[2];       /*    40     8 */
	struct timer_list          mca_timer;            /*    48    52 */
	/* --- cacheline 1 boundary (64 bytes) was 36 bytes ago --- */
	unsigned int               mca_flags;            /*   100     4 */
	int                        mca_users;            /*   104     4 */
	atomic_t                   mca_refcnt;           /*   108     4 */
	spinlock_t                 mca_lock;             /*   112    16 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	long unsigned int          mca_cstamp;           /*   128     4 */
	long unsigned int          mca_tstamp;           /*   132     4 */

	/* size: 136, cachelines: 3, members: 15 */
	/* sum members: 133, holes: 1, sum holes: 3 */
	/* last cacheline: 8 bytes */
};
struct ifacaddr6 {
	struct in6_addr            aca_addr;             /*     0    16 */
	struct inet6_dev *         aca_idev;             /*    16     4 */
	struct rt6_info *          aca_rt;               /*    20     4 */
	struct ifacaddr6 *         aca_next;             /*    24     4 */
	int                        aca_users;            /*    28     4 */
	atomic_t                   aca_refcnt;           /*    32     4 */
	spinlock_t                 aca_lock;             /*    36    16 */
	long unsigned int          aca_cstamp;           /*    52     4 */
	long unsigned int          aca_tstamp;           /*    56     4 */

	/* size: 60, cachelines: 1, members: 9 */
	/* last cacheline: 60 bytes */
};
struct ipv6_devstat {
	struct proc_dir_entry *    proc_dir_entry;       /*     0     4 */
	struct ipstats_mib *       ipv6[1];              /*     4     4 */
	struct icmpv6_mib_device * icmpv6dev;            /*     8     4 */
	struct icmpv6msg_mib_device * icmpv6msgdev;      /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ip6_flowlabel {
	struct ip6_flowlabel *     next;                 /*     0     4 */
	__be32                     label;                /*     4     4 */
	atomic_t                   users;                /*     8     4 */
	struct in6_addr            dst;                  /*    12    16 */
	struct ipv6_txoptions *    opt;                  /*    28     4 */
	long unsigned int          linger;               /*    32     4 */
	struct callback_head       rcu;                  /*    36     8 */
	u8                         share;                /*    44     1 */

	/* XXX 3 bytes hole, try to pack */

	union {
		struct pid *       pid;                  /*           4 */
		kuid_t             uid;                  /*           4 */
	} owner;                                         /*    48     4 */
	long unsigned int          lastuse;              /*    52     4 */
	long unsigned int          expires;              /*    56     4 */
	struct net *               fl_net;               /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 12 */
	/* sum members: 61, holes: 1, sum holes: 3 */
};
struct inetpeer_addr_base {
	union {
		__be32             a4;                   /*           4 */
		__be32             a6[4];                /*          16 */
	};                                               /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct inetpeer_addr {
	struct inetpeer_addr_base  addr;                 /*     0    16 */
	__u16                      family;               /*    16     2 */

	/* size: 20, cachelines: 1, members: 2 */
	/* padding: 2 */
	/* last cacheline: 20 bytes */
};
struct inet_peer {
	struct inet_peer *         avl_left;             /*     0     4 */
	struct inet_peer *         avl_right;            /*     4     4 */
	struct inetpeer_addr       daddr;                /*     8    20 */

	/* XXX last struct has 2 bytes of padding */

	__u32                      avl_height;           /*    28     4 */
	u32                        metrics[14];          /*    32    56 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	u32                        rate_tokens;          /*    88     4 */
	long unsigned int          rate_last;            /*    92     4 */
	union {
		struct list_head   gc_list;              /*           8 */
		struct callback_head gc_rcu;             /*           8 */
	};                                               /*    96     8 */
	union {
		struct {
			atomic_t   rid;                  /*   104     4 */
			atomic_t   ip_id_count;          /*   108     4 */
		};                                       /*           8 */
		struct callback_head rcu;                /*           8 */
		struct inet_peer * gc_next;              /*           4 */
	};                                               /*   104     8 */
	__u32                      dtime;                /*   112     4 */
	atomic_t                   refcnt;               /*   116     4 */

	/* size: 120, cachelines: 2, members: 11 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 56 bytes */
};
struct inet_ehash_bucket {
	struct hlist_nulls_head    chain;                /*     0     4 */
	struct hlist_nulls_head    twchain;              /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct inet_bind_hashbucket {
	spinlock_t                 lock;                 /*     0    16 */
	struct hlist_head          chain;                /*    16     4 */

	/* size: 20, cachelines: 1, members: 2 */
	/* last cacheline: 20 bytes */
};
struct inet_listen_hashbucket {
	spinlock_t                 lock;                 /*     0    16 */
	struct hlist_nulls_head    head;                 /*    16     4 */

	/* size: 20, cachelines: 1, members: 2 */
	/* last cacheline: 20 bytes */
};
struct tcp_seq_afinfo {
	char *                     name;                 /*     0     4 */
	sa_family_t                family;               /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	const struct file_operations  * seq_fops;        /*     8     4 */
	struct seq_operations      seq_ops;              /*    12    16 */

	/* size: 28, cachelines: 1, members: 4 */
	/* sum members: 26, holes: 1, sum holes: 2 */
	/* last cacheline: 28 bytes */
};
struct udp_hslot {
	struct hlist_nulls_head    head;                 /*     0     4 */
	int                        count;                /*     4     4 */
	spinlock_t                 lock;                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct udp_seq_afinfo {
	char *                     name;                 /*     0     4 */
	sa_family_t                family;               /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	struct udp_table *         udp_table;            /*     8     4 */
	const struct file_operations  * seq_fops;        /*    12     4 */
	struct seq_operations      seq_ops;              /*    16    16 */

	/* size: 32, cachelines: 1, members: 5 */
	/* sum members: 30, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct in_ifaddr {
	struct hlist_node          hash;                 /*     0     8 */
	struct in_ifaddr *         ifa_next;             /*     8     4 */
	struct in_device *         ifa_dev;              /*    12     4 */
	struct callback_head       callback_head;        /*    16     8 */
	__be32                     ifa_local;            /*    24     4 */
	__be32                     ifa_address;          /*    28     4 */
	__be32                     ifa_mask;             /*    32     4 */
	__be32                     ifa_broadcast;        /*    36     4 */
	unsigned char              ifa_scope;            /*    40     1 */
	unsigned char              ifa_flags;            /*    41     1 */
	unsigned char              ifa_prefixlen;        /*    42     1 */
	char                       ifa_label[16];        /*    43    16 */

	/* XXX 1 byte hole, try to pack */

	__u32                      ifa_valid_lft;        /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	__u32                      ifa_preferred_lft;    /*    64     4 */
	long unsigned int          ifa_cstamp;           /*    68     4 */
	long unsigned int          ifa_tstamp;           /*    72     4 */

	/* size: 76, cachelines: 2, members: 16 */
	/* sum members: 75, holes: 1, sum holes: 1 */
	/* last cacheline: 12 bytes */
};
struct packet_mclist {
	struct packet_mclist *     next;                 /*     0     4 */
	int                        ifindex;              /*     4     4 */
	int                        count;                /*     8     4 */
	short unsigned int         type;                 /*    12     2 */
	short unsigned int         alen;                 /*    14     2 */
	unsigned char              addr[32];             /*    16    32 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct tpacket_kbdq_core {
	struct pgv *               pkbdq;                /*     0     4 */
	unsigned int               feature_req_word;     /*     4     4 */
	unsigned int               hdrlen;               /*     8     4 */
	unsigned char              reset_pending_on_curr_blk; /*    12     1 */
	unsigned char              delete_blk_timer;     /*    13     1 */
	short unsigned int         kactive_blk_num;      /*    14     2 */
	short unsigned int         blk_sizeof_priv;      /*    16     2 */
	short unsigned int         last_kactive_blk_num; /*    18     2 */
	char *                     pkblk_start;          /*    20     4 */
	char *                     pkblk_end;            /*    24     4 */
	int                        kblk_size;            /*    28     4 */
	unsigned int               knum_blocks;          /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   knxt_seq_num;         /*    40     8 */
	char *                     prev;                 /*    48     4 */
	char *                     nxt_offset;           /*    52     4 */
	struct sk_buff *           skb;                  /*    56     4 */
	atomic_t                   blk_fill_in_prog;     /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	short unsigned int         retire_blk_tov;       /*    64     2 */
	short unsigned int         version;              /*    66     2 */
	long unsigned int          tov_in_jiffies;       /*    68     4 */
	struct timer_list          retire_blk_timer;     /*    72    52 */

	/* size: 128, cachelines: 2, members: 21 */
	/* sum members: 120, holes: 1, sum holes: 4 */
	/* padding: 4 */
};
struct pgv {
	char *                     buffer;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct packet_ring_buffer {
	struct pgv *               pg_vec;               /*     0     4 */
	unsigned int               head;                 /*     4     4 */
	unsigned int               frames_per_block;     /*     8     4 */
	unsigned int               frame_size;           /*    12     4 */
	unsigned int               frame_max;            /*    16     4 */
	unsigned int               pg_vec_order;         /*    20     4 */
	unsigned int               pg_vec_pages;         /*    24     4 */
	unsigned int               pg_vec_len;           /*    28     4 */
	atomic_t                   pending;              /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct tpacket_kbdq_core   prb_bdqc;             /*    40   128 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 40 bytes ago --- */

	/* size: 168, cachelines: 3, members: 10 */
	/* sum members: 164, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 40 bytes */
};
struct packet_fanout {
	struct net *               net;                  /*     0     4 */
	unsigned int               num_members;          /*     4     4 */
	u16                        id;                   /*     8     2 */
	u8                         type;                 /*    10     1 */
	u8                         flags;                /*    11     1 */
	atomic_t                   rr_cur;               /*    12     4 */
	struct list_head           list;                 /*    16     8 */
	struct sock *              arr[256];             /*    24  1024 */
	/* --- cacheline 16 boundary (1024 bytes) was 24 bytes ago --- */
	int                        next[256];            /*  1048  1024 */
	/* --- cacheline 32 boundary (2048 bytes) was 24 bytes ago --- */
	spinlock_t                 lock;                 /*  2072    16 */
	atomic_t                   sk_ref;               /*  2088     4 */

	/* XXX 20 bytes hole, try to pack */

	/* --- cacheline 33 boundary (2112 bytes) --- */
	struct packet_type         prot_hook;            /*  2112    28 */

	/* size: 2176, cachelines: 34, members: 12 */
	/* sum members: 2120, holes: 1, sum holes: 20 */
	/* padding: 36 */
};
struct packet_sock {
	struct sock                sk;                   /*     0   520 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 8 boundary (512 bytes) was 8 bytes ago --- */
	struct packet_fanout *     fanout;               /*   520     4 */
	union tpacket_stats_u      stats;                /*   524    12 */
	struct packet_ring_buffer  rx_ring;              /*   536   168 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	struct packet_ring_buffer  tx_ring;              /*   704   168 */
	/* --- cacheline 13 boundary (832 bytes) was 40 bytes ago --- */
	int                        copy_thresh;          /*   872     4 */
	spinlock_t                 bind_lock;            /*   876    16 */
	struct mutex               pg_vec_lock;          /*   892    40 */
	/* --- cacheline 14 boundary (896 bytes) was 36 bytes ago --- */
	unsigned int               running:1;            /*   932:31  4 */
	unsigned int               auxdata:1;            /*   932:30  4 */
	unsigned int               origdev:1;            /*   932:29  4 */
	unsigned int               has_vnet_hdr:1;       /*   932:28  4 */

	/* XXX 28 bits hole, try to pack */

	int                        ifindex;              /*   936     4 */
	__be16                     num;                  /*   940     2 */

	/* XXX 2 bytes hole, try to pack */

	struct packet_mclist *     mclist;               /*   944     4 */
	atomic_t                   mapped;               /*   948     4 */
	enum tpacket_versions      tp_version;           /*   952     4 */
	unsigned int               tp_hdrlen;            /*   956     4 */
	/* --- cacheline 15 boundary (960 bytes) --- */
	unsigned int               tp_reserve;           /*   960     4 */
	unsigned int               tp_loss:1;            /*   964:31  4 */
	unsigned int               tp_tx_has_off:1;      /*   964:30  4 */

	/* XXX 30 bits hole, try to pack */

	unsigned int               tp_tstamp;            /*   968     4 */
	struct net_device *        cached_dev;           /*   972     4 */

	/* XXX 48 bytes hole, try to pack */

	/* --- cacheline 16 boundary (1024 bytes) --- */
	struct packet_type         prot_hook;            /*  1024    28 */

	/* size: 1088, cachelines: 17, members: 24 */
	/* sum members: 1002, holes: 2, sum holes: 50 */
	/* bit holes: 2, sum bit holes: 58 bits */
	/* padding: 36 */
	/* paddings: 1, sum paddings: 4 */
};
struct inet_protosw {
	struct list_head           list;                 /*     0     8 */
	short unsigned int         type;                 /*     8     2 */
	short unsigned int         protocol;             /*    10     2 */
	struct proto *             prot;                 /*    12     4 */
	const struct proto_ops  *  ops;                  /*    16     4 */
	char                       no_check;             /*    20     1 */
	unsigned char              flags;                /*    21     1 */

	/* size: 24, cachelines: 1, members: 7 */
	/* padding: 2 */
	/* last cacheline: 24 bytes */
};
struct fdtable {
	unsigned int               max_fds;              /*     0     4 */
	struct file * *            fd;                   /*     4     4 */
	long unsigned int *        close_on_exec;        /*     8     4 */
	long unsigned int *        open_fds;             /*    12     4 */
	struct callback_head       rcu;                  /*    16     8 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct fib_rule_hdr {
	__u8                       family;               /*     0     1 */
	__u8                       dst_len;              /*     1     1 */
	__u8                       src_len;              /*     2     1 */
	__u8                       tos;                  /*     3     1 */
	__u8                       table;                /*     4     1 */
	__u8                       res1;                 /*     5     1 */
	__u8                       res2;                 /*     6     1 */
	__u8                       action;               /*     7     1 */
	__u32                      flags;                /*     8     4 */

	/* size: 12, cachelines: 1, members: 9 */
	/* last cacheline: 12 bytes */
};
struct fib_rule {
	struct list_head           list;                 /*     0     8 */
	atomic_t                   refcnt;               /*     8     4 */
	int                        iifindex;             /*    12     4 */
	int                        oifindex;             /*    16     4 */
	u32                        mark;                 /*    20     4 */
	u32                        mark_mask;            /*    24     4 */
	u32                        pref;                 /*    28     4 */
	u32                        flags;                /*    32     4 */
	u32                        table;                /*    36     4 */
	u8                         action;               /*    40     1 */

	/* XXX 3 bytes hole, try to pack */

	u32                        target;               /*    44     4 */
	struct fib_rule *          ctarget;              /*    48     4 */
	char                       iifname[16];          /*    52    16 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	char                       oifname[16];          /*    68    16 */
	kuid_t                     uid_start;            /*    84     4 */
	kuid_t                     uid_end;              /*    88     4 */
	struct callback_head       rcu;                  /*    92     8 */
	struct net *               fr_net;               /*   100     4 */

	/* size: 104, cachelines: 2, members: 18 */
	/* sum members: 101, holes: 1, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct fib_lookup_arg {
	void *                     lookup_ptr;           /*     0     4 */
	void *                     result;               /*     4     4 */
	struct fib_rule *          rule;                 /*     8     4 */
	int                        flags;                /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct fib_nh_exception {
	struct fib_nh_exception *  fnhe_next;            /*     0     4 */
	__be32                     fnhe_daddr;           /*     4     4 */
	u32                        fnhe_pmtu;            /*     8     4 */
	__be32                     fnhe_gw;              /*    12     4 */
	long unsigned int          fnhe_expires;         /*    16     4 */
	struct rtable *            fnhe_rth;             /*    20     4 */
	long unsigned int          fnhe_stamp;           /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* last cacheline: 28 bytes */
};
struct fnhe_hash_bucket {
	struct fib_nh_exception *  chain;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct fib_nh {
	struct net_device *        nh_dev;               /*     0     4 */
	struct hlist_node          nh_hash;              /*     4     8 */
	struct fib_info *          nh_parent;            /*    12     4 */
	unsigned int               nh_flags;             /*    16     4 */
	unsigned char              nh_scope;             /*    20     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        nh_oif;               /*    24     4 */
	__be32                     nh_gw;                /*    28     4 */
	__be32                     nh_saddr;             /*    32     4 */
	int                        nh_saddr_genid;       /*    36     4 */
	struct rtable * *          nh_pcpu_rth_output;   /*    40     4 */
	struct rtable *            nh_rth_input;         /*    44     4 */
	struct fnhe_hash_bucket *  nh_exceptions;        /*    48     4 */

	/* size: 52, cachelines: 1, members: 12 */
	/* sum members: 49, holes: 1, sum holes: 3 */
	/* last cacheline: 52 bytes */
};
struct fib_info {
	struct hlist_node          fib_hash;             /*     0     8 */
	struct hlist_node          fib_lhash;            /*     8     8 */
	struct net *               fib_net;              /*    16     4 */
	int                        fib_treeref;          /*    20     4 */
	atomic_t                   fib_clntref;          /*    24     4 */
	unsigned int               fib_flags;            /*    28     4 */
	unsigned char              fib_dead;             /*    32     1 */
	unsigned char              fib_protocol;         /*    33     1 */
	unsigned char              fib_scope;            /*    34     1 */
	unsigned char              fib_type;             /*    35     1 */
	__be32                     fib_prefsrc;          /*    36     4 */
	u32                        fib_priority;         /*    40     4 */
	u32 *                      fib_metrics;          /*    44     4 */
	int                        fib_nhs;              /*    48     4 */
	struct callback_head       rcu;                  /*    52     8 */
	struct fib_nh              fib_nh[0];            /*    60     0 */

	/* size: 60, cachelines: 1, members: 16 */
	/* last cacheline: 60 bytes */
};
struct sockaddr_un {
	__kernel_sa_family_t       sun_family;           /*     0     2 */
	char                       sun_path[108];        /*     2   108 */
	/* --- cacheline 1 boundary (64 bytes) was 46 bytes ago --- */

	/* size: 110, cachelines: 2, members: 2 */
	/* last cacheline: 46 bytes */
};
struct unix_address {
	atomic_t                   refcnt;               /*     0     4 */
	int                        len;                  /*     4     4 */
	unsigned int               hash;                 /*     8     4 */
	struct sockaddr_un         name[0];              /*    12     0 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct unix_sock {
	struct sock                sk;                   /*     0   520 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 8 boundary (512 bytes) was 8 bytes ago --- */
	struct unix_address *      addr;                 /*   520     4 */
	struct path                path;                 /*   524     8 */
	struct mutex               readlock;             /*   532    40 */
	struct sock *              peer;                 /*   572     4 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	struct list_head           link;                 /*   576     8 */
	atomic_long_t              inflight;             /*   584     4 */
	spinlock_t                 lock;                 /*   588    16 */
	unsigned char              recursion_level;      /*   604     1 */

	/* XXX 3 bytes hole, try to pack */

	long unsigned int          gc_flags;             /*   608     4 */

	/* XXX 28 bytes hole, try to pack */

	/* --- cacheline 10 boundary (640 bytes) --- */
	struct socket_wq           peer_wq;              /*   640    64 */

	/* XXX last struct has 28 bytes of padding */

	/* --- cacheline 11 boundary (704 bytes) --- */

	/* size: 704, cachelines: 11, members: 11 */
	/* sum members: 673, holes: 2, sum holes: 31 */
	/* paddings: 2, sum paddings: 32 */
};
struct pidmap {
	atomic_t                   nr_free;              /*     0     4 */
	void *                     page;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct xt_table_info {
	unsigned int               size;                 /*     0     4 */
	unsigned int               number;               /*     4     4 */
	unsigned int               initial_entries;      /*     8     4 */
	unsigned int               hook_entry[5];        /*    12    20 */
	unsigned int               underflow[5];         /*    32    20 */
	unsigned int               stacksize;            /*    52     4 */
	unsigned int *             stackptr;             /*    56     4 */
	void * * *                 jumpstack;            /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     entries[1];           /*    64     4 */

	/* size: 68, cachelines: 2, members: 9 */
	/* last cacheline: 4 bytes */
};
struct ktermios {
	tcflag_t                   c_iflag;              /*     0     4 */
	tcflag_t                   c_oflag;              /*     4     4 */
	tcflag_t                   c_cflag;              /*     8     4 */
	tcflag_t                   c_lflag;              /*    12     4 */
	cc_t                       c_line;               /*    16     1 */
	cc_t                       c_cc[19];             /*    17    19 */
	speed_t                    c_ispeed;             /*    36     4 */
	speed_t                    c_ospeed;             /*    40     4 */

	/* size: 44, cachelines: 1, members: 8 */
	/* last cacheline: 44 bytes */
};
struct winsize {
	short unsigned int         ws_row;               /*     0     2 */
	short unsigned int         ws_col;               /*     2     2 */
	short unsigned int         ws_xpixel;            /*     4     2 */
	short unsigned int         ws_ypixel;            /*     6     2 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct termiox {
	__u16                      x_hflag;              /*     0     2 */
	__u16                      x_cflag;              /*     2     2 */
	__u16                      x_rflag[5];           /*     4    10 */
	__u16                      x_sflag;              /*    14     2 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct tty_operations {
	struct tty_struct *        (*lookup)(struct tty_driver *, struct inode *, int); /*     0     4 */
	int                        (*install)(struct tty_driver *, struct tty_struct *); /*     4     4 */
	void                       (*remove)(struct tty_driver *, struct tty_struct *); /*     8     4 */
	int                        (*open)(struct tty_struct *, struct file *); /*    12     4 */
	void                       (*close)(struct tty_struct *, struct file *); /*    16     4 */
	void                       (*shutdown)(struct tty_struct *); /*    20     4 */
	void                       (*cleanup)(struct tty_struct *); /*    24     4 */
	int                        (*write)(struct tty_struct *, const unsigned char  *, int); /*    28     4 */
	int                        (*put_char)(struct tty_struct *, unsigned char); /*    32     4 */
	void                       (*flush_chars)(struct tty_struct *); /*    36     4 */
	int                        (*write_room)(struct tty_struct *); /*    40     4 */
	int                        (*chars_in_buffer)(struct tty_struct *); /*    44     4 */
	int                        (*ioctl)(struct tty_struct *, unsigned int, long unsigned int); /*    48     4 */
	long int                   (*compat_ioctl)(struct tty_struct *, unsigned int, long unsigned int); /*    52     4 */
	void                       (*set_termios)(struct tty_struct *, struct ktermios *); /*    56     4 */
	void                       (*throttle)(struct tty_struct *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*unthrottle)(struct tty_struct *); /*    64     4 */
	void                       (*stop)(struct tty_struct *); /*    68     4 */
	void                       (*start)(struct tty_struct *); /*    72     4 */
	void                       (*hangup)(struct tty_struct *); /*    76     4 */
	int                        (*break_ctl)(struct tty_struct *, int); /*    80     4 */
	void                       (*flush_buffer)(struct tty_struct *); /*    84     4 */
	void                       (*set_ldisc)(struct tty_struct *); /*    88     4 */
	void                       (*wait_until_sent)(struct tty_struct *, int); /*    92     4 */
	void                       (*send_xchar)(struct tty_struct *, char); /*    96     4 */
	int                        (*tiocmget)(struct tty_struct *); /*   100     4 */
	int                        (*tiocmset)(struct tty_struct *, unsigned int, unsigned int); /*   104     4 */
	int                        (*resize)(struct tty_struct *, struct winsize *); /*   108     4 */
	int                        (*set_termiox)(struct tty_struct *, struct termiox *); /*   112     4 */
	int                        (*get_icount)(struct tty_struct *, struct serial_icounter_struct *); /*   116     4 */
	const struct file_operations  * proc_fops;       /*   120     4 */

	/* size: 124, cachelines: 2, members: 31 */
	/* last cacheline: 60 bytes */
};
struct tty_driver {
	int                        magic;                /*     0     4 */
	struct kref                kref;                 /*     4     4 */
	struct cdev *              cdevs;                /*     8     4 */
	struct module *            owner;                /*    12     4 */
	const char  *              driver_name;          /*    16     4 */
	const char  *              name;                 /*    20     4 */
	int                        name_base;            /*    24     4 */
	int                        major;                /*    28     4 */
	int                        minor_start;          /*    32     4 */
	unsigned int               num;                  /*    36     4 */
	short int                  type;                 /*    40     2 */
	short int                  subtype;              /*    42     2 */
	struct ktermios            init_termios;         /*    44    44 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	long unsigned int          flags;                /*    88     4 */
	struct proc_dir_entry *    proc_entry;           /*    92     4 */
	struct tty_driver *        other;                /*    96     4 */
	struct tty_struct * *      ttys;                 /*   100     4 */
	struct tty_port * *        ports;                /*   104     4 */
	struct ktermios * *        termios;              /*   108     4 */
	void *                     driver_state;         /*   112     4 */
	const struct tty_operations  * ops;              /*   116     4 */
	struct list_head           tty_drivers;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 22 */
};
struct tty_port {
	struct tty_bufhead         buf;                  /*     0    48 */
	struct tty_struct *        tty;                  /*    48     4 */
	struct tty_struct *        itty;                 /*    52     4 */
	const struct tty_port_operations  * ops;         /*    56     4 */
	spinlock_t                 lock;                 /*    60    16 */
	/* --- cacheline 1 boundary (64 bytes) was 12 bytes ago --- */
	int                        blocked_open;         /*    76     4 */
	int                        count;                /*    80     4 */
	wait_queue_head_t          open_wait;            /*    84    24 */
	wait_queue_head_t          close_wait;           /*   108    24 */
	/* --- cacheline 2 boundary (128 bytes) was 4 bytes ago --- */
	wait_queue_head_t          delta_msr_wait;       /*   132    24 */
	long unsigned int          flags;                /*   156     4 */
	long unsigned int          iflags;               /*   160     4 */
	unsigned char              console:1;            /*   164: 7  1 */
	unsigned char              low_latency:1;        /*   164: 6  1 */

	/* XXX 6 bits hole, try to pack */
	/* XXX 3 bytes hole, try to pack */

	struct mutex               mutex;                /*   168    40 */
	/* --- cacheline 3 boundary (192 bytes) was 16 bytes ago --- */
	struct mutex               buf_mutex;            /*   208    40 */
	unsigned char *            xmit_buf;             /*   248     4 */
	unsigned int               close_delay;          /*   252     4 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	unsigned int               closing_wait;         /*   256     4 */
	int                        drain_delay;          /*   260     4 */
	struct kref                kref;                 /*   264     4 */

	/* size: 268, cachelines: 5, members: 21 */
	/* sum members: 265, holes: 1, sum holes: 3 */
	/* bit holes: 1, sum bit holes: 6 bits */
	/* last cacheline: 12 bytes */
};
struct ld_semaphore {
	long int                   count;                /*     0     4 */
	raw_spinlock_t             wait_lock;            /*     4    16 */
	unsigned int               wait_readers;         /*    20     4 */
	struct list_head           read_wait;            /*    24     8 */
	struct list_head           write_wait;           /*    32     8 */

	/* size: 40, cachelines: 1, members: 5 */
	/* last cacheline: 40 bytes */
};
struct tty_ldisc_ops {
	int                        magic;                /*     0     4 */
	char *                     name;                 /*     4     4 */
	int                        num;                  /*     8     4 */
	int                        flags;                /*    12     4 */
	int                        (*open)(struct tty_struct *); /*    16     4 */
	void                       (*close)(struct tty_struct *); /*    20     4 */
	void                       (*flush_buffer)(struct tty_struct *); /*    24     4 */
	ssize_t                    (*chars_in_buffer)(struct tty_struct *); /*    28     4 */
	ssize_t                    (*read)(struct tty_struct *, struct file *, unsigned char *, size_t); /*    32     4 */
	ssize_t                    (*write)(struct tty_struct *, struct file *, const unsigned char  *, size_t); /*    36     4 */
	int                        (*ioctl)(struct tty_struct *, struct file *, unsigned int, long unsigned int); /*    40     4 */
	long int                   (*compat_ioctl)(struct tty_struct *, struct file *, unsigned int, long unsigned int); /*    44     4 */
	void                       (*set_termios)(struct tty_struct *, struct ktermios *); /*    48     4 */
	unsigned int               (*poll)(struct tty_struct *, struct file *, struct poll_table_struct *); /*    52     4 */
	int                        (*hangup)(struct tty_struct *); /*    56     4 */
	void                       (*receive_buf)(struct tty_struct *, const unsigned char  *, char *, int); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*write_wakeup)(struct tty_struct *); /*    64     4 */
	void                       (*dcd_change)(struct tty_struct *, unsigned int); /*    68     4 */
	struct module *            owner;                /*    72     4 */
	int                        refcount;             /*    76     4 */

	/* size: 80, cachelines: 2, members: 20 */
	/* last cacheline: 16 bytes */
};
struct tty_ldisc {
	struct tty_ldisc_ops *     ops;                  /*     0     4 */
	struct tty_struct *        tty;                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct tty_buffer {
	struct tty_buffer *        next;                 /*     0     4 */
	char *                     char_buf_ptr;         /*     4     4 */
	unsigned char *            flag_buf_ptr;         /*     8     4 */
	int                        used;                 /*    12     4 */
	int                        size;                 /*    16     4 */
	int                        commit;               /*    20     4 */
	int                        read;                 /*    24     4 */
	long unsigned int          data[0];              /*    28     0 */

	/* size: 28, cachelines: 1, members: 8 */
	/* last cacheline: 28 bytes */
};
struct tty_bufhead {
	struct work_struct         work;                 /*     0    16 */
	spinlock_t                 lock;                 /*    16    16 */
	struct tty_buffer *        head;                 /*    32     4 */
	struct tty_buffer *        tail;                 /*    36     4 */
	struct tty_buffer *        free;                 /*    40     4 */
	int                        memory_used;          /*    44     4 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct tty_port_operations {
	int                        (*carrier_raised)(struct tty_port *); /*     0     4 */
	void                       (*dtr_rts)(struct tty_port *, int); /*     4     4 */
	void                       (*shutdown)(struct tty_port *); /*     8     4 */
	void                       (*drop)(struct tty_port *); /*    12     4 */
	int                        (*activate)(struct tty_port *, struct tty_struct *); /*    16     4 */
	void                       (*destruct)(struct tty_port *); /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct tc_stats {
	__u64                      bytes;                /*     0     8 */
	__u32                      packets;              /*     8     4 */
	__u32                      drops;                /*    12     4 */
	__u32                      overlimits;           /*    16     4 */
	__u32                      bps;                  /*    20     4 */
	__u32                      pps;                  /*    24     4 */
	__u32                      qlen;                 /*    28     4 */
	__u32                      backlog;              /*    32     4 */

	/* size: 40, cachelines: 1, members: 8 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct tc_sizespec {
	unsigned char              cell_log;             /*     0     1 */
	unsigned char              size_log;             /*     1     1 */
	short int                  cell_align;           /*     2     2 */
	int                        overhead;             /*     4     4 */
	unsigned int               linklayer;            /*     8     4 */
	unsigned int               mpu;                  /*    12     4 */
	unsigned int               mtu;                  /*    16     4 */
	unsigned int               tsize;                /*    20     4 */

	/* size: 24, cachelines: 1, members: 8 */
	/* last cacheline: 24 bytes */
};
struct gnet_stats_basic_packed {
	__u64                      bytes;                /*     0     8 */
	__u32                      packets;              /*     8     4 */

	/* size: 12, cachelines: 1, members: 2 */
	/* last cacheline: 12 bytes */
};
struct gnet_stats_rate_est {
	__u32                      bps;                  /*     0     4 */
	__u32                      pps;                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct gnet_stats_queue {
	__u32                      qlen;                 /*     0     4 */
	__u32                      backlog;              /*     4     4 */
	__u32                      drops;                /*     8     4 */
	__u32                      requeues;             /*    12     4 */
	__u32                      overlimits;           /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct gnet_dump {
	spinlock_t *               lock;                 /*     0     4 */
	struct sk_buff *           skb;                  /*     4     4 */
	struct nlattr *            tail;                 /*     8     4 */
	int                        compat_tc_stats;      /*    12     4 */
	int                        compat_xstats;        /*    16     4 */
	void *                     xstats;               /*    20     4 */
	int                        xstats_len;           /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	struct tc_stats            tc_stats;             /*    32    40 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 8 */
	/* sum members: 68, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 8 bytes */
};
struct qdisc_size_table {
	struct callback_head       rcu;                  /*     0     8 */
	struct list_head           list;                 /*     8     8 */
	struct tc_sizespec         szopts;               /*    16    24 */
	int                        refcnt;               /*    40     4 */
	u16                        data[0];              /*    44     0 */

	/* size: 44, cachelines: 1, members: 5 */
	/* last cacheline: 44 bytes */
};
struct Qdisc_ops {
	struct Qdisc_ops *         next;                 /*     0     4 */
	const struct Qdisc_class_ops  * cl_ops;          /*     4     4 */
	char                       id[16];               /*     8    16 */
	int                        priv_size;            /*    24     4 */
	int                        (*enqueue)(struct sk_buff *, struct Qdisc *); /*    28     4 */
	struct sk_buff *           (*dequeue)(struct Qdisc *); /*    32     4 */
	struct sk_buff *           (*peek)(struct Qdisc *); /*    36     4 */
	unsigned int               (*drop)(struct Qdisc *); /*    40     4 */
	int                        (*init)(struct Qdisc *, struct nlattr *); /*    44     4 */
	void                       (*reset)(struct Qdisc *); /*    48     4 */
	void                       (*destroy)(struct Qdisc *); /*    52     4 */
	int                        (*change)(struct Qdisc *, struct nlattr *); /*    56     4 */
	void                       (*attach)(struct Qdisc *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*dump)(struct Qdisc *, struct sk_buff *); /*    64     4 */
	int                        (*dump_stats)(struct Qdisc *, struct gnet_dump *); /*    68     4 */
	struct module *            owner;                /*    72     4 */

	/* size: 76, cachelines: 2, members: 16 */
	/* last cacheline: 12 bytes */
};
struct Qdisc_class_ops {
	struct netdev_queue *      (*select_queue)(struct Qdisc *, struct tcmsg *); /*     0     4 */
	int                        (*graft)(struct Qdisc *, long unsigned int, struct Qdisc *, struct Qdisc * *); /*     4     4 */
	struct Qdisc *             (*leaf)(struct Qdisc *, long unsigned int); /*     8     4 */
	void                       (*qlen_notify)(struct Qdisc *, long unsigned int); /*    12     4 */
	long unsigned int          (*get)(struct Qdisc *, u32); /*    16     4 */
	void                       (*put)(struct Qdisc *, long unsigned int); /*    20     4 */
	int                        (*change)(struct Qdisc *, u32, u32, struct nlattr * *, long unsigned int *); /*    24     4 */
	int                        (*delete)(struct Qdisc *, long unsigned int); /*    28     4 */
	void                       (*walk)(struct Qdisc *, struct qdisc_walker *); /*    32     4 */
	struct tcf_proto * *       (*tcf_chain)(struct Qdisc *, long unsigned int); /*    36     4 */
	long unsigned int          (*bind_tcf)(struct Qdisc *, long unsigned int, u32); /*    40     4 */
	void                       (*unbind_tcf)(struct Qdisc *, long unsigned int); /*    44     4 */
	int                        (*dump)(struct Qdisc *, long unsigned int, struct sk_buff *, struct tcmsg *); /*    48     4 */
	int                        (*dump_stats)(struct Qdisc *, long unsigned int, struct gnet_dump *); /*    52     4 */

	/* size: 56, cachelines: 1, members: 14 */
	/* last cacheline: 56 bytes */
};
struct tcf_proto {
	struct tcf_proto *         next;                 /*     0     4 */
	void *                     root;                 /*     4     4 */
	int                        (*classify)(struct sk_buff *, const struct tcf_proto  *, struct tcf_result *); /*     8     4 */
	__be16                     protocol;             /*    12     2 */

	/* XXX 2 bytes hole, try to pack */

	u32                        prio;                 /*    16     4 */
	u32                        classid;              /*    20     4 */
	struct Qdisc *             q;                    /*    24     4 */
	void *                     data;                 /*    28     4 */
	const struct tcf_proto_ops  * ops;               /*    32     4 */

	/* size: 36, cachelines: 1, members: 9 */
	/* sum members: 34, holes: 1, sum holes: 2 */
	/* last cacheline: 36 bytes */
};
struct tcf_result {
	long unsigned int          class;                /*     0     4 */
	u32                        classid;              /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct tcf_proto_ops {
	struct tcf_proto_ops *     next;                 /*     0     4 */
	char                       kind[16];             /*     4    16 */
	int                        (*classify)(struct sk_buff *, const struct tcf_proto  *, struct tcf_result *); /*    20     4 */
	int                        (*init)(struct tcf_proto *); /*    24     4 */
	void                       (*destroy)(struct tcf_proto *); /*    28     4 */
	long unsigned int          (*get)(struct tcf_proto *, u32); /*    32     4 */
	void                       (*put)(struct tcf_proto *, long unsigned int); /*    36     4 */
	int                        (*change)(struct net *, struct sk_buff *, struct tcf_proto *, long unsigned int, u32, struct nlattr * *, long unsigned int *); /*    40     4 */
	int                        (*delete)(struct tcf_proto *, long unsigned int); /*    44     4 */
	void                       (*walk)(struct tcf_proto *, struct tcf_walker *); /*    48     4 */
	int                        (*dump)(struct tcf_proto *, long unsigned int, struct sk_buff *, struct tcmsg *); /*    52     4 */
	struct module *            owner;                /*    56     4 */

	/* size: 60, cachelines: 1, members: 12 */
	/* last cacheline: 60 bytes */
};
struct kthread_create_info {
	int                        (*threadfn)(void *);  /*     0     4 */
	void *                     data;                 /*     4     4 */
	int                        node;                 /*     8     4 */
	struct task_struct *       result;               /*    12     4 */
	struct completion          done;                 /*    16    28 */
	struct list_head           list;                 /*    44     8 */

	/* size: 52, cachelines: 1, members: 6 */
	/* last cacheline: 52 bytes */
};
struct fn_zone {
	struct fn_zone *           fz_next;              /*     0     4 */
	struct hlist_head *        fz_hash;              /*     4     4 */
	seqlock_t                  fz_lock;              /*     8    20 */
	u32                        fz_hashmask;          /*    28     4 */
	u8                         fz_order;             /*    32     1 */
	u8                         fz_revorder;          /*    33     1 */

	/* XXX 2 bytes hole, try to pack */

	__be32                     fz_mask;              /*    36     4 */
	struct hlist_head          fz_embedded_hash[16]; /*    40    64 */
	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
	int                        fz_nent;              /*   104     4 */
	int                        fz_divisor;           /*   108     4 */

	/* size: 112, cachelines: 2, members: 10 */
	/* sum members: 110, holes: 1, sum holes: 2 */
	/* last cacheline: 48 bytes */
};
struct fn_hash {
	struct fn_zone *           fn_zones[33];         /*     0   132 */
	/* --- cacheline 2 boundary (128 bytes) was 4 bytes ago --- */
	struct fn_zone *           fn_zone_list;         /*   132     4 */

	/* size: 136, cachelines: 3, members: 2 */
	/* last cacheline: 8 bytes */
};
struct fib_alias {
	struct list_head           fa_list;              /*     0     8 */
	struct fib_info *          fa_info;              /*     8     4 */
	u8                         fa_tos;               /*    12     1 */
	u8                         fa_type;              /*    13     1 */
	u8                         fa_scope;             /*    14     1 */
	u8                         fa_state;             /*    15     1 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct fib_node {
	struct hlist_node          fn_hash;              /*     0     8 */
	struct list_head           fn_alias;             /*     8     8 */
	__be32                     fn_key;               /*    16     4 */
	struct fib_alias           fn_embedded_alias;    /*    20    16 */

	/* size: 36, cachelines: 1, members: 4 */
	/* last cacheline: 36 bytes */
};
struct rt_hash_bucket {
	struct rtable *            chain;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct module_sect_attr {
	struct module_attribute    mattr;                /*     0    28 */
	char *                     name;                 /*    28     4 */
	long unsigned int          address;              /*    32     4 */

	/* size: 36, cachelines: 1, members: 3 */
	/* last cacheline: 36 bytes */
};
struct clocksource {
	cycle_t                    (*read)(struct clocksource *); /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	cycle_t                    cycle_last;           /*     8     8 */
	cycle_t                    mask;                 /*    16     8 */
	u32                        mult;                 /*    24     4 */
	u32                        shift;                /*    28     4 */
	u64                        max_idle_ns;          /*    32     8 */
	u32                        maxadj;               /*    40     4 */
	const char  *              name;                 /*    44     4 */
	struct list_head           list;                 /*    48     8 */
	int                        rating;               /*    56     4 */
	int                        (*enable)(struct clocksource *); /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*disable)(struct clocksource *); /*    64     4 */
	long unsigned int          flags;                /*    68     4 */
	void                       (*suspend)(struct clocksource *); /*    72     4 */
	void                       (*resume)(struct clocksource *); /*    76     4 */

	/* size: 128, cachelines: 2, members: 15 */
	/* sum members: 76, holes: 1, sum holes: 4 */
	/* padding: 48 */
};
struct timekeeper {
	struct clocksource *       clock;                /*     0     4 */
	u32                        mult;                 /*     4     4 */
	u32                        shift;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	cycle_t                    cycle_interval;       /*    16     8 */
	cycle_t                    cycle_last;           /*    24     8 */
	u64                        xtime_interval;       /*    32     8 */
	s64                        xtime_remainder;      /*    40     8 */
	u32                        raw_interval;         /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	u64                        xtime_sec;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u64                        xtime_nsec;           /*    64     8 */
	s64                        ntp_error;            /*    72     8 */
	u32                        ntp_error_shift;      /*    80     4 */
	struct timespec            wall_to_monotonic;    /*    84     8 */

	/* XXX 4 bytes hole, try to pack */

	ktime_t                    offs_real;            /*    96     8 */
	struct timespec            total_sleep_time;     /*   104     8 */
	ktime_t                    offs_boot;            /*   112     8 */
	struct timespec            raw_time;             /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	s32                        tai_offset;           /*   128     4 */

	/* XXX 4 bytes hole, try to pack */

	ktime_t                    offs_tai;             /*   136     8 */

	/* size: 144, cachelines: 3, members: 19 */
	/* sum members: 128, holes: 4, sum holes: 16 */
	/* last cacheline: 16 bytes */
};
struct log {
	u64                        ts_nsec;              /*     0     8 */
	u16                        len;                  /*     8     2 */
	u16                        text_len;             /*    10     2 */
	u16                        dict_len;             /*    12     2 */
	u8                         facility;             /*    14     1 */
	u8                         flags:5;              /*    15: 3  1 */
	u8                         level:3;              /*    15: 0  1 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct mount {
	struct list_head           mnt_hash;             /*     0     8 */
	struct mount *             mnt_parent;           /*     8     4 */
	struct dentry *            mnt_mountpoint;       /*    12     4 */
	struct vfsmount            mnt;                  /*    16    12 */
	struct mnt_pcp *           mnt_pcp;              /*    28     4 */
	struct list_head           mnt_mounts;           /*    32     8 */
	struct list_head           mnt_child;            /*    40     8 */
	struct list_head           mnt_instance;         /*    48     8 */
	const char  *              mnt_devname;          /*    56     4 */
	struct list_head           mnt_list;             /*    60     8 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	struct list_head           mnt_expire;           /*    68     8 */
	struct list_head           mnt_share;            /*    76     8 */
	struct list_head           mnt_slave_list;       /*    84     8 */
	struct list_head           mnt_slave;            /*    92     8 */
	struct mount *             mnt_master;           /*   100     4 */
	struct mnt_namespace *     mnt_ns;               /*   104     4 */
	struct hlist_head          mnt_fsnotify_marks;   /*   108     4 */
	__u32                      mnt_fsnotify_mask;    /*   112     4 */
	int                        mnt_id;               /*   116     4 */
	int                        mnt_group_id;         /*   120     4 */
	int                        mnt_expiry_mark;      /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        mnt_pinned;           /*   128     4 */
	int                        mnt_ghosts;           /*   132     4 */

	/* size: 136, cachelines: 3, members: 23 */
	/* last cacheline: 8 bytes */
};
struct mnt_pcp {
	int                        mnt_count;            /*     0     4 */
	int                        mnt_writers;          /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
